id,classname,method_name,method_sig,method_def_line,mut_location,mut_start,mut_end,mut_operator,orig_token,pred_token,pred_pos,pred_score,masked_expr,masked_seq
0,Parser.java,parse,"Document parse(String html, String baseUri)",51,52,1675,1678,IdentifierMutator-Variable,html,http,1,5.240224E-4,<mask>,"Document parse(String html, String baseUri) {
        Parser parser = new Parser(<mask>, baseUri, false);
        return parser.parse();
    }"
1,Parser.java,parse,"Document parse(String html, String baseUri)",51,52,1675,1678,IdentifierMutator-Variable,html,xml,2,1.3117949E-4,<mask>,"Document parse(String html, String baseUri) {
        Parser parser = new Parser(<mask>, baseUri, false);
        return parser.parse();
    }"
2,Parser.java,parse,"Document parse(String html, String baseUri)",51,52,1675,1678,IdentifierMutator-Variable,html,htm,4,6.443837E-5,<mask>,"Document parse(String html, String baseUri) {
        Parser parser = new Parser(<mask>, baseUri, false);
        return parser.parse();
    }"
3,Parser.java,parse,"Document parse(String html, String baseUri)",51,52,1681,1687,IdentifierMutator-Variable,baseUri,true,0,0.23830268,<mask>,"Document parse(String html, String baseUri) {
        Parser parser = new Parser(html,<mask>, false);
        return parser.parse();
    }"
4,Parser.java,parse,"Document parse(String html, String baseUri)",51,52,1681,1687,IdentifierMutator-Variable,baseUri,false,1,0.20361175,<mask>,"Document parse(String html, String baseUri) {
        Parser parser = new Parser(html,<mask>, false);
        return parser.parse();
    }"
5,Parser.java,parse,"Document parse(String html, String baseUri)",51,52,1681,1687,IdentifierMutator-Variable,baseUri,null,2,0.18314408,<mask>,"Document parse(String html, String baseUri) {
        Parser parser = new Parser(html,<mask>, false);
        return parser.parse();
    }"
6,Parser.java,parse,"Document parse(String html, String baseUri)",51,52,1681,1687,IdentifierMutator-Variable,baseUri,"""""",3,0.104148835,<mask>,"Document parse(String html, String baseUri) {
        Parser parser = new Parser(html,<mask>, false);
        return parser.parse();
    }"
7,Parser.java,parse,"Document parse(String html, String baseUri)",51,52,1681,1687,IdentifierMutator-Variable,baseUri,url,4,0.05353709,<mask>,"Document parse(String html, String baseUri) {
        Parser parser = new Parser(html,<mask>, false);
        return parser.parse();
    }"
8,Parser.java,parse,"Document parse(String html, String baseUri)",51,52,1690,1694,IdentifierMutator-Literal,false,null,0,0.18930934,<mask>,"Document parse(String html, String baseUri) {
        Parser parser = new Parser(html, baseUri,<mask>);
        return parser.parse();
    }"
9,Parser.java,parse,"Document parse(String html, String baseUri)",51,52,1690,1694,IdentifierMutator-Literal,false,true,1,0.17973328,<mask>,"Document parse(String html, String baseUri) {
        Parser parser = new Parser(html, baseUri,<mask>);
        return parser.parse();
    }"
10,Parser.java,parse,"Document parse(String html, String baseUri)",51,52,1690,1694,IdentifierMutator-Literal,false,this,3,0.065036565,<mask>,"Document parse(String html, String baseUri) {
        Parser parser = new Parser(html, baseUri,<mask>);
        return parser.parse();
    }"
11,Parser.java,parse,"Document parse(String html, String baseUri)",51,52,1690,1694,IdentifierMutator-Literal,false,options,4,0.04755609,<mask>,"Document parse(String html, String baseUri) {
        Parser parser = new Parser(html, baseUri,<mask>);
        return parser.parse();
    }"
12,Parser.java,parse,"Document parse(String html, String baseUri)",51,53,1720,1724,MethodCallMutator,parse,document,2,0.0029023015,<mask>r.<mask>(),"Document parse(String html, String baseUri) {
        Parser parser = new Parser(html, baseUri, false);
        return parser.<mask>();
    }"
13,Parser.java,parse,"Document parse(String html, String baseUri)",51,53,1720,1724,MethodCallMutator,parse,get,3,0.001648913,<mask>r.<mask>(),"Document parse(String html, String baseUri) {
        Parser parser = new Parser(html, baseUri, false);
        return parser.<mask>();
    }"
14,Parser.java,parse,"Document parse(String html, String baseUri)",51,53,1720,1724,MethodCallMutator,parse,parser,4,0.001297388,<mask>r.<mask>(),"Document parse(String html, String baseUri) {
        Parser parser = new Parser(html, baseUri, false);
        return parser.<mask>();
    }"
15,Parser.java,parse,"Document parse(String html, String baseUri)",51,53,1713,1718,IdentifierMutator-Variable,parser,reader,1,1.8250372E-5,<mask>,"Document parse(String html, String baseUri) {
        Parser parser = new Parser(html, baseUri, false);
        return<mask>.parse();
    }"
16,Parser.java,parse,"Document parse(String html, String baseUri)",51,53,1713,1718,IdentifierMutator-Variable,parser,super,3,9.190465E-6,<mask>,"Document parse(String html, String baseUri) {
        Parser parser = new Parser(html, baseUri, false);
        return<mask>.parse();
    }"
17,Parser.java,parse,"Document parse(String html, String baseUri)",51,53,1713,1718,IdentifierMutator-Variable,parser,builder,4,9.0929525E-6,<mask>,"Document parse(String html, String baseUri) {
        Parser parser = new Parser(html, baseUri, false);
        return<mask>.parse();
    }"
18,Parser.java,parseBodyFragment,"Document parseBodyFragment(String bodyHtml, String baseUri)",62,63,2140,2147,IdentifierMutator-Variable,bodyHtml,body,0,0.6238776,<mask>,"Document parseBodyFragment(String bodyHtml, String baseUri) {
        Parser parser = new Parser(<mask>, baseUri, true);
        return parser.parse();
    }"
19,Parser.java,parseBodyFragment,"Document parseBodyFragment(String bodyHtml, String baseUri)",62,63,2140,2147,IdentifierMutator-Variable,bodyHtml,document,1,0.11678461,<mask>,"Document parseBodyFragment(String bodyHtml, String baseUri) {
        Parser parser = new Parser(<mask>, baseUri, true);
        return parser.parse();
    }"
20,Parser.java,parseBodyFragment,"Document parseBodyFragment(String bodyHtml, String baseUri)",62,63,2140,2147,IdentifierMutator-Variable,bodyHtml,html,2,0.08885267,<mask>,"Document parseBodyFragment(String bodyHtml, String baseUri) {
        Parser parser = new Parser(<mask>, baseUri, true);
        return parser.parse();
    }"
21,Parser.java,parseBodyFragment,"Document parseBodyFragment(String bodyHtml, String baseUri)",62,63,2140,2147,IdentifierMutator-Variable,bodyHtml,this,3,0.03182511,<mask>,"Document parseBodyFragment(String bodyHtml, String baseUri) {
        Parser parser = new Parser(<mask>, baseUri, true);
        return parser.parse();
    }"
22,Parser.java,parseBodyFragment,"Document parseBodyFragment(String bodyHtml, String baseUri)",62,63,2140,2147,IdentifierMutator-Variable,bodyHtml,xml,4,0.016091371,<mask>,"Document parseBodyFragment(String bodyHtml, String baseUri) {
        Parser parser = new Parser(<mask>, baseUri, true);
        return parser.parse();
    }"
23,Parser.java,parseBodyFragment,"Document parseBodyFragment(String bodyHtml, String baseUri)",62,63,2150,2156,IdentifierMutator-Variable,baseUri,true,0,0.3841983,<mask>,"Document parseBodyFragment(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml,<mask>, true);
        return parser.parse();
    }"
24,Parser.java,parseBodyFragment,"Document parseBodyFragment(String bodyHtml, String baseUri)",62,63,2150,2156,IdentifierMutator-Variable,baseUri,null,1,0.19495994,<mask>,"Document parseBodyFragment(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml,<mask>, true);
        return parser.parse();
    }"
25,Parser.java,parseBodyFragment,"Document parseBodyFragment(String bodyHtml, String baseUri)",62,63,2150,2156,IdentifierMutator-Variable,baseUri,false,2,0.15909646,<mask>,"Document parseBodyFragment(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml,<mask>, true);
        return parser.parse();
    }"
26,Parser.java,parseBodyFragment,"Document parseBodyFragment(String bodyHtml, String baseUri)",62,63,2150,2156,IdentifierMutator-Variable,baseUri,"""""",3,0.102987304,<mask>,"Document parseBodyFragment(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml,<mask>, true);
        return parser.parse();
    }"
27,Parser.java,parseBodyFragment,"Document parseBodyFragment(String bodyHtml, String baseUri)",62,63,2150,2156,IdentifierMutator-Variable,baseUri,url,4,0.02203169,<mask>,"Document parseBodyFragment(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml,<mask>, true);
        return parser.parse();
    }"
28,Parser.java,parseBodyFragment,"Document parseBodyFragment(String bodyHtml, String baseUri)",62,63,2159,2162,IdentifierMutator-Literal,true,false,1,0.19938846,<mask>,"Document parseBodyFragment(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri,<mask>);
        return parser.parse();
    }"
29,Parser.java,parseBodyFragment,"Document parseBodyFragment(String bodyHtml, String baseUri)",62,63,2159,2162,IdentifierMutator-Literal,true,null,2,0.15791424,<mask>,"Document parseBodyFragment(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri,<mask>);
        return parser.parse();
    }"
30,Parser.java,parseBodyFragment,"Document parseBodyFragment(String bodyHtml, String baseUri)",62,63,2159,2162,IdentifierMutator-Literal,true,this,3,0.07437724,<mask>,"Document parseBodyFragment(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri,<mask>);
        return parser.parse();
    }"
31,Parser.java,parseBodyFragment,"Document parseBodyFragment(String bodyHtml, String baseUri)",62,63,2159,2162,IdentifierMutator-Literal,true,options,4,0.017186925,<mask>,"Document parseBodyFragment(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri,<mask>);
        return parser.parse();
    }"
32,Parser.java,parseBodyFragment,"Document parseBodyFragment(String bodyHtml, String baseUri)",62,64,2188,2192,MethodCallMutator,parse,document,2,0.009637448,<mask>r.<mask>(),"Document parseBodyFragment(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        return parser.<mask>();
    }"
33,Parser.java,parseBodyFragment,"Document parseBodyFragment(String bodyHtml, String baseUri)",62,64,2188,2192,MethodCallMutator,parse,xml,3,0.005948262,<mask>r.<mask>(),"Document parseBodyFragment(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        return parser.<mask>();
    }"
34,Parser.java,parseBodyFragment,"Document parseBodyFragment(String bodyHtml, String baseUri)",62,64,2188,2192,MethodCallMutator,parse,parser,4,0.0054175765,<mask>r.<mask>(),"Document parseBodyFragment(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        return parser.<mask>();
    }"
35,Parser.java,parseBodyFragment,"Document parseBodyFragment(String bodyHtml, String baseUri)",62,64,2181,2186,IdentifierMutator-Variable,parser,reader,1,1.5016089E-5,<mask>,"Document parseBodyFragment(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        return<mask>.parse();
    }"
36,Parser.java,parseBodyFragment,"Document parseBodyFragment(String bodyHtml, String baseUri)",62,64,2181,2186,IdentifierMutator-Variable,parser,builder,3,9.709291E-6,<mask>,"Document parseBodyFragment(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        return<mask>.parse();
    }"
37,Parser.java,parseBodyFragment,"Document parseBodyFragment(String bodyHtml, String baseUri)",62,64,2181,2186,IdentifierMutator-Variable,parser,parsed,4,4.9618593E-6,<mask>,"Document parseBodyFragment(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        return<mask>.parse();
    }"
38,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,75,2745,2752,IdentifierMutator-Variable,bodyHtml,body,0,0.6137629,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(<mask>, baseUri, true);
        parser.relaxed = true;
        return parser.parse();
    }"
39,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,75,2745,2752,IdentifierMutator-Variable,bodyHtml,html,1,0.10738493,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(<mask>, baseUri, true);
        parser.relaxed = true;
        return parser.parse();
    }"
40,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,75,2745,2752,IdentifierMutator-Variable,bodyHtml,document,2,0.10281511,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(<mask>, baseUri, true);
        parser.relaxed = true;
        return parser.parse();
    }"
41,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,75,2745,2752,IdentifierMutator-Variable,bodyHtml,this,3,0.041994832,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(<mask>, baseUri, true);
        parser.relaxed = true;
        return parser.parse();
    }"
42,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,75,2745,2752,IdentifierMutator-Variable,bodyHtml,doc,4,0.017524526,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(<mask>, baseUri, true);
        parser.relaxed = true;
        return parser.parse();
    }"
43,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,75,2755,2761,IdentifierMutator-Variable,baseUri,true,0,0.38939804,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml,<mask>, true);
        parser.relaxed = true;
        return parser.parse();
    }"
44,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,75,2755,2761,IdentifierMutator-Variable,baseUri,null,1,0.20168516,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml,<mask>, true);
        parser.relaxed = true;
        return parser.parse();
    }"
45,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,75,2755,2761,IdentifierMutator-Variable,baseUri,false,2,0.16140786,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml,<mask>, true);
        parser.relaxed = true;
        return parser.parse();
    }"
46,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,75,2755,2761,IdentifierMutator-Variable,baseUri,"""""",3,0.08528282,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml,<mask>, true);
        parser.relaxed = true;
        return parser.parse();
    }"
47,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,75,2755,2761,IdentifierMutator-Variable,baseUri,0,4,0.024062075,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml,<mask>, true);
        parser.relaxed = true;
        return parser.parse();
    }"
48,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,75,2764,2767,IdentifierMutator-Literal,true,false,1,0.25344762,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri,<mask>);
        parser.relaxed = true;
        return parser.parse();
    }"
49,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,75,2764,2767,IdentifierMutator-Literal,true,null,2,0.1312505,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri,<mask>);
        parser.relaxed = true;
        return parser.parse();
    }"
50,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,75,2764,2767,IdentifierMutator-Literal,true,this,3,0.07309859,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri,<mask>);
        parser.relaxed = true;
        return parser.parse();
    }"
51,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,75,2764,2767,IdentifierMutator-Literal,true,0,4,0.017097121,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri,<mask>);
        parser.relaxed = true;
        return parser.parse();
    }"
52,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2793,2793,AssignmentMutator,parser.relaxed=true,!,0,0.1552297,parser.relaxed <mask>= true,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        parser.relaxed<mask>= true;
        return parser.parse();
    }"
53,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2793,2793,AssignmentMutator,parser.relaxed=true,*,1,0.059817284,parser.relaxed <mask>= true,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        parser.relaxed<mask>= true;
        return parser.parse();
    }"
54,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2793,2793,AssignmentMutator,parser.relaxed=true,&,2,0.059056938,parser.relaxed <mask>= true,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        parser.relaxed<mask>= true;
        return parser.parse();
    }"
55,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2793,2793,AssignmentMutator,parser.relaxed=true,<,3,0.054722127,parser.relaxed <mask>= true,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        parser.relaxed<mask>= true;
        return parser.parse();
    }"
56,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2793,2793,AssignmentMutator,parser.relaxed=true,||,4,0.045422517,parser.relaxed <mask>= true,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        parser.relaxed<mask>= true;
        return parser.parse();
    }"
57,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2779,2792,IdentifierMutator-Variable,parser.relaxed,parsed,0,0.47420675,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);<mask> = true;
        return parser.parse();
    }"
58,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2779,2792,IdentifierMutator-Variable,parser.relaxed,relaxed,1,0.10852656,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);<mask> = true;
        return parser.parse();
    }"
59,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2779,2792,IdentifierMutator-Variable,parser.relaxed,parsing,2,0.035656314,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);<mask> = true;
        return parser.parse();
    }"
60,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2779,2792,IdentifierMutator-Variable,parser.relaxed,extended,3,0.027920745,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);<mask> = true;
        return parser.parse();
    }"
61,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2779,2792,IdentifierMutator-Variable,parser.relaxed,rewritten,4,0.021710964,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);<mask> = true;
        return parser.parse();
    }"
62,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2779,2784,IdentifierMutator-Variable,parser,Parser,2,4.0503696E-4,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);<mask>.relaxed = true;
        return parser.parse();
    }"
63,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2779,2784,IdentifierMutator-Variable,parser,parsed,3,3.780512E-4,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);<mask>.relaxed = true;
        return parser.parse();
    }"
64,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2779,2784,IdentifierMutator-Variable,parser,this,4,3.4897125E-4,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);<mask>.relaxed = true;
        return parser.parse();
    }"
65,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2786,2792,FieldReferenceMutator,relaxed,relative,0,0.15474159,parser.<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        parser.<mask> = true;
        return parser.parse();
    }"
66,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2786,2792,FieldReferenceMutator,relaxed,fixed,1,0.03848639,parser.<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        parser.<mask> = true;
        return parser.parse();
    }"
67,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2786,2792,FieldReferenceMutator,relaxed,absolute,2,0.027122702,parser.<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        parser.<mask> = true;
        return parser.parse();
    }"
68,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2786,2792,FieldReferenceMutator,relaxed,escape,3,0.025682734,parser.<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        parser.<mask> = true;
        return parser.parse();
    }"
69,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2786,2792,FieldReferenceMutator,relaxed,broken,4,0.024572423,parser.<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        parser.<mask> = true;
        return parser.parse();
    }"
70,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2796,2799,IdentifierMutator-Literal,true,false,1,0.12174304,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        parser.relaxed =<mask>;
        return parser.parse();
    }"
71,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2796,2799,IdentifierMutator-Literal,true,1,2,0.0012407152,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        parser.relaxed =<mask>;
        return parser.parse();
    }"
72,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2796,2799,IdentifierMutator-Literal,true,null,3,0.0010993145,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        parser.relaxed =<mask>;
        return parser.parse();
    }"
73,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,76,2796,2799,IdentifierMutator-Literal,true,0,4,6.3465035E-4,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        parser.relaxed =<mask>;
        return parser.parse();
    }"
74,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,77,2824,2828,MethodCallMutator,parse,document,1,0.010265667,<mask>r.<mask>(),"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        parser.relaxed = true;
        return parser.<mask>();
    }"
75,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,77,2824,2828,MethodCallMutator,parse,render,2,0.004866141,<mask>r.<mask>(),"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        parser.relaxed = true;
        return parser.<mask>();
    }"
76,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,77,2824,2828,MethodCallMutator,parse,xml,3,0.0046973033,<mask>r.<mask>(),"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        parser.relaxed = true;
        return parser.<mask>();
    }"
77,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,77,2824,2828,MethodCallMutator,parse,get,4,0.0031265966,<mask>r.<mask>(),"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        parser.relaxed = true;
        return parser.<mask>();
    }"
78,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,77,2817,2822,IdentifierMutator-Variable,parser,reader,1,2.8578397E-5,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        parser.relaxed = true;
        return<mask>.parse();
    }"
79,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,77,2817,2822,IdentifierMutator-Variable,parser,builder,2,2.8533845E-5,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        parser.relaxed = true;
        return<mask>.parse();
    }"
80,Parser.java,parseBodyFragmentRelaxed,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri)",74,77,2817,2822,IdentifierMutator-Variable,parser,super,4,1.9670193E-5,<mask>,"Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
        Parser parser = new Parser(bodyHtml, baseUri, true);
        parser.relaxed = true;
        return<mask>.parse();
    }"
81,Parser.java,parse,Document parse(),80,81,2886,2886,UnaryOperatorMutator,!,...,2,0.0032325392,<mask>tq.isEmpty(),"Document parse() {
        while (<mask>tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
82,Parser.java,parse,Document parse(),80,81,2886,2886,UnaryOperatorMutator,!,?,3,0.0028262436,<mask>tq.isEmpty(),"Document parse() {
        while (<mask>tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
83,Parser.java,parse,Document parse(),80,81,2886,2886,UnaryOperatorMutator,!,!!,4,0.0027802626,<mask>tq.isEmpty(),"Document parse() {
        while (<mask>tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
84,Parser.java,parse,Document parse(),80,81,2890,2896,MethodCallMutator,isEmpty,empty,0,0.6215367,tq.<mask>(),"Document parse() {
        while (!tq.<mask>()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
85,Parser.java,parse,Document parse(),80,81,2890,2896,MethodCallMutator,isEmpty,space,1,0.0907435,tq.<mask>(),"Document parse() {
        while (!tq.<mask>()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
86,Parser.java,parse,Document parse(),80,81,2890,2896,MethodCallMutator,isEmpty,blank,2,0.06559888,tq.<mask>(),"Document parse() {
        while (!tq.<mask>()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
87,Parser.java,parse,Document parse(),80,81,2890,2896,MethodCallMutator,isEmpty,length,3,0.037383962,tq.<mask>(),"Document parse() {
        while (!tq.<mask>()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
88,Parser.java,parse,Document parse(),80,81,2890,2896,MethodCallMutator,isEmpty,complete,4,0.0148036685,tq.<mask>(),"Document parse() {
        while (!tq.<mask>()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
89,Parser.java,parse,Document parse(),80,81,2887,2888,IdentifierMutator-Variable,tq,doc,0,0.39509812,<mask>,"Document parse() {
        while (!<mask>.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
90,Parser.java,parse,Document parse(),80,81,2887,2888,IdentifierMutator-Variable,tq,q,1,0.04849713,<mask>,"Document parse() {
        while (!<mask>.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
91,Parser.java,parse,Document parse(),80,81,2887,2888,IdentifierMutator-Variable,tq,tree,2,0.047404427,<mask>,"Document parse() {
        while (!<mask>.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
92,Parser.java,parse,Document parse(),80,81,2887,2888,IdentifierMutator-Variable,tq,query,3,0.022336598,<mask>,"Document parse() {
        while (!<mask>.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
93,Parser.java,parse,Document parse(),80,81,2887,2888,IdentifierMutator-Variable,tq,docs,4,0.017120495,<mask>,"Document parse() {
        while (!<mask>.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
94,Parser.java,parse,Document parse(),80,81,2887,2888,FieldReferenceMutator,tq,doc,0,0.39509812,<mask>,"Document parse() {
        while (!<mask>.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
95,Parser.java,parse,Document parse(),80,81,2887,2888,FieldReferenceMutator,tq,q,1,0.04849713,<mask>,"Document parse() {
        while (!<mask>.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
96,Parser.java,parse,Document parse(),80,81,2887,2888,FieldReferenceMutator,tq,tree,2,0.047404427,<mask>,"Document parse() {
        while (!<mask>.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
97,Parser.java,parse,Document parse(),80,81,2887,2888,FieldReferenceMutator,tq,query,3,0.022336598,<mask>,"Document parse() {
        while (!<mask>.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
98,Parser.java,parse,Document parse(),80,81,2887,2888,FieldReferenceMutator,tq,docs,4,0.017120495,<mask>,"Document parse() {
        while (!<mask>.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
99,Parser.java,parse,Document parse(),80,82,2922,2928,MethodCallMutator,matches,match,0,0.8506478,"tq.<mask>(""<!--"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.<mask>(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
100,Parser.java,parse,Document parse(),80,82,2922,2928,MethodCallMutator,matches,is,1,0.048397664,"tq.<mask>(""<!--"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.<mask>(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
101,Parser.java,parse,Document parse(),80,82,2922,2928,MethodCallMutator,matches,mat,2,0.029312259,"tq.<mask>(""<!--"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.<mask>(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
102,Parser.java,parse,Document parse(),80,82,2922,2928,MethodCallMutator,matches,matched,3,0.02457371,"tq.<mask>(""<!--"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.<mask>(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
103,Parser.java,parse,Document parse(),80,82,2922,2928,MethodCallMutator,matches,has,4,0.00848084,"tq.<mask>(""<!--"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.<mask>(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
104,Parser.java,parse,Document parse(),80,82,2919,2920,IdentifierMutator-Variable,tq,tm,0,0.36015904,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (<mask>.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
105,Parser.java,parse,Document parse(),80,82,2919,2920,IdentifierMutator-Variable,tq,tc,1,0.07936249,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (<mask>.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
106,Parser.java,parse,Document parse(),80,82,2919,2920,IdentifierMutator-Variable,tq,tag,2,0.07235001,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (<mask>.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
107,Parser.java,parse,Document parse(),80,82,2919,2920,IdentifierMutator-Variable,tq,txt,3,0.06324024,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (<mask>.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
108,Parser.java,parse,Document parse(),80,82,2919,2920,IdentifierMutator-Variable,tq,qt,4,0.06048288,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (<mask>.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
109,Parser.java,parse,Document parse(),80,82,2919,2920,FieldReferenceMutator,tq,tm,0,0.36015904,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (<mask>.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
110,Parser.java,parse,Document parse(),80,82,2919,2920,FieldReferenceMutator,tq,tc,1,0.07936249,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (<mask>.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
111,Parser.java,parse,Document parse(),80,82,2919,2920,FieldReferenceMutator,tq,tag,2,0.07235001,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (<mask>.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
112,Parser.java,parse,Document parse(),80,82,2919,2920,FieldReferenceMutator,tq,txt,3,0.06324024,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (<mask>.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
113,Parser.java,parse,Document parse(),80,82,2919,2920,FieldReferenceMutator,tq,qt,4,0.06048288,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (<mask>.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
114,Parser.java,parse,Document parse(),80,82,2930,2935,IdentifierMutator-Literal,"""<!--""",//,0,0.29985553,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(<mask>)) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
115,Parser.java,parse,Document parse(),80,82,2930,2935,IdentifierMutator-Literal,"""<!--""",comment,1,0.17670046,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(<mask>)) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
116,Parser.java,parse,Document parse(),80,82,2930,2935,IdentifierMutator-Literal,"""<!--""",#,2,0.16935264,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(<mask>)) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
117,Parser.java,parse,Document parse(),80,82,2930,2935,IdentifierMutator-Literal,"""<!--""",<,3,0.026052311,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(<mask>)) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
118,Parser.java,parse,Document parse(),80,82,2930,2935,IdentifierMutator-Literal,"""<!--""",!--,4,0.02475302,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(<mask>)) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
119,Parser.java,parse,Document parse(),80,83,2957,2968,MethodCallMutator,parseComment,parse,0,0.6536182,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {<mask>();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
120,Parser.java,parse,Document parse(),80,83,2957,2968,MethodCallMutator,parseComment,close,1,0.023116801,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {<mask>();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
121,Parser.java,parse,Document parse(),80,83,2957,2968,MethodCallMutator,parseComment,parser,2,0.020634683,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {<mask>();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
122,Parser.java,parse,Document parse(),80,83,2957,2968,MethodCallMutator,parseComment,comment,3,0.016202943,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {<mask>();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
123,Parser.java,parse,Document parse(),80,83,2957,2968,MethodCallMutator,parseComment,print,4,0.013888525,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {<mask>();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
124,Parser.java,parse,Document parse(),80,84,2999,3005,MethodCallMutator,matches,match,0,0.94943184,"tq.<mask>(""<![CDATA["")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.<mask>(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
125,Parser.java,parse,Document parse(),80,84,2999,3005,MethodCallMutator,matches,matched,1,0.013463489,"tq.<mask>(""<![CDATA["")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.<mask>(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
126,Parser.java,parse,Document parse(),80,84,2999,3005,MethodCallMutator,matches,is,2,0.013029662,"tq.<mask>(""<![CDATA["")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.<mask>(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
127,Parser.java,parse,Document parse(),80,84,2999,3005,MethodCallMutator,matches,mat,3,0.009703401,"tq.<mask>(""<![CDATA["")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.<mask>(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
128,Parser.java,parse,Document parse(),80,84,2999,3005,MethodCallMutator,matches,has,4,0.0021158175,"tq.<mask>(""<![CDATA["")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.<mask>(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
129,Parser.java,parse,Document parse(),80,84,2996,2997,IdentifierMutator-Variable,tq,tm,0,0.38721812,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (<mask>.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
130,Parser.java,parse,Document parse(),80,84,2996,2997,IdentifierMutator-Variable,tq,tag,1,0.11820844,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (<mask>.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
131,Parser.java,parse,Document parse(),80,84,2996,2997,IdentifierMutator-Variable,tq,txt,2,0.0723744,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (<mask>.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
132,Parser.java,parse,Document parse(),80,84,2996,2997,IdentifierMutator-Variable,tq,tc,3,0.06280985,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (<mask>.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
133,Parser.java,parse,Document parse(),80,84,2996,2997,IdentifierMutator-Variable,tq,q,4,0.033159316,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (<mask>.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
134,Parser.java,parse,Document parse(),80,84,2996,2997,FieldReferenceMutator,tq,tm,0,0.38721812,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (<mask>.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
135,Parser.java,parse,Document parse(),80,84,2996,2997,FieldReferenceMutator,tq,tag,1,0.11820844,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (<mask>.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
136,Parser.java,parse,Document parse(),80,84,2996,2997,FieldReferenceMutator,tq,txt,2,0.0723744,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (<mask>.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
137,Parser.java,parse,Document parse(),80,84,2996,2997,FieldReferenceMutator,tq,tc,3,0.06280985,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (<mask>.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
138,Parser.java,parse,Document parse(),80,84,2996,2997,FieldReferenceMutator,tq,q,4,0.033159316,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (<mask>.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
139,Parser.java,parse,Document parse(),80,84,3007,3017,IdentifierMutator-Literal,"""<![CDATA[""",!--,0,0.15124065,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(<mask>)) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
140,Parser.java,parse,Document parse(),80,84,3007,3017,IdentifierMutator-Literal,"""<![CDATA[""",//,1,0.07204585,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(<mask>)) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
141,Parser.java,parse,Document parse(),80,84,3007,3017,IdentifierMutator-Literal,"""<![CDATA[""",data,2,0.068018906,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(<mask>)) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
142,Parser.java,parse,Document parse(),80,84,3007,3017,IdentifierMutator-Literal,"""<![CDATA[""",<,3,0.0463969,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(<mask>)) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
143,Parser.java,parse,Document parse(),80,84,3007,3017,IdentifierMutator-Literal,"""<![CDATA[""",-->,4,0.039847534,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(<mask>)) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
144,Parser.java,parse,Document parse(),80,85,3039,3048,MethodCallMutator,parseCdata,parse,0,0.63911843,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {<mask>();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
145,Parser.java,parse,Document parse(),80,85,3039,3048,MethodCallMutator,parseCdata,close,1,0.023641508,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {<mask>();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
146,Parser.java,parse,Document parse(),80,85,3039,3048,MethodCallMutator,parseCdata,comment,2,0.019176852,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {<mask>();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
147,Parser.java,parse,Document parse(),80,85,3039,3048,MethodCallMutator,parseCdata,print,3,0.014361718,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {<mask>();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
148,Parser.java,parse,Document parse(),80,85,3039,3048,MethodCallMutator,parseCdata,parser,4,0.013883157,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {<mask>();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
149,Parser.java,parse,Document parse(),80,86,3092,3095,BinaryOperatorMutator,||,|,1,0.07182271,"tq.matches(""<?"") <mask> tq.matches(""<!"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"")<mask>tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
150,Parser.java,parse,Document parse(),80,86,3092,3095,BinaryOperatorMutator,||,&&,3,0.01799502,"tq.matches(""<?"") <mask> tq.matches(""<!"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"")<mask>tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
151,Parser.java,parse,Document parse(),80,86,3092,3095,BinaryOperatorMutator,||,&&,4,0.008657637,"tq.matches(""<?"") <mask> tq.matches(""<!"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"")<mask>tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
152,Parser.java,parse,Document parse(),80,86,3079,3085,MethodCallMutator,matches,match,0,0.66564703,"tq.<mask>(""<?"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.<mask>(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
153,Parser.java,parse,Document parse(),80,86,3079,3085,MethodCallMutator,matches,is,1,0.10233839,"tq.<mask>(""<?"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.<mask>(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
154,Parser.java,parse,Document parse(),80,86,3079,3085,MethodCallMutator,matches,matched,2,0.043559194,"tq.<mask>(""<?"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.<mask>(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
155,Parser.java,parse,Document parse(),80,86,3079,3085,MethodCallMutator,matches,mat,3,0.043076765,"tq.<mask>(""<?"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.<mask>(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
156,Parser.java,parse,Document parse(),80,86,3079,3085,MethodCallMutator,matches,has,4,0.027084254,"tq.<mask>(""<?"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.<mask>(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
157,Parser.java,parse,Document parse(),80,86,3076,3077,IdentifierMutator-Variable,tq,tm,0,0.24941558,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (<mask>.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
158,Parser.java,parse,Document parse(),80,86,3076,3077,IdentifierMutator-Variable,tq,tc,1,0.18124217,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (<mask>.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
159,Parser.java,parse,Document parse(),80,86,3076,3077,IdentifierMutator-Variable,tq,tk,2,0.07512978,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (<mask>.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
160,Parser.java,parse,Document parse(),80,86,3076,3077,IdentifierMutator-Variable,tq,txt,3,0.060390353,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (<mask>.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
161,Parser.java,parse,Document parse(),80,86,3076,3077,IdentifierMutator-Variable,tq,tf,4,0.059453405,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (<mask>.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
162,Parser.java,parse,Document parse(),80,86,3076,3077,FieldReferenceMutator,tq,tm,0,0.24941558,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (<mask>.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
163,Parser.java,parse,Document parse(),80,86,3076,3077,FieldReferenceMutator,tq,tc,1,0.18124217,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (<mask>.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
164,Parser.java,parse,Document parse(),80,86,3076,3077,FieldReferenceMutator,tq,tk,2,0.07512978,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (<mask>.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
165,Parser.java,parse,Document parse(),80,86,3076,3077,FieldReferenceMutator,tq,txt,3,0.060390353,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (<mask>.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
166,Parser.java,parse,Document parse(),80,86,3076,3077,FieldReferenceMutator,tq,tf,4,0.059453405,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (<mask>.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
167,Parser.java,parse,Document parse(),80,86,3087,3090,IdentifierMutator-Literal,"""<?""",<,0,0.281856,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(<mask>) || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
168,Parser.java,parse,Document parse(),80,86,3087,3090,IdentifierMutator-Literal,"""<?""",xml,1,0.08167562,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(<mask>) || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
169,Parser.java,parse,Document parse(),80,86,3087,3090,IdentifierMutator-Literal,"""<?""",>,2,0.07629438,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(<mask>) || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
170,Parser.java,parse,Document parse(),80,86,3087,3090,IdentifierMutator-Literal,"""<?""",-->,3,0.049044106,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(<mask>) || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
171,Parser.java,parse,Document parse(),80,86,3087,3090,IdentifierMutator-Literal,"""<?""",</,4,0.048304982,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(<mask>) || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
172,Parser.java,parse,Document parse(),80,86,3099,3105,MethodCallMutator,matches,match,0,0.60768473,"tq.<mask>(""<!"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.<mask>(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
173,Parser.java,parse,Document parse(),80,86,3099,3105,MethodCallMutator,matches,is,1,0.094373286,"tq.<mask>(""<!"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.<mask>(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
174,Parser.java,parse,Document parse(),80,86,3099,3105,MethodCallMutator,matches,mat,2,0.076489985,"tq.<mask>(""<!"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.<mask>(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
175,Parser.java,parse,Document parse(),80,86,3099,3105,MethodCallMutator,matches,matched,3,0.031188035,"tq.<mask>(""<!"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.<mask>(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
176,Parser.java,parse,Document parse(),80,86,3099,3105,MethodCallMutator,matches,has,4,0.02936424,"tq.<mask>(""<!"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.<mask>(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
177,Parser.java,parse,Document parse(),80,86,3096,3097,IdentifierMutator-Variable,tq,q,0,0.17234997,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") ||<mask>.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
178,Parser.java,parse,Document parse(),80,86,3096,3097,IdentifierMutator-Variable,tq,tag,1,0.07325726,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") ||<mask>.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
179,Parser.java,parse,Document parse(),80,86,3096,3097,IdentifierMutator-Variable,tq,token,2,0.069742955,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") ||<mask>.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
180,Parser.java,parse,Document parse(),80,86,3096,3097,IdentifierMutator-Variable,tq,sq,3,0.068638116,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") ||<mask>.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
181,Parser.java,parse,Document parse(),80,86,3096,3097,IdentifierMutator-Variable,tq,query,4,0.03589717,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") ||<mask>.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
182,Parser.java,parse,Document parse(),80,86,3096,3097,FieldReferenceMutator,tq,q,0,0.17234997,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") ||<mask>.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
183,Parser.java,parse,Document parse(),80,86,3096,3097,FieldReferenceMutator,tq,tag,1,0.07325726,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") ||<mask>.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
184,Parser.java,parse,Document parse(),80,86,3096,3097,FieldReferenceMutator,tq,token,2,0.069742955,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") ||<mask>.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
185,Parser.java,parse,Document parse(),80,86,3096,3097,FieldReferenceMutator,tq,sq,3,0.068638116,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") ||<mask>.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
186,Parser.java,parse,Document parse(),80,86,3096,3097,FieldReferenceMutator,tq,query,4,0.03589717,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") ||<mask>.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
187,Parser.java,parse,Document parse(),80,86,3107,3110,IdentifierMutator-Literal,"""<!""",<,0,0.13342965,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(<mask>)) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
188,Parser.java,parse,Document parse(),80,86,3107,3110,IdentifierMutator-Literal,"""<!""",""">",1,0.11077626,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(<mask>)) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
189,Parser.java,parse,Document parse(),80,86,3107,3110,IdentifierMutator-Literal,"""<!""",>,2,0.108288586,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(<mask>)) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
190,Parser.java,parse,Document parse(),80,86,3107,3110,IdentifierMutator-Literal,"""<!""",</,3,0.07047623,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(<mask>)) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
191,Parser.java,parse,Document parse(),80,86,3107,3110,IdentifierMutator-Literal,"""<!""",xml,4,0.051769286,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(<mask>)) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
192,Parser.java,parse,Document parse(),80,87,3132,3143,MethodCallMutator,parseXmlDecl,parse,0,0.7892353,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {<mask>();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
193,Parser.java,parse,Document parse(),80,87,3132,3143,MethodCallMutator,parseXmlDecl,close,1,0.012618717,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {<mask>();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
194,Parser.java,parse,Document parse(),80,87,3132,3143,MethodCallMutator,parseXmlDecl,parser,2,0.009122719,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {<mask>();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
195,Parser.java,parse,Document parse(),80,87,3132,3143,MethodCallMutator,parseXmlDecl,print,3,0.0061440794,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {<mask>();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
196,Parser.java,parse,Document parse(),80,87,3132,3143,MethodCallMutator,parseXmlDecl,parse,4,0.006060026,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {<mask>();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
197,Parser.java,parse,Document parse(),80,88,3174,3180,MethodCallMutator,matches,match,0,0.49605727,"tq.<mask>(""</"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.<mask>(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
198,Parser.java,parse,Document parse(),80,88,3174,3180,MethodCallMutator,matches,mat,1,0.19046119,"tq.<mask>(""</"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.<mask>(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
199,Parser.java,parse,Document parse(),80,88,3174,3180,MethodCallMutator,matches,is,2,0.14686097,"tq.<mask>(""</"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.<mask>(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
200,Parser.java,parse,Document parse(),80,88,3174,3180,MethodCallMutator,matches,has,3,0.046599444,"tq.<mask>(""</"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.<mask>(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
201,Parser.java,parse,Document parse(),80,88,3174,3180,MethodCallMutator,matches,matched,4,0.043110266,"tq.<mask>(""</"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.<mask>(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
202,Parser.java,parse,Document parse(),80,88,3171,3172,IdentifierMutator-Variable,tq,tm,0,0.18721321,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (<mask>.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
203,Parser.java,parse,Document parse(),80,88,3171,3172,IdentifierMutator-Variable,tq,tc,1,0.14827761,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (<mask>.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
204,Parser.java,parse,Document parse(),80,88,3171,3172,IdentifierMutator-Variable,tq,tag,2,0.101379566,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (<mask>.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
205,Parser.java,parse,Document parse(),80,88,3171,3172,IdentifierMutator-Variable,tq,txt,3,0.0637981,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (<mask>.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
206,Parser.java,parse,Document parse(),80,88,3171,3172,IdentifierMutator-Variable,tq,tk,4,0.059887294,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (<mask>.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
207,Parser.java,parse,Document parse(),80,88,3171,3172,FieldReferenceMutator,tq,tm,0,0.18721321,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (<mask>.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
208,Parser.java,parse,Document parse(),80,88,3171,3172,FieldReferenceMutator,tq,tc,1,0.14827761,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (<mask>.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
209,Parser.java,parse,Document parse(),80,88,3171,3172,FieldReferenceMutator,tq,tag,2,0.101379566,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (<mask>.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
210,Parser.java,parse,Document parse(),80,88,3171,3172,FieldReferenceMutator,tq,txt,3,0.0637981,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (<mask>.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
211,Parser.java,parse,Document parse(),80,88,3171,3172,FieldReferenceMutator,tq,tk,4,0.059887294,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (<mask>.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
212,Parser.java,parse,Document parse(),80,88,3182,3185,IdentifierMutator-Literal,"""</""",>,0,0.2900907,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(<mask>)) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
213,Parser.java,parse,Document parse(),80,88,3182,3185,IdentifierMutator-Literal,"""</""",""">",1,0.1566442,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(<mask>)) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
214,Parser.java,parse,Document parse(),80,88,3182,3185,IdentifierMutator-Literal,"""</""",</,2,0.11487362,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(<mask>)) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
215,Parser.java,parse,Document parse(),80,88,3182,3185,IdentifierMutator-Literal,"""</""",/>,3,0.07311909,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(<mask>)) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
216,Parser.java,parse,Document parse(),80,88,3182,3185,IdentifierMutator-Literal,"""</""",-->,4,0.06601263,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(<mask>)) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
217,Parser.java,parse,Document parse(),80,89,3207,3217,MethodCallMutator,parseEndTag,parse,0,0.62645555,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {<mask>();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
218,Parser.java,parse,Document parse(),80,89,3207,3217,MethodCallMutator,parseEndTag,close,1,0.055612337,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {<mask>();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
219,Parser.java,parse,Document parse(),80,89,3207,3217,MethodCallMutator,parseEndTag,print,2,0.0119144255,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {<mask>();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
220,Parser.java,parse,Document parse(),80,89,3207,3217,MethodCallMutator,parseEndTag,parser,3,0.011832772,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {<mask>();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
221,Parser.java,parse,Document parse(),80,89,3207,3217,MethodCallMutator,parseEndTag,indent,4,0.008917452,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {<mask>();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
222,Parser.java,parse,Document parse(),80,90,3248,3254,MethodCallMutator,matches,is,0,0.22655587,"tq.<mask>(""<"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.<mask>(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
223,Parser.java,parse,Document parse(),80,90,3248,3254,MethodCallMutator,matches,match,1,0.21462238,"tq.<mask>(""<"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.<mask>(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
224,Parser.java,parse,Document parse(),80,90,3248,3254,MethodCallMutator,matches,matched,2,0.12507118,"tq.<mask>(""<"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.<mask>(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
225,Parser.java,parse,Document parse(),80,90,3248,3254,MethodCallMutator,matches,has,3,0.11531903,"tq.<mask>(""<"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.<mask>(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
226,Parser.java,parse,Document parse(),80,90,3248,3254,MethodCallMutator,matches,mat,4,0.041654963,"tq.<mask>(""<"")","Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.<mask>(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
227,Parser.java,parse,Document parse(),80,90,3245,3246,IdentifierMutator-Variable,tq,tm,0,0.27402315,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (<mask>.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
228,Parser.java,parse,Document parse(),80,90,3245,3246,IdentifierMutator-Variable,tq,tc,1,0.19166493,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (<mask>.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
229,Parser.java,parse,Document parse(),80,90,3245,3246,IdentifierMutator-Variable,tq,tk,2,0.08827436,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (<mask>.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
230,Parser.java,parse,Document parse(),80,90,3245,3246,IdentifierMutator-Variable,tq,txt,3,0.045396086,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (<mask>.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
231,Parser.java,parse,Document parse(),80,90,3245,3246,IdentifierMutator-Variable,tq,tn,4,0.04493975,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (<mask>.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
232,Parser.java,parse,Document parse(),80,90,3245,3246,FieldReferenceMutator,tq,tm,0,0.27402315,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (<mask>.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
233,Parser.java,parse,Document parse(),80,90,3245,3246,FieldReferenceMutator,tq,tc,1,0.19166493,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (<mask>.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
234,Parser.java,parse,Document parse(),80,90,3245,3246,FieldReferenceMutator,tq,tk,2,0.08827436,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (<mask>.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
235,Parser.java,parse,Document parse(),80,90,3245,3246,FieldReferenceMutator,tq,txt,3,0.045396086,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (<mask>.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
236,Parser.java,parse,Document parse(),80,90,3245,3246,FieldReferenceMutator,tq,tn,4,0.04493975,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (<mask>.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
237,Parser.java,parse,Document parse(),80,90,3256,3258,IdentifierMutator-Literal,"""<""",>,0,0.26337928,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(<mask>)) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
238,Parser.java,parse,Document parse(),80,90,3256,3258,IdentifierMutator-Literal,"""<""",<,1,0.23219168,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(<mask>)) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
239,Parser.java,parse,Document parse(),80,90,3256,3258,IdentifierMutator-Literal,"""<""",-->,2,0.0605349,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(<mask>)) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
240,Parser.java,parse,Document parse(),80,90,3256,3258,IdentifierMutator-Literal,"""<""",//,3,0.05311072,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(<mask>)) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
241,Parser.java,parse,Document parse(),80,90,3256,3258,IdentifierMutator-Literal,"""<""",/,4,0.029331421,<mask>,"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(<mask>)) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
242,Parser.java,parse,Document parse(),80,91,3280,3292,MethodCallMutator,parseStartTag,parse,0,0.68036294,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {<mask>();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
243,Parser.java,parse,Document parse(),80,91,3280,3292,MethodCallMutator,parseStartTag,close,1,0.039949793,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {<mask>();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
244,Parser.java,parse,Document parse(),80,91,3280,3292,MethodCallMutator,parseStartTag,parser,2,0.018084226,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {<mask>();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
245,Parser.java,parse,Document parse(),80,91,3280,3292,MethodCallMutator,parseStartTag,print,3,0.014527148,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {<mask>();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
246,Parser.java,parse,Document parse(),80,91,3280,3292,MethodCallMutator,parseStartTag,indent,4,0.007563464,<mask>(),"Document parse() {
        while (!tq.isEmpty()) {
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {<mask>();
            } else {
                parseTextNode();
            }
        }
        return doc.normalise();
    }"
247,Parser.java,parse,Document parse(),80,93,3334,3346,MethodCallMutator,parseTextNode,parse,0,0.101325795,<mask>(),"
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {<mask>();
            }
        }
        return doc.normalise();
    }"
248,Parser.java,parse,Document parse(),80,93,3334,3346,MethodCallMutator,parseTextNode,next,1,0.046612952,<mask>(),"
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {<mask>();
            }
        }
        return doc.normalise();
    }"
249,Parser.java,parse,Document parse(),80,93,3334,3346,MethodCallMutator,parseTextNode,break,2,0.035588853,<mask>(),"
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {<mask>();
            }
        }
        return doc.normalise();
    }"
250,Parser.java,parse,Document parse(),80,93,3334,3346,MethodCallMutator,parseTextNode,indent,3,0.034094926,<mask>(),"
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {<mask>();
            }
        }
        return doc.normalise();
    }"
251,Parser.java,parse,Document parse(),80,93,3334,3346,MethodCallMutator,parseTextNode,close,4,0.03230858,<mask>(),"
            if (tq.matches(""<!--"")) {
                parseComment();
            } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {<mask>();
            }
        }
        return doc.normalise();
    }"
252,Parser.java,parse,Document parse(),80,96,3394,3402,MethodCallMutator,normalise,close,0,0.28548756,doc.<mask>(),"   } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.<mask>();
    }"
253,Parser.java,parse,Document parse(),80,96,3394,3402,MethodCallMutator,normalise,html,1,0.14611734,doc.<mask>(),"   } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.<mask>();
    }"
254,Parser.java,parse,Document parse(),80,96,3394,3402,MethodCallMutator,normalise,parse,2,0.05774698,doc.<mask>(),"   } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.<mask>();
    }"
255,Parser.java,parse,Document parse(),80,96,3394,3402,MethodCallMutator,normalise,text,3,0.019335108,doc.<mask>(),"   } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.<mask>();
    }"
256,Parser.java,parse,Document parse(),80,96,3394,3402,MethodCallMutator,normalise,end,4,0.018074248,doc.<mask>(),"   } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return doc.<mask>();
    }"
257,Parser.java,parse,Document parse(),80,96,3390,3392,IdentifierMutator-Variable,doc,this,0,0.19363837,<mask>,"     } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return<mask>.normalise();
    }"
258,Parser.java,parse,Document parse(),80,96,3390,3392,IdentifierMutator-Variable,doc,self,1,0.06760141,<mask>,"     } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return<mask>.normalise();
    }"
259,Parser.java,parse,Document parse(),80,96,3390,3392,IdentifierMutator-Variable,doc,tree,2,0.059188984,<mask>,"     } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return<mask>.normalise();
    }"
260,Parser.java,parse,Document parse(),80,96,3390,3392,IdentifierMutator-Variable,doc,ret,3,0.04683471,<mask>,"     } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return<mask>.normalise();
    }"
261,Parser.java,parse,Document parse(),80,96,3390,3392,IdentifierMutator-Variable,doc,result,4,0.046324264,<mask>,"     } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return<mask>.normalise();
    }"
262,Parser.java,parse,Document parse(),80,96,3390,3392,FieldReferenceMutator,doc,this,0,0.19363837,<mask>,"     } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return<mask>.normalise();
    }"
263,Parser.java,parse,Document parse(),80,96,3390,3392,FieldReferenceMutator,doc,self,1,0.06760141,<mask>,"     } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return<mask>.normalise();
    }"
264,Parser.java,parse,Document parse(),80,96,3390,3392,FieldReferenceMutator,doc,tree,2,0.059188984,<mask>,"     } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return<mask>.normalise();
    }"
265,Parser.java,parse,Document parse(),80,96,3390,3392,FieldReferenceMutator,doc,ret,3,0.04683471,<mask>,"     } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return<mask>.normalise();
    }"
266,Parser.java,parse,Document parse(),80,96,3390,3392,FieldReferenceMutator,doc,result,4,0.046324264,<mask>,"     } else if (tq.matches(""<![CDATA["")) {
                parseCdata();
            } else if (tq.matches(""<?"") || tq.matches(""<!"")) {
                parseXmlDecl();
            } else if (tq.matches(""</"")) {
                parseEndTag();
            } else if (tq.matches(""<"")) {
                parseStartTag();
            } else {
                parseTextNode();
            }
        }
        return<mask>.normalise();
    }"
267,Parser.java,parseComment,void parseComment(),99,100,3459,3465,MethodCallMutator,consume,append,0,0.7721249,"tq.<mask>(""<!--"")","void parseComment() {
        tq.<mask>(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
268,Parser.java,parseComment,void parseComment(),99,100,3459,3465,MethodCallMutator,consume,push,1,0.053698972,"tq.<mask>(""<!--"")","void parseComment() {
        tq.<mask>(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
269,Parser.java,parseComment,void parseComment(),99,100,3459,3465,MethodCallMutator,consume,remove,2,0.04517907,"tq.<mask>(""<!--"")","void parseComment() {
        tq.<mask>(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
270,Parser.java,parseComment,void parseComment(),99,100,3459,3465,MethodCallMutator,consume,delete,3,0.02261362,"tq.<mask>(""<!--"")","void parseComment() {
        tq.<mask>(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
271,Parser.java,parseComment,void parseComment(),99,100,3459,3465,MethodCallMutator,consume,split,4,0.012454388,"tq.<mask>(""<!--"")","void parseComment() {
        tq.<mask>(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
272,Parser.java,parseComment,void parseComment(),99,100,3456,3457,IdentifierMutator-Variable,tq,parser,0,0.3442933,<mask>,"void parseComment() {<mask>.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
273,Parser.java,parseComment,void parseComment(),99,100,3456,3457,IdentifierMutator-Variable,tq,stream,1,0.15962505,<mask>,"void parseComment() {<mask>.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
274,Parser.java,parseComment,void parseComment(),99,100,3456,3457,IdentifierMutator-Variable,tq,reader,2,0.13126718,<mask>,"void parseComment() {<mask>.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
275,Parser.java,parseComment,void parseComment(),99,100,3456,3457,IdentifierMutator-Variable,tq,input,3,0.037305117,<mask>,"void parseComment() {<mask>.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
276,Parser.java,parseComment,void parseComment(),99,100,3456,3457,IdentifierMutator-Variable,tq,this,4,0.021700611,<mask>,"void parseComment() {<mask>.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
277,Parser.java,parseComment,void parseComment(),99,100,3456,3457,FieldReferenceMutator,tq,parser,0,0.3442933,<mask>,"void parseComment() {<mask>.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
278,Parser.java,parseComment,void parseComment(),99,100,3456,3457,FieldReferenceMutator,tq,stream,1,0.15962505,<mask>,"void parseComment() {<mask>.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
279,Parser.java,parseComment,void parseComment(),99,100,3456,3457,FieldReferenceMutator,tq,reader,2,0.13126718,<mask>,"void parseComment() {<mask>.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
280,Parser.java,parseComment,void parseComment(),99,100,3456,3457,FieldReferenceMutator,tq,input,3,0.037305117,<mask>,"void parseComment() {<mask>.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
281,Parser.java,parseComment,void parseComment(),99,100,3456,3457,FieldReferenceMutator,tq,this,4,0.021700611,<mask>,"void parseComment() {<mask>.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
282,Parser.java,parseComment,void parseComment(),99,100,3467,3472,IdentifierMutator-Literal,"""<!--""",1,0,0.37424138,<mask>,"void parseComment() {
        tq.consume(<mask>);
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
283,Parser.java,parseComment,void parseComment(),99,100,3467,3472,IdentifierMutator-Literal,"""<!--""",2,1,0.1004048,<mask>,"void parseComment() {
        tq.consume(<mask>);
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
284,Parser.java,parseComment,void parseComment(),99,100,3467,3472,IdentifierMutator-Literal,"""<!--""",true,2,0.0340952,<mask>,"void parseComment() {
        tq.consume(<mask>);
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
285,Parser.java,parseComment,void parseComment(),99,100,3467,3472,IdentifierMutator-Literal,"""<!--""",8,3,0.030969517,<mask>,"void parseComment() {
        tq.consume(<mask>);
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
286,Parser.java,parseComment,void parseComment(),99,100,3467,3472,IdentifierMutator-Literal,"""<!--""",4,4,0.024943916,<mask>,"void parseComment() {
        tq.consume(<mask>);
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
287,Parser.java,parseComment,void parseComment(),99,101,3501,3507,MethodCallMutator,chompTo,parse,0,0.15345813,"tq.<mask>(""->"")","void parseComment() {
        tq.consume(""<!--"");
        String data = tq.<mask>(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
288,Parser.java,parseComment,void parseComment(),99,101,3501,3507,MethodCallMutator,chompTo,token,1,0.14847481,"tq.<mask>(""->"")","void parseComment() {
        tq.consume(""<!--"");
        String data = tq.<mask>(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
289,Parser.java,parseComment,void parseComment(),99,101,3501,3507,MethodCallMutator,chompTo,next,2,0.07668543,"tq.<mask>(""->"")","void parseComment() {
        tq.consume(""<!--"");
        String data = tq.<mask>(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
290,Parser.java,parseComment,void parseComment(),99,101,3501,3507,MethodCallMutator,chompTo,until,3,0.05357459,"tq.<mask>(""->"")","void parseComment() {
        tq.consume(""<!--"");
        String data = tq.<mask>(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
291,Parser.java,parseComment,void parseComment(),99,101,3501,3507,MethodCallMutator,chompTo,string,4,0.04644832,"tq.<mask>(""->"")","void parseComment() {
        tq.consume(""<!--"");
        String data = tq.<mask>(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
292,Parser.java,parseComment,void parseComment(),99,101,3498,3499,IdentifierMutator-Variable,tq,comment,0,0.36406344,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data =<mask>.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
293,Parser.java,parseComment,void parseComment(),99,101,3498,3499,IdentifierMutator-Variable,tq,text,1,0.06762537,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data =<mask>.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
294,Parser.java,parseComment,void parseComment(),99,101,3498,3499,IdentifierMutator-Variable,tq,line,2,0.06684115,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data =<mask>.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
295,Parser.java,parseComment,void parseComment(),99,101,3498,3499,IdentifierMutator-Variable,tq,content,3,0.049460404,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data =<mask>.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
296,Parser.java,parseComment,void parseComment(),99,101,3498,3499,IdentifierMutator-Variable,tq,data,4,0.028182818,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data =<mask>.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
297,Parser.java,parseComment,void parseComment(),99,101,3498,3499,FieldReferenceMutator,tq,comment,0,0.36406344,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data =<mask>.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
298,Parser.java,parseComment,void parseComment(),99,101,3498,3499,FieldReferenceMutator,tq,text,1,0.06762537,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data =<mask>.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
299,Parser.java,parseComment,void parseComment(),99,101,3498,3499,FieldReferenceMutator,tq,line,2,0.06684115,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data =<mask>.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
300,Parser.java,parseComment,void parseComment(),99,101,3498,3499,FieldReferenceMutator,tq,content,3,0.049460404,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data =<mask>.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
301,Parser.java,parseComment,void parseComment(),99,101,3498,3499,FieldReferenceMutator,tq,data,4,0.028182818,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data =<mask>.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
302,Parser.java,parseComment,void parseComment(),99,101,3509,3512,IdentifierMutator-Literal,"""->""",comment,0,0.12496928,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(<mask>);

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
303,Parser.java,parseComment,void parseComment(),99,101,3509,3512,IdentifierMutator-Literal,"""->""","''",1,0.12030288,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(<mask>);

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
304,Parser.java,parseComment,void parseComment(),99,101,3509,3512,IdentifierMutator-Literal,"""->""",""":""",2,0.047293056,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(<mask>);

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
305,Parser.java,parseComment,void parseComment(),99,101,3509,3512,IdentifierMutator-Literal,"""->""",""",""",3,0.036059868,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(<mask>);

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
306,Parser.java,parseComment,void parseComment(),99,101,3509,3512,IdentifierMutator-Literal,"""->""",string,4,0.035846222,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(<mask>);

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
307,Parser.java,parseComment,void parseComment(),99,103,3534,3541,MethodCallMutator,endsWith,has,0,0.2891158,"data.<mask>(""-"")","void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.<mask>(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
308,Parser.java,parseComment,void parseComment(),99,103,3534,3541,MethodCallMutator,endsWith,split,1,0.19799568,"data.<mask>(""-"")","void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.<mask>(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
309,Parser.java,parseComment,void parseComment(),99,103,3534,3541,MethodCallMutator,endsWith,remove,2,0.1397838,"data.<mask>(""-"")","void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.<mask>(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
310,Parser.java,parseComment,void parseComment(),99,103,3534,3541,MethodCallMutator,endsWith,is,3,0.0806646,"data.<mask>(""-"")","void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.<mask>(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
311,Parser.java,parseComment,void parseComment(),99,103,3534,3541,MethodCallMutator,endsWith,append,4,0.047245763,"data.<mask>(""-"")","void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.<mask>(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
312,Parser.java,parseComment,void parseComment(),99,103,3529,3532,IdentifierMutator-Variable,data,Data,2,1.3304298E-4,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (<mask>.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
313,Parser.java,parseComment,void parseComment(),99,103,3529,3532,IdentifierMutator-Variable,data,string,3,5.0929404E-5,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (<mask>.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
314,Parser.java,parseComment,void parseComment(),99,103,3529,3532,IdentifierMutator-Variable,data,DATA,4,4.3444397E-5,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (<mask>.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
315,Parser.java,parseComment,void parseComment(),99,103,3543,3545,IdentifierMutator-Literal,"""-""",-->,0,0.6762699,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(<mask>)) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
316,Parser.java,parseComment,void parseComment(),99,103,3543,3545,IdentifierMutator-Literal,"""-""",!--,1,0.079119734,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(<mask>)) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
317,Parser.java,parseComment,void parseComment(),99,103,3543,3545,IdentifierMutator-Literal,"""-""",->,2,0.041462794,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(<mask>)) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
318,Parser.java,parseComment,void parseComment(),99,103,3543,3545,IdentifierMutator-Literal,"""-""",comment,3,0.025908427,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(<mask>)) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
319,Parser.java,parseComment,void parseComment(),99,103,3543,3545,IdentifierMutator-Literal,"""-""","''",4,0.020593647,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(<mask>)) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
320,Parser.java,parseComment,void parseComment(),99,104,3581,3581,AssignmentMutator,"data=data.substring(0,data.length()-1)",|,0,0.19154207,"data <mask>= data.substring(0, data.length() - 1)","void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data<mask>= data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
321,Parser.java,parseComment,void parseComment(),99,104,3581,3581,AssignmentMutator,"data=data.substring(0,data.length()-1)",^,1,0.117298335,"data <mask>= data.substring(0, data.length() - 1)","void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data<mask>= data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
322,Parser.java,parseComment,void parseComment(),99,104,3581,3581,AssignmentMutator,"data=data.substring(0,data.length()-1)",||,2,0.11257021,"data <mask>= data.substring(0, data.length() - 1)","void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data<mask>= data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
323,Parser.java,parseComment,void parseComment(),99,104,3581,3581,AssignmentMutator,"data=data.substring(0,data.length()-1)",/,3,0.07136453,"data <mask>= data.substring(0, data.length() - 1)","void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data<mask>= data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
324,Parser.java,parseComment,void parseComment(),99,104,3581,3581,AssignmentMutator,"data=data.substring(0,data.length()-1)",*,4,0.06064755,"data <mask>= data.substring(0, data.length() - 1)","void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data<mask>= data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
325,Parser.java,parseComment,void parseComment(),99,104,3577,3580,IdentifierMutator-Variable,data,Data,2,0.0010606387,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was --><mask> = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
326,Parser.java,parseComment,void parseComment(),99,104,3577,3580,IdentifierMutator-Variable,data,Data,3,8.9948997E-4,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was --><mask> = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
327,Parser.java,parseComment,void parseComment(),99,104,3577,3580,IdentifierMutator-Variable,data,text,4,1.7607589E-4,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was --><mask> = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
328,Parser.java,parseComment,void parseComment(),99,104,3589,3597,MethodCallMutator,substring,slice,0,0.32214445,"data.<mask>(0, data.length() - 1)","void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.<mask>(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
329,Parser.java,parseComment,void parseComment(),99,104,3589,3597,MethodCallMutator,substring,replace,1,0.28018945,"data.<mask>(0, data.length() - 1)","void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.<mask>(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
330,Parser.java,parseComment,void parseComment(),99,104,3589,3597,MethodCallMutator,substring,ring,2,0.12426149,"data.<mask>(0, data.length() - 1)","void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.<mask>(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
331,Parser.java,parseComment,void parseComment(),99,104,3589,3597,MethodCallMutator,substring,fill,3,0.10233722,"data.<mask>(0, data.length() - 1)","void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.<mask>(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
332,Parser.java,parseComment,void parseComment(),99,104,3589,3597,MethodCallMutator,substring,delete,4,0.021790847,"data.<mask>(0, data.length() - 1)","void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.<mask>(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
333,Parser.java,parseComment,void parseComment(),99,104,3584,3587,IdentifierMutator-Variable,data,text,2,4.3393188E-4,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data =<mask>.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
334,Parser.java,parseComment,void parseComment(),99,104,3584,3587,IdentifierMutator-Variable,data,pattern,3,1.5474414E-4,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data =<mask>.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
335,Parser.java,parseComment,void parseComment(),99,104,3584,3587,IdentifierMutator-Variable,data,string,4,1.2965275E-4,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data =<mask>.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
336,Parser.java,parseComment,void parseComment(),99,104,3599,3599,IdentifierMutator-Literal,0,1,1,0.32523715,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(<mask>, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
337,Parser.java,parseComment,void parseComment(),99,104,3599,3599,IdentifierMutator-Literal,0,2,2,0.03732212,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(<mask>, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
338,Parser.java,parseComment,void parseComment(),99,104,3599,3599,IdentifierMutator-Literal,0,3,3,0.0064030015,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(<mask>, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
339,Parser.java,parseComment,void parseComment(),99,104,3615,3615,BinaryOperatorMutator,-,+,2,0.015252512,data.length() <mask> 1,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()<mask>1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
340,Parser.java,parseComment,void parseComment(),99,104,3615,3615,BinaryOperatorMutator,-,)-,3,0.0063629122,data.length() <mask> 1,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()<mask>1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
341,Parser.java,parseComment,void parseComment(),99,104,3615,3615,BinaryOperatorMutator,-,+,4,6.8478833E-4,data.length() <mask> 1,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()<mask>1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
342,Parser.java,parseComment,void parseComment(),99,104,3607,3612,MethodCallMutator,length,width,1,4.069803E-4,data.<mask>(),"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.<mask>()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
343,Parser.java,parseComment,void parseComment(),99,104,3607,3612,MethodCallMutator,length,len,2,3.1815466E-4,data.<mask>(),"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.<mask>()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
344,Parser.java,parseComment,void parseComment(),99,104,3607,3612,MethodCallMutator,length,size,3,2.6978116E-4,data.<mask>(),"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.<mask>()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
345,Parser.java,parseComment,void parseComment(),99,104,3607,3612,MethodCallMutator,length,position,4,1.2277845E-4,data.<mask>(),"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.<mask>()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
346,Parser.java,parseComment,void parseComment(),99,104,3602,3605,IdentifierMutator-Variable,data,Data,2,8.924964E-4,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0,<mask>.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
347,Parser.java,parseComment,void parseComment(),99,104,3602,3605,IdentifierMutator-Variable,data,ata,3,3.4288675E-4,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0,<mask>.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
348,Parser.java,parseComment,void parseComment(),99,104,3602,3605,IdentifierMutator-Variable,data,Data,4,3.271527E-4,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0,<mask>.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
349,Parser.java,parseComment,void parseComment(),99,104,3616,3616,IdentifierMutator-Literal,1,2,1,0.17291042,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-<mask>);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
350,Parser.java,parseComment,void parseComment(),99,104,3616,3616,IdentifierMutator-Literal,1,3,3,0.05503507,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-<mask>);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
351,Parser.java,parseComment,void parseComment(),99,104,3616,3616,IdentifierMutator-Literal,1,4,4,0.028683338,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-<mask>);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(comment);
    }"
352,Parser.java,parseComment,void parseComment(),99,105,3658,3661,IdentifierMutator-Variable,data,Data,2,2.5498972E-5,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(<mask>, baseUri);
        last().appendChild(comment);
    }"
353,Parser.java,parseComment,void parseComment(),99,105,3658,3661,IdentifierMutator-Variable,data,text,3,2.0191672E-5,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(<mask>, baseUri);
        last().appendChild(comment);
    }"
354,Parser.java,parseComment,void parseComment(),99,105,3658,3661,IdentifierMutator-Variable,data,name,4,1.1902968E-5,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(<mask>, baseUri);
        last().appendChild(comment);
    }"
355,Parser.java,parseComment,void parseComment(),99,105,3664,3670,IdentifierMutator-Variable,baseUri,comment,0,0.26427513,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data,<mask>);
        last().appendChild(comment);
    }"
356,Parser.java,parseComment,void parseComment(),99,105,3664,3670,IdentifierMutator-Variable,baseUri,true,1,0.096254915,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data,<mask>);
        last().appendChild(comment);
    }"
357,Parser.java,parseComment,void parseComment(),99,105,3664,3670,IdentifierMutator-Variable,baseUri,false,2,0.08120494,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data,<mask>);
        last().appendChild(comment);
    }"
358,Parser.java,parseComment,void parseComment(),99,105,3664,3670,IdentifierMutator-Variable,baseUri,this,3,0.04455617,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data,<mask>);
        last().appendChild(comment);
    }"
359,Parser.java,parseComment,void parseComment(),99,105,3664,3670,IdentifierMutator-Variable,baseUri,null,4,0.043848705,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data,<mask>);
        last().appendChild(comment);
    }"
360,Parser.java,parseComment,void parseComment(),99,105,3664,3670,FieldReferenceMutator,baseUri,comment,0,0.26427513,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data,<mask>);
        last().appendChild(comment);
    }"
361,Parser.java,parseComment,void parseComment(),99,105,3664,3670,FieldReferenceMutator,baseUri,true,1,0.096254915,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data,<mask>);
        last().appendChild(comment);
    }"
362,Parser.java,parseComment,void parseComment(),99,105,3664,3670,FieldReferenceMutator,baseUri,false,2,0.08120494,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data,<mask>);
        last().appendChild(comment);
    }"
363,Parser.java,parseComment,void parseComment(),99,105,3664,3670,FieldReferenceMutator,baseUri,this,3,0.04455617,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data,<mask>);
        last().appendChild(comment);
    }"
364,Parser.java,parseComment,void parseComment(),99,105,3664,3670,FieldReferenceMutator,baseUri,null,4,0.043848705,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data,<mask>);
        last().appendChild(comment);
    }"
365,Parser.java,parseComment,void parseComment(),99,106,3689,3699,MethodCallMutator,appendChild,add,0,0.6179988,last().<mask>(comment),"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().<mask>(comment);
    }"
366,Parser.java,parseComment,void parseComment(),99,106,3689,3699,MethodCallMutator,appendChild,append,1,0.18962564,last().<mask>(comment),"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().<mask>(comment);
    }"
367,Parser.java,parseComment,void parseComment(),99,106,3689,3699,MethodCallMutator,appendChild,next,2,0.03948519,last().<mask>(comment),"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().<mask>(comment);
    }"
368,Parser.java,parseComment,void parseComment(),99,106,3689,3699,MethodCallMutator,appendChild,push,3,0.038317177,last().<mask>(comment),"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().<mask>(comment);
    }"
369,Parser.java,parseComment,void parseComment(),99,106,3689,3699,MethodCallMutator,appendChild,insert,4,0.016657555,last().<mask>(comment),"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().<mask>(comment);
    }"
370,Parser.java,parseComment,void parseComment(),99,106,3682,3685,MethodCallMutator,last,root,0,0.30360943,<mask>(),"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);<mask>().appendChild(comment);
    }"
371,Parser.java,parseComment,void parseComment(),99,106,3682,3685,MethodCallMutator,last,head,1,0.112920344,<mask>(),"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);<mask>().appendChild(comment);
    }"
372,Parser.java,parseComment,void parseComment(),99,106,3682,3685,MethodCallMutator,last,body,2,0.106968656,<mask>(),"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);<mask>().appendChild(comment);
    }"
373,Parser.java,parseComment,void parseComment(),99,106,3682,3685,MethodCallMutator,last,parent,3,0.058900103,<mask>(),"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);<mask>().appendChild(comment);
    }"
374,Parser.java,parseComment,void parseComment(),99,106,3682,3685,MethodCallMutator,last,node,4,0.037809007,<mask>(),"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);<mask>().appendChild(comment);
    }"
375,Parser.java,parseComment,void parseComment(),99,106,3701,3707,IdentifierMutator-Variable,comment,Comment,2,1.30912E-4,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(<mask>);
    }"
376,Parser.java,parseComment,void parseComment(),99,106,3701,3707,IdentifierMutator-Variable,comment,child,3,1.1762102E-4,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(<mask>);
    }"
377,Parser.java,parseComment,void parseComment(),99,106,3701,3707,IdentifierMutator-Variable,comment,comments,4,3.7748057E-5,<mask>,"void parseComment() {
        tq.consume(""<!--"");
        String data = tq.chompTo(""->"");

        if (data.endsWith(""-"")) // i.e. was -->
            data = data.substring(0, data.length()-1);
        Comment comment = new Comment(data, baseUri);
        last().appendChild(<mask>);
    }"
378,Parser.java,parseXmlDecl,void parseXmlDecl(),109,110,3763,3769,MethodCallMutator,consume,append,0,0.26428652,"tq.<mask>(""<"")","void parseXmlDecl() {
        tq.<mask>(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
379,Parser.java,parseXmlDecl,void parseXmlDecl(),109,110,3763,3769,MethodCallMutator,consume,push,1,0.111761756,"tq.<mask>(""<"")","void parseXmlDecl() {
        tq.<mask>(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
380,Parser.java,parseXmlDecl,void parseXmlDecl(),109,110,3763,3769,MethodCallMutator,consume,match,2,0.10476002,"tq.<mask>(""<"")","void parseXmlDecl() {
        tq.<mask>(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
381,Parser.java,parseXmlDecl,void parseXmlDecl(),109,110,3763,3769,MethodCallMutator,consume,parse,3,0.09361959,"tq.<mask>(""<"")","void parseXmlDecl() {
        tq.<mask>(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
382,Parser.java,parseXmlDecl,void parseXmlDecl(),109,110,3763,3769,MethodCallMutator,consume,write,4,0.08835755,"tq.<mask>(""<"")","void parseXmlDecl() {
        tq.<mask>(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
383,Parser.java,parseXmlDecl,void parseXmlDecl(),109,110,3760,3761,IdentifierMutator-Variable,tq,t,0,0.11395997,<mask>,"void parseXmlDecl() {<mask>.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
384,Parser.java,parseXmlDecl,void parseXmlDecl(),109,110,3760,3761,IdentifierMutator-Variable,tq,parser,1,0.09276284,<mask>,"void parseXmlDecl() {<mask>.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
385,Parser.java,parseXmlDecl,void parseXmlDecl(),109,110,3760,3761,IdentifierMutator-Variable,tq,q,2,0.07671778,<mask>,"void parseXmlDecl() {<mask>.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
386,Parser.java,parseXmlDecl,void parseXmlDecl(),109,110,3760,3761,IdentifierMutator-Variable,tq,this,3,0.05343234,<mask>,"void parseXmlDecl() {<mask>.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
387,Parser.java,parseXmlDecl,void parseXmlDecl(),109,110,3760,3761,IdentifierMutator-Variable,tq,stream,4,0.05241586,<mask>,"void parseXmlDecl() {<mask>.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
388,Parser.java,parseXmlDecl,void parseXmlDecl(),109,110,3760,3761,FieldReferenceMutator,tq,t,0,0.11395997,<mask>,"void parseXmlDecl() {<mask>.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
389,Parser.java,parseXmlDecl,void parseXmlDecl(),109,110,3760,3761,FieldReferenceMutator,tq,parser,1,0.09276284,<mask>,"void parseXmlDecl() {<mask>.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
390,Parser.java,parseXmlDecl,void parseXmlDecl(),109,110,3760,3761,FieldReferenceMutator,tq,q,2,0.07671778,<mask>,"void parseXmlDecl() {<mask>.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
391,Parser.java,parseXmlDecl,void parseXmlDecl(),109,110,3760,3761,FieldReferenceMutator,tq,this,3,0.05343234,<mask>,"void parseXmlDecl() {<mask>.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
392,Parser.java,parseXmlDecl,void parseXmlDecl(),109,110,3760,3761,FieldReferenceMutator,tq,stream,4,0.05241586,<mask>,"void parseXmlDecl() {<mask>.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
393,Parser.java,parseXmlDecl,void parseXmlDecl(),109,110,3771,3773,IdentifierMutator-Literal,"""<""",1,0,0.28549057,<mask>,"void parseXmlDecl() {
        tq.consume(<mask>);
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
394,Parser.java,parseXmlDecl,void parseXmlDecl(),109,110,3771,3773,IdentifierMutator-Literal,"""<""",0,1,0.060859103,<mask>,"void parseXmlDecl() {
        tq.consume(<mask>);
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
395,Parser.java,parseXmlDecl,void parseXmlDecl(),109,110,3771,3773,IdentifierMutator-Literal,"""<""",2,2,0.058258876,<mask>,"void parseXmlDecl() {
        tq.consume(<mask>);
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
396,Parser.java,parseXmlDecl,void parseXmlDecl(),109,110,3771,3773,IdentifierMutator-Literal,"""<""",token,3,0.056667443,<mask>,"void parseXmlDecl() {
        tq.consume(<mask>);
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
397,Parser.java,parseXmlDecl,void parseXmlDecl(),109,110,3771,3773,IdentifierMutator-Literal,"""<""",true,4,0.049434047,<mask>,"void parseXmlDecl() {
        tq.consume(<mask>);
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
398,Parser.java,parseXmlDecl,void parseXmlDecl(),109,111,3810,3816,MethodCallMutator,consume,char,0,0.349861,tq.<mask>(),"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.<mask>(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
399,Parser.java,parseXmlDecl,void parseXmlDecl(),109,111,3810,3816,MethodCallMutator,consume,next,1,0.20225897,tq.<mask>(),"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.<mask>(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
400,Parser.java,parseXmlDecl,void parseXmlDecl(),109,111,3810,3816,MethodCallMutator,consume,character,2,0.17670134,tq.<mask>(),"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.<mask>(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
401,Parser.java,parseXmlDecl,void parseXmlDecl(),109,111,3810,3816,MethodCallMutator,consume,first,3,0.12912713,tq.<mask>(),"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.<mask>(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
402,Parser.java,parseXmlDecl,void parseXmlDecl(),109,111,3810,3816,MethodCallMutator,consume,Char,4,0.018343208,tq.<mask>(),"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.<mask>(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
403,Parser.java,parseXmlDecl,void parseXmlDecl(),109,111,3807,3808,IdentifierMutator-Variable,tq,q,0,0.113734834,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar =<mask>.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
404,Parser.java,parseXmlDecl,void parseXmlDecl(),109,111,3807,3808,IdentifierMutator-Variable,tq,t,1,0.11340579,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar =<mask>.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
405,Parser.java,parseXmlDecl,void parseXmlDecl(),109,111,3807,3808,IdentifierMutator-Variable,tq,this,2,0.070380144,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar =<mask>.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
406,Parser.java,parseXmlDecl,void parseXmlDecl(),109,111,3807,3808,IdentifierMutator-Variable,tq,cur,3,0.063249685,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar =<mask>.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
407,Parser.java,parseXmlDecl,void parseXmlDecl(),109,111,3807,3808,IdentifierMutator-Variable,tq,sq,4,0.037833214,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar =<mask>.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
408,Parser.java,parseXmlDecl,void parseXmlDecl(),109,111,3807,3808,FieldReferenceMutator,tq,q,0,0.113734834,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar =<mask>.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
409,Parser.java,parseXmlDecl,void parseXmlDecl(),109,111,3807,3808,FieldReferenceMutator,tq,t,1,0.11340579,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar =<mask>.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
410,Parser.java,parseXmlDecl,void parseXmlDecl(),109,111,3807,3808,FieldReferenceMutator,tq,this,2,0.070380144,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar =<mask>.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
411,Parser.java,parseXmlDecl,void parseXmlDecl(),109,111,3807,3808,FieldReferenceMutator,tq,cur,3,0.063249685,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar =<mask>.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
412,Parser.java,parseXmlDecl,void parseXmlDecl(),109,111,3807,3808,FieldReferenceMutator,tq,sq,4,0.037833214,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar =<mask>.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
413,Parser.java,parseXmlDecl,void parseXmlDecl(),109,112,3903,3908,MethodCallMutator,equals,split,0,0.2996341,"firstChar.toString().<mask>(""!"")","void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().<mask>(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
414,Parser.java,parseXmlDecl,void parseXmlDecl(),109,112,3903,3908,MethodCallMutator,equals,has,1,0.12006098,"firstChar.toString().<mask>(""!"")","void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().<mask>(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
415,Parser.java,parseXmlDecl,void parseXmlDecl(),109,112,3903,3908,MethodCallMutator,equals,is,2,0.07712843,"firstChar.toString().<mask>(""!"")","void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().<mask>(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
416,Parser.java,parseXmlDecl,void parseXmlDecl(),109,112,3903,3908,MethodCallMutator,equals,contains,3,0.053864665,"firstChar.toString().<mask>(""!"")","void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().<mask>(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
417,Parser.java,parseXmlDecl,void parseXmlDecl(),109,112,3903,3908,MethodCallMutator,equals,strip,4,0.048901983,"firstChar.toString().<mask>(""!"")","void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().<mask>(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
418,Parser.java,parseXmlDecl,void parseXmlDecl(),109,112,3892,3899,MethodCallMutator,toString,value,0,0.1768188,firstChar.<mask>(),"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.<mask>().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
419,Parser.java,parseXmlDecl,void parseXmlDecl(),109,112,3892,3899,MethodCallMutator,toString,name,1,0.15528998,firstChar.<mask>(),"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.<mask>().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
420,Parser.java,parseXmlDecl,void parseXmlDecl(),109,112,3892,3899,MethodCallMutator,toString,char,2,0.12232542,firstChar.<mask>(),"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.<mask>().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
421,Parser.java,parseXmlDecl,void parseXmlDecl(),109,112,3892,3899,MethodCallMutator,toString,next,3,0.079587735,firstChar.<mask>(),"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.<mask>().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
422,Parser.java,parseXmlDecl,void parseXmlDecl(),109,112,3892,3899,MethodCallMutator,toString,string,4,0.055125766,firstChar.<mask>(),"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.<mask>().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
423,Parser.java,parseXmlDecl,void parseXmlDecl(),109,112,3882,3890,IdentifierMutator-Variable,firstChar,ch,0,0.08229684,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr =<mask>.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
424,Parser.java,parseXmlDecl,void parseXmlDecl(),109,112,3882,3890,IdentifierMutator-Variable,firstChar,c,1,0.07610219,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr =<mask>.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
425,Parser.java,parseXmlDecl,void parseXmlDecl(),109,112,3882,3890,IdentifierMutator-Variable,firstChar,first,2,0.072556436,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr =<mask>.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
426,Parser.java,parseXmlDecl,void parseXmlDecl(),109,112,3882,3890,IdentifierMutator-Variable,firstChar,char,3,0.057924822,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr =<mask>.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
427,Parser.java,parseXmlDecl,void parseXmlDecl(),109,112,3882,3890,IdentifierMutator-Variable,firstChar,character,4,0.048625156,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr =<mask>.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
428,Parser.java,parseXmlDecl,void parseXmlDecl(),109,112,3910,3912,IdentifierMutator-Literal,"""!""","''",0,0.20320502,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(<mask>);
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
429,Parser.java,parseXmlDecl,void parseXmlDecl(),109,112,3910,3912,IdentifierMutator-Literal,"""!""",xml,1,0.091488145,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(<mask>);
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
430,Parser.java,parseXmlDecl,void parseXmlDecl(),109,112,3910,3912,IdentifierMutator-Literal,"""!""",true,2,0.033321135,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(<mask>);
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
431,Parser.java,parseXmlDecl,void parseXmlDecl(),109,112,3910,3912,IdentifierMutator-Literal,"""!""",1,3,0.032642357,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(<mask>);
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
432,Parser.java,parseXmlDecl,void parseXmlDecl(),109,112,3910,3912,IdentifierMutator-Literal,"""!""",string,4,0.026937587,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(<mask>);
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
433,Parser.java,parseXmlDecl,void parseXmlDecl(),109,113,3941,3947,MethodCallMutator,chompTo,parse,0,0.32759976,"tq.<mask>("">"")","void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.<mask>("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
434,Parser.java,parseXmlDecl,void parseXmlDecl(),109,113,3941,3947,MethodCallMutator,chompTo,select,1,0.08578596,"tq.<mask>("">"")","void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.<mask>("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
435,Parser.java,parseXmlDecl,void parseXmlDecl(),109,113,3941,3947,MethodCallMutator,chompTo,format,2,0.043822456,"tq.<mask>("">"")","void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.<mask>("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
436,Parser.java,parseXmlDecl,void parseXmlDecl(),109,113,3941,3947,MethodCallMutator,chompTo,token,3,0.04329646,"tq.<mask>("">"")","void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.<mask>("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
437,Parser.java,parseXmlDecl,void parseXmlDecl(),109,113,3941,3947,MethodCallMutator,chompTo,text,4,0.039856303,"tq.<mask>("">"")","void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.<mask>("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
438,Parser.java,parseXmlDecl,void parseXmlDecl(),109,113,3938,3939,IdentifierMutator-Variable,tq,xml,0,0.26114592,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data =<mask>.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
439,Parser.java,parseXmlDecl,void parseXmlDecl(),109,113,3938,3939,IdentifierMutator-Variable,tq,data,1,0.24298337,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data =<mask>.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
440,Parser.java,parseXmlDecl,void parseXmlDecl(),109,113,3938,3939,IdentifierMutator-Variable,tq,text,2,0.07707123,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data =<mask>.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
441,Parser.java,parseXmlDecl,void parseXmlDecl(),109,113,3938,3939,IdentifierMutator-Variable,tq,content,3,0.047392588,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data =<mask>.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
442,Parser.java,parseXmlDecl,void parseXmlDecl(),109,113,3938,3939,IdentifierMutator-Variable,tq,str,4,0.032232013,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data =<mask>.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
443,Parser.java,parseXmlDecl,void parseXmlDecl(),109,113,3938,3939,FieldReferenceMutator,tq,xml,0,0.26114592,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data =<mask>.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
444,Parser.java,parseXmlDecl,void parseXmlDecl(),109,113,3938,3939,FieldReferenceMutator,tq,data,1,0.24298337,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data =<mask>.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
445,Parser.java,parseXmlDecl,void parseXmlDecl(),109,113,3938,3939,FieldReferenceMutator,tq,text,2,0.07707123,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data =<mask>.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
446,Parser.java,parseXmlDecl,void parseXmlDecl(),109,113,3938,3939,FieldReferenceMutator,tq,content,3,0.047392588,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data =<mask>.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
447,Parser.java,parseXmlDecl,void parseXmlDecl(),109,113,3938,3939,FieldReferenceMutator,tq,str,4,0.032232013,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data =<mask>.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
448,Parser.java,parseXmlDecl,void parseXmlDecl(),109,113,3949,3951,IdentifierMutator-Literal,""">""",1,0,0.1553963,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo(<mask>);

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
449,Parser.java,parseXmlDecl,void parseXmlDecl(),109,113,3949,3951,IdentifierMutator-Literal,""">""",string,1,0.049414117,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo(<mask>);

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
450,Parser.java,parseXmlDecl,void parseXmlDecl(),109,113,3949,3951,IdentifierMutator-Literal,""">""",0,2,0.043498814,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo(<mask>);

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
451,Parser.java,parseXmlDecl,void parseXmlDecl(),109,113,3949,3951,IdentifierMutator-Literal,""">""","''",3,0.02162291,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo(<mask>);

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
452,Parser.java,parseXmlDecl,void parseXmlDecl(),109,113,3949,3951,IdentifierMutator-Literal,""">""",2,4,0.020641305,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo(<mask>);

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(decl);
    }"
453,Parser.java,parseXmlDecl,void parseXmlDecl(),109,115,4005,4008,IdentifierMutator-Variable,data,Data,2,1.0684148E-4,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(<mask>, baseUri, procInstr);
        last().appendChild(decl);
    }"
454,Parser.java,parseXmlDecl,void parseXmlDecl(),109,115,4005,4008,IdentifierMutator-Variable,data,DATA,3,3.9774088E-5,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(<mask>, baseUri, procInstr);
        last().appendChild(decl);
    }"
455,Parser.java,parseXmlDecl,void parseXmlDecl(),109,115,4005,4008,IdentifierMutator-Variable,data,str,4,2.167497E-5,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(<mask>, baseUri, procInstr);
        last().appendChild(decl);
    }"
456,Parser.java,parseXmlDecl,void parseXmlDecl(),109,115,4011,4017,IdentifierMutator-Variable,baseUri,true,0,0.15234433,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data,<mask>, procInstr);
        last().appendChild(decl);
    }"
457,Parser.java,parseXmlDecl,void parseXmlDecl(),109,115,4011,4017,IdentifierMutator-Variable,baseUri,false,1,0.13393228,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data,<mask>, procInstr);
        last().appendChild(decl);
    }"
458,Parser.java,parseXmlDecl,void parseXmlDecl(),109,115,4011,4017,IdentifierMutator-Variable,baseUri,null,2,0.10993491,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data,<mask>, procInstr);
        last().appendChild(decl);
    }"
459,Parser.java,parseXmlDecl,void parseXmlDecl(),109,115,4011,4017,IdentifierMutator-Variable,baseUri,0,3,0.053574264,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data,<mask>, procInstr);
        last().appendChild(decl);
    }"
460,Parser.java,parseXmlDecl,void parseXmlDecl(),109,115,4011,4017,IdentifierMutator-Variable,baseUri,"""""",4,0.02975349,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data,<mask>, procInstr);
        last().appendChild(decl);
    }"
461,Parser.java,parseXmlDecl,void parseXmlDecl(),109,115,4011,4017,FieldReferenceMutator,baseUri,true,0,0.15234433,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data,<mask>, procInstr);
        last().appendChild(decl);
    }"
462,Parser.java,parseXmlDecl,void parseXmlDecl(),109,115,4011,4017,FieldReferenceMutator,baseUri,false,1,0.13393228,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data,<mask>, procInstr);
        last().appendChild(decl);
    }"
463,Parser.java,parseXmlDecl,void parseXmlDecl(),109,115,4011,4017,FieldReferenceMutator,baseUri,null,2,0.10993491,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data,<mask>, procInstr);
        last().appendChild(decl);
    }"
464,Parser.java,parseXmlDecl,void parseXmlDecl(),109,115,4011,4017,FieldReferenceMutator,baseUri,0,3,0.053574264,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data,<mask>, procInstr);
        last().appendChild(decl);
    }"
465,Parser.java,parseXmlDecl,void parseXmlDecl(),109,115,4011,4017,FieldReferenceMutator,baseUri,"""""",4,0.02975349,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data,<mask>, procInstr);
        last().appendChild(decl);
    }"
466,Parser.java,parseXmlDecl,void parseXmlDecl(),109,115,4020,4028,IdentifierMutator-Variable,procInstr,encoding,0,0.08752963,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri,<mask>);
        last().appendChild(decl);
    }"
467,Parser.java,parseXmlDecl,void parseXmlDecl(),109,115,4020,4028,IdentifierMutator-Variable,procInstr,null,1,0.06423329,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri,<mask>);
        last().appendChild(decl);
    }"
468,Parser.java,parseXmlDecl,void parseXmlDecl(),109,115,4020,4028,IdentifierMutator-Variable,procInstr,false,2,0.06405521,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri,<mask>);
        last().appendChild(decl);
    }"
469,Parser.java,parseXmlDecl,void parseXmlDecl(),109,115,4020,4028,IdentifierMutator-Variable,procInstr,true,3,0.05748748,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri,<mask>);
        last().appendChild(decl);
    }"
470,Parser.java,parseXmlDecl,void parseXmlDecl(),109,115,4020,4028,IdentifierMutator-Variable,procInstr,namespace,4,0.029255519,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri,<mask>);
        last().appendChild(decl);
    }"
471,Parser.java,parseXmlDecl,void parseXmlDecl(),109,116,4047,4057,MethodCallMutator,appendChild,add,0,0.4192618,last().<mask>(decl),"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().<mask>(decl);
    }"
472,Parser.java,parseXmlDecl,void parseXmlDecl(),109,116,4047,4057,MethodCallMutator,appendChild,append,1,0.27434152,last().<mask>(decl),"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().<mask>(decl);
    }"
473,Parser.java,parseXmlDecl,void parseXmlDecl(),109,116,4047,4057,MethodCallMutator,appendChild,push,2,0.09294915,last().<mask>(decl),"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().<mask>(decl);
    }"
474,Parser.java,parseXmlDecl,void parseXmlDecl(),109,116,4047,4057,MethodCallMutator,appendChild,next,3,0.040490933,last().<mask>(decl),"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().<mask>(decl);
    }"
475,Parser.java,parseXmlDecl,void parseXmlDecl(),109,116,4047,4057,MethodCallMutator,appendChild,insert,4,0.028447662,last().<mask>(decl),"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().<mask>(decl);
    }"
476,Parser.java,parseXmlDecl,void parseXmlDecl(),109,116,4040,4043,MethodCallMutator,last,root,0,0.5031785,<mask>(),"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);<mask>().appendChild(decl);
    }"
477,Parser.java,parseXmlDecl,void parseXmlDecl(),109,116,4040,4043,MethodCallMutator,last,xml,1,0.06497894,<mask>(),"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);<mask>().appendChild(decl);
    }"
478,Parser.java,parseXmlDecl,void parseXmlDecl(),109,116,4040,4043,MethodCallMutator,last,parent,2,0.046302285,<mask>(),"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);<mask>().appendChild(decl);
    }"
479,Parser.java,parseXmlDecl,void parseXmlDecl(),109,116,4040,4043,MethodCallMutator,last,head,3,0.04241034,<mask>(),"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);<mask>().appendChild(decl);
    }"
480,Parser.java,parseXmlDecl,void parseXmlDecl(),109,116,4040,4043,MethodCallMutator,last,doc,4,0.030735856,<mask>(),"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);<mask>().appendChild(decl);
    }"
481,Parser.java,parseXmlDecl,void parseXmlDecl(),109,116,4059,4062,IdentifierMutator-Variable,decl,Decl,2,2.8922685E-4,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(<mask>);
    }"
482,Parser.java,parseXmlDecl,void parseXmlDecl(),109,116,4059,4062,IdentifierMutator-Variable,decl,dec,3,2.2847632E-4,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(<mask>);
    }"
483,Parser.java,parseXmlDecl,void parseXmlDecl(),109,116,4059,4062,IdentifierMutator-Variable,decl,cl,4,5.6109195E-5,<mask>,"void parseXmlDecl() {
        tq.consume(""<"");
        Character firstChar = tq.consume(); // <? or <!, from initial match.
        boolean procInstr = firstChar.toString().equals(""!"");
        String data = tq.chompTo("">"");

        XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);
        last().appendChild(<mask>);
    }"
484,Parser.java,parseEndTag,void parseEndTag(),119,120,4117,4123,MethodCallMutator,consume,push,0,0.32675552,"tq.<mask>(""</"")","void parseEndTag() {
        tq.<mask>(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
485,Parser.java,parseEndTag,void parseEndTag(),119,120,4117,4123,MethodCallMutator,consume,write,1,0.1212315,"tq.<mask>(""</"")","void parseEndTag() {
        tq.<mask>(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
486,Parser.java,parseEndTag,void parseEndTag(),119,120,4117,4123,MethodCallMutator,consume,append,2,0.07868397,"tq.<mask>(""</"")","void parseEndTag() {
        tq.<mask>(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
487,Parser.java,parseEndTag,void parseEndTag(),119,120,4117,4123,MethodCallMutator,consume,match,3,0.07387376,"tq.<mask>(""</"")","void parseEndTag() {
        tq.<mask>(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
488,Parser.java,parseEndTag,void parseEndTag(),119,120,4117,4123,MethodCallMutator,consume,text,4,0.051972516,"tq.<mask>(""</"")","void parseEndTag() {
        tq.<mask>(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
489,Parser.java,parseEndTag,void parseEndTag(),119,120,4114,4115,IdentifierMutator-Variable,tq,parser,0,0.1691739,<mask>,"void parseEndTag() {<mask>.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
490,Parser.java,parseEndTag,void parseEndTag(),119,120,4114,4115,IdentifierMutator-Variable,tq,stream,1,0.091487736,<mask>,"void parseEndTag() {<mask>.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
491,Parser.java,parseEndTag,void parseEndTag(),119,120,4114,4115,IdentifierMutator-Variable,tq,input,2,0.06324388,<mask>,"void parseEndTag() {<mask>.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
492,Parser.java,parseEndTag,void parseEndTag(),119,120,4114,4115,IdentifierMutator-Variable,tq,q,3,0.055955473,<mask>,"void parseEndTag() {<mask>.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
493,Parser.java,parseEndTag,void parseEndTag(),119,120,4114,4115,IdentifierMutator-Variable,tq,reader,4,0.046448834,<mask>,"void parseEndTag() {<mask>.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
494,Parser.java,parseEndTag,void parseEndTag(),119,120,4114,4115,FieldReferenceMutator,tq,parser,0,0.1691739,<mask>,"void parseEndTag() {<mask>.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
495,Parser.java,parseEndTag,void parseEndTag(),119,120,4114,4115,FieldReferenceMutator,tq,stream,1,0.091487736,<mask>,"void parseEndTag() {<mask>.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
496,Parser.java,parseEndTag,void parseEndTag(),119,120,4114,4115,FieldReferenceMutator,tq,input,2,0.06324388,<mask>,"void parseEndTag() {<mask>.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
497,Parser.java,parseEndTag,void parseEndTag(),119,120,4114,4115,FieldReferenceMutator,tq,q,3,0.055955473,<mask>,"void parseEndTag() {<mask>.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
498,Parser.java,parseEndTag,void parseEndTag(),119,120,4114,4115,FieldReferenceMutator,tq,reader,4,0.046448834,<mask>,"void parseEndTag() {<mask>.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
499,Parser.java,parseEndTag,void parseEndTag(),119,120,4125,4128,IdentifierMutator-Literal,"""</""",word,0,0.41848144,<mask>,"void parseEndTag() {
        tq.consume(<mask>);
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
500,Parser.java,parseEndTag,void parseEndTag(),119,120,4125,4128,IdentifierMutator-Literal,"""</""",1,1,0.077372976,<mask>,"void parseEndTag() {
        tq.consume(<mask>);
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
501,Parser.java,parseEndTag,void parseEndTag(),119,120,4125,4128,IdentifierMutator-Literal,"""</""",Word,2,0.035644777,<mask>,"void parseEndTag() {
        tq.consume(<mask>);
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
502,Parser.java,parseEndTag,void parseEndTag(),119,120,4125,4128,IdentifierMutator-Literal,"""</""",tag,3,0.029789286,<mask>,"void parseEndTag() {
        tq.consume(<mask>);
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
503,Parser.java,parseEndTag,void parseEndTag(),119,120,4125,4128,IdentifierMutator-Literal,"""</""",words,4,0.029220829,<mask>,"void parseEndTag() {
        tq.consume(<mask>);
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
504,Parser.java,parseEndTag,void parseEndTag(),119,121,4160,4170,MethodCallMutator,consumeWord,next,0,0.21233986,tq.<mask>(),"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.<mask>();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
505,Parser.java,parseEndTag,void parseEndTag(),119,121,4160,4170,MethodCallMutator,consumeWord,current,1,0.17064755,tq.<mask>(),"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.<mask>();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
506,Parser.java,parseEndTag,void parseEndTag(),119,121,4160,4170,MethodCallMutator,consumeWord,value,2,0.08146649,tq.<mask>(),"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.<mask>();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
507,Parser.java,parseEndTag,void parseEndTag(),119,121,4160,4170,MethodCallMutator,consumeWord,word,3,0.07295105,tq.<mask>(),"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.<mask>();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
508,Parser.java,parseEndTag,void parseEndTag(),119,121,4160,4170,MethodCallMutator,consumeWord,name,4,0.06404827,tq.<mask>(),"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.<mask>();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
509,Parser.java,parseEndTag,void parseEndTag(),119,121,4157,4158,IdentifierMutator-Variable,tq,parser,0,0.14306685,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName =<mask>.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
510,Parser.java,parseEndTag,void parseEndTag(),119,121,4157,4158,IdentifierMutator-Variable,tq,this,1,0.106717475,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName =<mask>.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
511,Parser.java,parseEndTag,void parseEndTag(),119,121,4157,4158,IdentifierMutator-Variable,tq,q,2,0.059633736,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName =<mask>.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
512,Parser.java,parseEndTag,void parseEndTag(),119,121,4157,4158,IdentifierMutator-Variable,tq,waiter,3,0.04672691,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName =<mask>.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
513,Parser.java,parseEndTag,void parseEndTag(),119,121,4157,4158,IdentifierMutator-Variable,tq,reader,4,0.04670659,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName =<mask>.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
514,Parser.java,parseEndTag,void parseEndTag(),119,121,4157,4158,FieldReferenceMutator,tq,parser,0,0.14306685,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName =<mask>.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
515,Parser.java,parseEndTag,void parseEndTag(),119,121,4157,4158,FieldReferenceMutator,tq,this,1,0.106717475,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName =<mask>.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
516,Parser.java,parseEndTag,void parseEndTag(),119,121,4157,4158,FieldReferenceMutator,tq,q,2,0.059633736,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName =<mask>.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
517,Parser.java,parseEndTag,void parseEndTag(),119,121,4157,4158,FieldReferenceMutator,tq,waiter,3,0.04672691,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName =<mask>.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
518,Parser.java,parseEndTag,void parseEndTag(),119,121,4157,4158,FieldReferenceMutator,tq,reader,4,0.04670659,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName =<mask>.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
519,Parser.java,parseEndTag,void parseEndTag(),119,122,4186,4192,MethodCallMutator,chompTo,push,0,0.23683603,"tq.<mask>("">"")","void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.<mask>("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
520,Parser.java,parseEndTag,void parseEndTag(),119,122,4186,4192,MethodCallMutator,chompTo,log,1,0.11958735,"tq.<mask>("">"")","void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.<mask>("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
521,Parser.java,parseEndTag,void parseEndTag(),119,122,4186,4192,MethodCallMutator,chompTo,write,2,0.102878794,"tq.<mask>("">"")","void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.<mask>("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
522,Parser.java,parseEndTag,void parseEndTag(),119,122,4186,4192,MethodCallMutator,chompTo,parse,3,0.093102746,"tq.<mask>("">"")","void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.<mask>("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
523,Parser.java,parseEndTag,void parseEndTag(),119,122,4186,4192,MethodCallMutator,chompTo,match,4,0.055719987,"tq.<mask>("">"")","void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.<mask>("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
524,Parser.java,parseEndTag,void parseEndTag(),119,122,4183,4184,IdentifierMutator-Variable,tq,tag,0,0.15851085,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();<mask>.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
525,Parser.java,parseEndTag,void parseEndTag(),119,122,4183,4184,IdentifierMutator-Variable,tq,text,1,0.055396385,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();<mask>.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
526,Parser.java,parseEndTag,void parseEndTag(),119,122,4183,4184,IdentifierMutator-Variable,tq,input,2,0.047854606,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();<mask>.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
527,Parser.java,parseEndTag,void parseEndTag(),119,122,4183,4184,IdentifierMutator-Variable,tq,name,3,0.038033824,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();<mask>.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
528,Parser.java,parseEndTag,void parseEndTag(),119,122,4183,4184,IdentifierMutator-Variable,tq,tag,4,0.030145448,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();<mask>.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
529,Parser.java,parseEndTag,void parseEndTag(),119,122,4183,4184,FieldReferenceMutator,tq,tag,0,0.15851085,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();<mask>.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
530,Parser.java,parseEndTag,void parseEndTag(),119,122,4183,4184,FieldReferenceMutator,tq,text,1,0.055396385,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();<mask>.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
531,Parser.java,parseEndTag,void parseEndTag(),119,122,4183,4184,FieldReferenceMutator,tq,input,2,0.047854606,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();<mask>.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
532,Parser.java,parseEndTag,void parseEndTag(),119,122,4183,4184,FieldReferenceMutator,tq,name,3,0.038033824,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();<mask>.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
533,Parser.java,parseEndTag,void parseEndTag(),119,122,4183,4184,FieldReferenceMutator,tq,tag,4,0.030145448,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();<mask>.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
534,Parser.java,parseEndTag,void parseEndTag(),119,122,4194,4196,IdentifierMutator-Literal,""">""",tag,0,0.29251137,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo(<mask>);

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
535,Parser.java,parseEndTag,void parseEndTag(),119,122,4194,4196,IdentifierMutator-Literal,""">""",end,1,0.107137986,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo(<mask>);

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
536,Parser.java,parseEndTag,void parseEndTag(),119,122,4194,4196,IdentifierMutator-Literal,""">""",0,2,0.05232959,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo(<mask>);

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
537,Parser.java,parseEndTag,void parseEndTag(),119,122,4194,4196,IdentifierMutator-Literal,""">""",start,3,0.038728423,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo(<mask>);

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
538,Parser.java,parseEndTag,void parseEndTag(),119,122,4194,4196,IdentifierMutator-Literal,""">""",1,4,0.032979067,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo(<mask>);

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
539,Parser.java,parseEndTag,void parseEndTag(),119,124,4229,4232,BinaryOperatorMutator,!=,>,0,0.5492937,tagName.length() <mask> 0,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length()<mask>0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
540,Parser.java,parseEndTag,void parseEndTag(),119,124,4229,4232,BinaryOperatorMutator,!=,>,1,0.20701352,tagName.length() <mask> 0,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length()<mask>0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
541,Parser.java,parseEndTag,void parseEndTag(),119,124,4229,4232,BinaryOperatorMutator,!=,==,2,0.20135978,tagName.length() <mask> 0,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length()<mask>0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
542,Parser.java,parseEndTag,void parseEndTag(),119,124,4229,4232,BinaryOperatorMutator,!=,=,4,0.005663152,tagName.length() <mask> 0,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length()<mask>0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
543,Parser.java,parseEndTag,void parseEndTag(),119,124,4221,4226,MethodCallMutator,length,width,2,1.690328E-4,tagName.<mask>(),"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.<mask>() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
544,Parser.java,parseEndTag,void parseEndTag(),119,124,4221,4226,MethodCallMutator,length,len,3,1.5864692E-4,tagName.<mask>(),"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.<mask>() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
545,Parser.java,parseEndTag,void parseEndTag(),119,124,4221,4226,MethodCallMutator,length,Length,4,1.1895189E-4,tagName.<mask>(),"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.<mask>() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
546,Parser.java,parseEndTag,void parseEndTag(),119,124,4213,4219,IdentifierMutator-Variable,tagName,tag,0,0.3699793,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (<mask>.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
547,Parser.java,parseEndTag,void parseEndTag(),119,124,4213,4219,IdentifierMutator-Variable,tagName,name,1,0.32993433,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (<mask>.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
548,Parser.java,parseEndTag,void parseEndTag(),119,124,4213,4219,IdentifierMutator-Variable,tagName,Name,2,0.07856711,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (<mask>.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
549,Parser.java,parseEndTag,void parseEndTag(),119,124,4213,4219,IdentifierMutator-Variable,tagName,Tag,3,0.06197704,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (<mask>.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
550,Parser.java,parseEndTag,void parseEndTag(),119,124,4213,4219,IdentifierMutator-Variable,tagName,string,4,0.0078589255,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (<mask>.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
551,Parser.java,parseEndTag,void parseEndTag(),119,124,4233,4233,IdentifierMutator-Literal,0,1,1,0.0043025296,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() !=<mask>) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
552,Parser.java,parseEndTag,void parseEndTag(),119,124,4233,4233,IdentifierMutator-Literal,0,null,2,0.0019228914,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() !=<mask>) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
553,Parser.java,parseEndTag,void parseEndTag(),119,124,4233,4233,IdentifierMutator-Literal,0,"""""",3,5.745855E-4,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() !=<mask>) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
554,Parser.java,parseEndTag,void parseEndTag(),119,124,4233,4233,IdentifierMutator-Literal,0,5,4,2.867583E-4,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() !=<mask>) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(tag);
        }
    }"
555,Parser.java,parseEndTag,void parseEndTag(),119,125,4264,4270,MethodCallMutator,valueOf,create,0,0.23799872,Tag.<mask>(tagName),"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.<mask>(tagName);
            popStackToClose(tag);
        }
    }"
556,Parser.java,parseEndTag,void parseEndTag(),119,125,4264,4270,MethodCallMutator,valueOf,parse,1,0.14666298,Tag.<mask>(tagName),"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.<mask>(tagName);
            popStackToClose(tag);
        }
    }"
557,Parser.java,parseEndTag,void parseEndTag(),119,125,4264,4270,MethodCallMutator,valueOf,parse,2,0.12991749,Tag.<mask>(tagName),"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.<mask>(tagName);
            popStackToClose(tag);
        }
    }"
558,Parser.java,parseEndTag,void parseEndTag(),119,125,4264,4270,MethodCallMutator,valueOf,new,3,0.074383184,Tag.<mask>(tagName),"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.<mask>(tagName);
            popStackToClose(tag);
        }
    }"
559,Parser.java,parseEndTag,void parseEndTag(),119,125,4264,4270,MethodCallMutator,valueOf,create,4,0.0459305,Tag.<mask>(tagName),"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.<mask>(tagName);
            popStackToClose(tag);
        }
    }"
560,Parser.java,parseEndTag,void parseEndTag(),119,125,4272,4278,IdentifierMutator-Variable,tagName,name,0,0.51393795,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(<mask>);
            popStackToClose(tag);
        }
    }"
561,Parser.java,parseEndTag,void parseEndTag(),119,125,4272,4278,IdentifierMutator-Variable,tagName,tag,1,0.25409767,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(<mask>);
            popStackToClose(tag);
        }
    }"
562,Parser.java,parseEndTag,void parseEndTag(),119,125,4272,4278,IdentifierMutator-Variable,tagName,Name,2,0.028437363,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(<mask>);
            popStackToClose(tag);
        }
    }"
563,Parser.java,parseEndTag,void parseEndTag(),119,125,4272,4278,IdentifierMutator-Variable,tagName,string,3,0.01729496,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(<mask>);
            popStackToClose(tag);
        }
    }"
564,Parser.java,parseEndTag,void parseEndTag(),119,125,4272,4278,IdentifierMutator-Variable,tagName,Tag,4,0.014319933,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(<mask>);
            popStackToClose(tag);
        }
    }"
565,Parser.java,parseEndTag,void parseEndTag(),119,126,4294,4308,MethodCallMutator,popStackToClose,parse,0,0.5012492,<mask>(tag),"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);<mask>(tag);
        }
    }"
566,Parser.java,parseEndTag,void parseEndTag(),119,126,4294,4308,MethodCallMutator,popStackToClose,add,1,0.06294498,<mask>(tag),"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);<mask>(tag);
        }
    }"
567,Parser.java,parseEndTag,void parseEndTag(),119,126,4294,4308,MethodCallMutator,popStackToClose,accept,2,0.050577663,<mask>(tag),"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);<mask>(tag);
        }
    }"
568,Parser.java,parseEndTag,void parseEndTag(),119,126,4294,4308,MethodCallMutator,popStackToClose,push,3,0.04142577,<mask>(tag),"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);<mask>(tag);
        }
    }"
569,Parser.java,parseEndTag,void parseEndTag(),119,126,4294,4308,MethodCallMutator,popStackToClose,process,4,0.03188573,<mask>(tag),"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);<mask>(tag);
        }
    }"
570,Parser.java,parseEndTag,void parseEndTag(),119,126,4310,4312,IdentifierMutator-Variable,tag,tags,1,0.002097565,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(<mask>);
        }
    }"
571,Parser.java,parseEndTag,void parseEndTag(),119,126,4310,4312,IdentifierMutator-Variable,tag,parent,2,0.0011856477,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(<mask>);
        }
    }"
572,Parser.java,parseEndTag,void parseEndTag(),119,126,4310,4312,IdentifierMutator-Variable,tag,stack,3,0.0010126827,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(<mask>);
        }
    }"
573,Parser.java,parseEndTag,void parseEndTag(),119,126,4310,4312,IdentifierMutator-Variable,tag,Tag,4,8.2554435E-4,<mask>,"void parseEndTag() {
        tq.consume(""</"");
        String tagName = tq.consumeWord();
        tq.chompTo("">"");

        if (tagName.length() != 0) {
            Tag tag = Tag.valueOf(tagName);
            popStackToClose(<mask>);
        }
    }"
574,Parser.java,parseStartTag,void parseStartTag(),130,131,4379,4385,MethodCallMutator,consume,match,0,0.41094288,"tq.<mask>(""<"")","void parseStartTag() {
        tq.<mask>(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
575,Parser.java,parseStartTag,void parseStartTag(),130,131,4379,4385,MethodCallMutator,consume,append,1,0.13529816,"tq.<mask>(""<"")","void parseStartTag() {
        tq.<mask>(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
576,Parser.java,parseStartTag,void parseStartTag(),130,131,4379,4385,MethodCallMutator,consume,push,2,0.124340944,"tq.<mask>(""<"")","void parseStartTag() {
        tq.<mask>(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
577,Parser.java,parseStartTag,void parseStartTag(),130,131,4379,4385,MethodCallMutator,consume,parse,3,0.049641624,"tq.<mask>(""<"")","void parseStartTag() {
        tq.<mask>(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
578,Parser.java,parseStartTag,void parseStartTag(),130,131,4379,4385,MethodCallMutator,consume,add,4,0.041599218,"tq.<mask>(""<"")","void parseStartTag() {
        tq.<mask>(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
579,Parser.java,parseStartTag,void parseStartTag(),130,131,4376,4377,IdentifierMutator-Variable,tq,parser,0,0.2705212,<mask>,"void parseStartTag() {<mask>.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
  "
580,Parser.java,parseStartTag,void parseStartTag(),130,131,4376,4377,IdentifierMutator-Variable,tq,input,1,0.06121337,<mask>,"void parseStartTag() {<mask>.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
  "
581,Parser.java,parseStartTag,void parseStartTag(),130,131,4376,4377,IdentifierMutator-Variable,tq,q,2,0.055254962,<mask>,"void parseStartTag() {<mask>.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
  "
582,Parser.java,parseStartTag,void parseStartTag(),130,131,4376,4377,IdentifierMutator-Variable,tq,stream,3,0.04739907,<mask>,"void parseStartTag() {<mask>.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
  "
583,Parser.java,parseStartTag,void parseStartTag(),130,131,4376,4377,IdentifierMutator-Variable,tq,this,4,0.04597481,<mask>,"void parseStartTag() {<mask>.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
  "
584,Parser.java,parseStartTag,void parseStartTag(),130,131,4376,4377,FieldReferenceMutator,tq,parser,0,0.2705212,<mask>,"void parseStartTag() {<mask>.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
  "
585,Parser.java,parseStartTag,void parseStartTag(),130,131,4376,4377,FieldReferenceMutator,tq,input,1,0.06121337,<mask>,"void parseStartTag() {<mask>.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
  "
586,Parser.java,parseStartTag,void parseStartTag(),130,131,4376,4377,FieldReferenceMutator,tq,q,2,0.055254962,<mask>,"void parseStartTag() {<mask>.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
  "
587,Parser.java,parseStartTag,void parseStartTag(),130,131,4376,4377,FieldReferenceMutator,tq,stream,3,0.04739907,<mask>,"void parseStartTag() {<mask>.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
  "
588,Parser.java,parseStartTag,void parseStartTag(),130,131,4376,4377,FieldReferenceMutator,tq,this,4,0.04597481,<mask>,"void parseStartTag() {<mask>.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
  "
589,Parser.java,parseStartTag,void parseStartTag(),130,131,4387,4389,IdentifierMutator-Literal,"""<""",1,0,0.29264182,<mask>,"void parseStartTag() {
        tq.consume(<mask>);
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
590,Parser.java,parseStartTag,void parseStartTag(),130,131,4387,4389,IdentifierMutator-Literal,"""<""",word,1,0.24237154,<mask>,"void parseStartTag() {
        tq.consume(<mask>);
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
591,Parser.java,parseStartTag,void parseStartTag(),130,131,4387,4389,IdentifierMutator-Literal,"""<""",2,2,0.05397967,<mask>,"void parseStartTag() {
        tq.consume(<mask>);
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
592,Parser.java,parseStartTag,void parseStartTag(),130,131,4387,4389,IdentifierMutator-Literal,"""<""",0,3,0.029368144,<mask>,"void parseStartTag() {
        tq.consume(<mask>);
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
593,Parser.java,parseStartTag,void parseStartTag(),130,131,4387,4389,IdentifierMutator-Literal,"""<""",true,4,0.02405628,<mask>,"void parseStartTag() {
        tq.consume(<mask>);
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
594,Parser.java,parseStartTag,void parseStartTag(),130,132,4421,4431,MethodCallMutator,consumeWord,next,0,0.4589889,tq.<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.<mask>();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"""
595,Parser.java,parseStartTag,void parseStartTag(),130,132,4421,4431,MethodCallMutator,consumeWord,pop,1,0.12488534,tq.<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.<mask>();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"""
596,Parser.java,parseStartTag,void parseStartTag(),130,132,4421,4431,MethodCallMutator,consumeWord,current,2,0.11654811,tq.<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.<mask>();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"""
597,Parser.java,parseStartTag,void parseStartTag(),130,132,4421,4431,MethodCallMutator,consumeWord,word,3,0.028777778,tq.<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.<mask>();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"""
598,Parser.java,parseStartTag,void parseStartTag(),130,132,4421,4431,MethodCallMutator,consumeWord,value,4,0.025722487,tq.<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.<mask>();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"""
599,Parser.java,parseStartTag,void parseStartTag(),130,132,4418,4419,IdentifierMutator-Variable,tq,parser,0,0.29162285,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName =<mask>.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
600,Parser.java,parseStartTag,void parseStartTag(),130,132,4418,4419,IdentifierMutator-Variable,tq,this,1,0.06660023,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName =<mask>.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
601,Parser.java,parseStartTag,void parseStartTag(),130,132,4418,4419,IdentifierMutator-Variable,tq,q,2,0.060464364,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName =<mask>.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
602,Parser.java,parseStartTag,void parseStartTag(),130,132,4418,4419,IdentifierMutator-Variable,tq,stream,3,0.05112908,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName =<mask>.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
603,Parser.java,parseStartTag,void parseStartTag(),130,132,4418,4419,IdentifierMutator-Variable,tq,input,4,0.049337953,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName =<mask>.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
604,Parser.java,parseStartTag,void parseStartTag(),130,132,4418,4419,FieldReferenceMutator,tq,parser,0,0.29162285,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName =<mask>.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
605,Parser.java,parseStartTag,void parseStartTag(),130,132,4418,4419,FieldReferenceMutator,tq,this,1,0.06660023,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName =<mask>.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
606,Parser.java,parseStartTag,void parseStartTag(),130,132,4418,4419,FieldReferenceMutator,tq,q,2,0.060464364,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName =<mask>.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
607,Parser.java,parseStartTag,void parseStartTag(),130,132,4418,4419,FieldReferenceMutator,tq,stream,3,0.05112908,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName =<mask>.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
608,Parser.java,parseStartTag,void parseStartTag(),130,132,4418,4419,FieldReferenceMutator,tq,input,4,0.049337953,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName =<mask>.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
609,Parser.java,parseStartTag,void parseStartTag(),130,134,4465,4468,BinaryOperatorMutator,==,>,1,0.21647365,tagName.length() <mask> 0,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length()<mask>0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
610,Parser.java,parseStartTag,void parseStartTag(),130,134,4465,4468,BinaryOperatorMutator,==,>,3,0.04176061,tagName.length() <mask> 0,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length()<mask>0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
611,Parser.java,parseStartTag,void parseStartTag(),130,134,4465,4468,BinaryOperatorMutator,==,!=,4,0.009341112,tagName.length() <mask> 0,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length()<mask>0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
612,Parser.java,parseStartTag,void parseStartTag(),130,134,4457,4462,MethodCallMutator,length,index,1,0.0012082796,tagName.<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.<mask>() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
613,Parser.java,parseStartTag,void parseStartTag(),130,134,4457,4462,MethodCallMutator,length,width,2,0.001017491,tagName.<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.<mask>() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
614,Parser.java,parseStartTag,void parseStartTag(),130,134,4457,4462,MethodCallMutator,length,position,4,8.257215E-4,tagName.<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.<mask>() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
615,Parser.java,parseStartTag,void parseStartTag(),130,134,4449,4455,IdentifierMutator-Variable,tagName,tag,0,0.5980248,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (<mask>.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
616,Parser.java,parseStartTag,void parseStartTag(),130,134,4449,4455,IdentifierMutator-Variable,tagName,name,1,0.05211776,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (<mask>.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
617,Parser.java,parseStartTag,void parseStartTag(),130,134,4449,4455,IdentifierMutator-Variable,tagName,tags,2,0.02804002,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (<mask>.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
618,Parser.java,parseStartTag,void parseStartTag(),130,134,4449,4455,IdentifierMutator-Variable,tagName,Tag,3,0.023927925,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (<mask>.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
619,Parser.java,parseStartTag,void parseStartTag(),130,134,4449,4455,IdentifierMutator-Variable,tagName,text,4,0.020319998,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (<mask>.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
620,Parser.java,parseStartTag,void parseStartTag(),130,134,4469,4469,IdentifierMutator-Literal,0,1,1,0.021003298,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() ==<mask>) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
621,Parser.java,parseStartTag,void parseStartTag(),130,134,4469,4469,IdentifierMutator-Literal,0,3,2,0.001969867,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() ==<mask>) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
622,Parser.java,parseStartTag,void parseStartTag(),130,134,4469,4469,IdentifierMutator-Literal,0,2,3,0.0018635247,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() ==<mask>) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
623,Parser.java,parseStartTag,void parseStartTag(),130,134,4469,4469,IdentifierMutator-Literal,0,4,4,0.0010029644,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() ==<mask>) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
624,Parser.java,parseStartTag,void parseStartTag(),130,135,4572,4579,MethodCallMutator,addFirst,match,0,0.6182001,"tq.<mask>(""&lt;"")","void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.<mask>(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
625,Parser.java,parseStartTag,void parseStartTag(),130,135,4572,4579,MethodCallMutator,addFirst,parse,1,0.07357818,"tq.<mask>(""&lt;"")","void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.<mask>(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
626,Parser.java,parseStartTag,void parseStartTag(),130,135,4572,4579,MethodCallMutator,addFirst,write,2,0.06719794,"tq.<mask>(""&lt;"")","void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.<mask>(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
627,Parser.java,parseStartTag,void parseStartTag(),130,135,4572,4579,MethodCallMutator,addFirst,push,3,0.05961055,"tq.<mask>(""&lt;"")","void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.<mask>(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
628,Parser.java,parseStartTag,void parseStartTag(),130,135,4572,4579,MethodCallMutator,addFirst,append,4,0.04129842,"tq.<mask>(""&lt;"")","void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.<mask>(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
629,Parser.java,parseStartTag,void parseStartTag(),130,135,4569,4570,IdentifierMutator-Variable,tq,stack,0,0.9180332,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text<mask>.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
      "
630,Parser.java,parseStartTag,void parseStartTag(),130,135,4569,4570,IdentifierMutator-Variable,tq,Stack,1,0.0076703075,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text<mask>.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
      "
631,Parser.java,parseStartTag,void parseStartTag(),130,135,4569,4570,IdentifierMutator-Variable,tq,node,2,0.005167538,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text<mask>.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
      "
632,Parser.java,parseStartTag,void parseStartTag(),130,135,4569,4570,IdentifierMutator-Variable,tq,tokens,3,0.0037321644,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text<mask>.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
      "
633,Parser.java,parseStartTag,void parseStartTag(),130,135,4569,4570,IdentifierMutator-Variable,tq,tags,4,0.002938447,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text<mask>.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
      "
634,Parser.java,parseStartTag,void parseStartTag(),130,135,4569,4570,FieldReferenceMutator,tq,stack,0,0.9180332,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text<mask>.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
      "
635,Parser.java,parseStartTag,void parseStartTag(),130,135,4569,4570,FieldReferenceMutator,tq,Stack,1,0.0076703075,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text<mask>.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
      "
636,Parser.java,parseStartTag,void parseStartTag(),130,135,4569,4570,FieldReferenceMutator,tq,node,2,0.005167538,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text<mask>.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
      "
637,Parser.java,parseStartTag,void parseStartTag(),130,135,4569,4570,FieldReferenceMutator,tq,tokens,3,0.0037321644,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text<mask>.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
      "
638,Parser.java,parseStartTag,void parseStartTag(),130,135,4569,4570,FieldReferenceMutator,tq,tags,4,0.002938447,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text<mask>.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
      "
639,Parser.java,parseStartTag,void parseStartTag(),130,135,4581,4586,IdentifierMutator-Literal,"""&lt;""",tag,0,0.40524802,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(<mask>);
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"""
640,Parser.java,parseStartTag,void parseStartTag(),130,135,4581,4586,IdentifierMutator-Literal,"""&lt;""",1,1,0.059821416,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(<mask>);
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"""
641,Parser.java,parseStartTag,void parseStartTag(),130,135,4581,4586,IdentifierMutator-Literal,"""&lt;""",this,2,0.047238946,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(<mask>);
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"""
642,Parser.java,parseStartTag,void parseStartTag(),130,135,4581,4586,IdentifierMutator-Literal,"""&lt;""",true,3,0.045004588,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(<mask>);
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"""
643,Parser.java,parseStartTag,void parseStartTag(),130,135,4581,4586,IdentifierMutator-Literal,"""&lt;""",null,4,0.042422082,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(<mask>);
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"""
644,Parser.java,parseStartTag,void parseStartTag(),130,136,4602,4614,MethodCallMutator,parseTextNode,parse,0,0.13271594,<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");<mask>();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
       "
645,Parser.java,parseStartTag,void parseStartTag(),130,136,4602,4614,MethodCallMutator,parseTextNode,close,1,0.09134099,<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");<mask>();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
       "
646,Parser.java,parseStartTag,void parseStartTag(),130,136,4602,4614,MethodCallMutator,parseTextNode,flush,2,0.05296498,<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");<mask>();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
       "
647,Parser.java,parseStartTag,void parseStartTag(),130,136,4602,4614,MethodCallMutator,parseTextNode,next,3,0.04344574,<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");<mask>();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
       "
648,Parser.java,parseStartTag,void parseStartTag(),130,136,4602,4614,MethodCallMutator,parseTextNode,pop,4,0.04023592,<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");<mask>();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
       "
649,Parser.java,parseStartTag,void parseStartTag(),130,141,4745,4748,BinaryOperatorMutator,&&,&,2,0.026453143,"(!tq.matchesAny(""<"", ""/>"", "">"")) <mask> (!tq.isEmpty())","void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"")<mask>!tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
650,Parser.java,parseStartTag,void parseStartTag(),130,141,4745,4748,BinaryOperatorMutator,&&,||,3,0.018672807,"(!tq.matchesAny(""<"", ""/>"", "">"")) <mask> (!tq.isEmpty())","void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"")<mask>!tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
651,Parser.java,parseStartTag,void parseStartTag(),130,141,4745,4748,BinaryOperatorMutator,&&,|,4,0.0058399513,"(!tq.matchesAny(""<"", ""/>"", "">"")) <mask> (!tq.isEmpty())","void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"")<mask>!tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
652,Parser.java,parseStartTag,void parseStartTag(),130,141,4715,4715,UnaryOperatorMutator,!,!!,2,0.0028122037,"<mask>tq.matchesAny(""<"", ""/>"", "">"")","void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (<mask>tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo"
653,Parser.java,parseStartTag,void parseStartTag(),130,141,4715,4715,UnaryOperatorMutator,!,...,3,0.0017071198,"<mask>tq.matchesAny(""<"", ""/>"", "">"")","void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (<mask>tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo"
654,Parser.java,parseStartTag,void parseStartTag(),130,141,4715,4715,UnaryOperatorMutator,!,?,4,8.3945476E-4,"<mask>tq.matchesAny(""<"", ""/>"", "">"")","void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (<mask>tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo"
655,Parser.java,parseStartTag,void parseStartTag(),130,141,4719,4728,MethodCallMutator,matchesAny,match,0,0.91679716,"tq.<mask>(""<"", ""/>"", "">"")","void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.<mask>(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"""
656,Parser.java,parseStartTag,void parseStartTag(),130,141,4719,4728,MethodCallMutator,matchesAny,matched,1,0.01574629,"tq.<mask>(""<"", ""/>"", "">"")","void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.<mask>(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"""
657,Parser.java,parseStartTag,void parseStartTag(),130,141,4719,4728,MethodCallMutator,matchesAny,any,2,0.008949132,"tq.<mask>(""<"", ""/>"", "">"")","void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.<mask>(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"""
658,Parser.java,parseStartTag,void parseStartTag(),130,141,4719,4728,MethodCallMutator,matchesAny,choice,3,0.0060284003,"tq.<mask>(""<"", ""/>"", "">"")","void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.<mask>(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"""
659,Parser.java,parseStartTag,void parseStartTag(),130,141,4719,4728,MethodCallMutator,matchesAny,is,4,0.005106449,"tq.<mask>(""<"", ""/>"", "">"")","void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.<mask>(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"""
660,Parser.java,parseStartTag,void parseStartTag(),130,141,4716,4717,IdentifierMutator-Variable,tq,tag,0,0.54352313,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!<mask>.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
661,Parser.java,parseStartTag,void parseStartTag(),130,141,4716,4717,IdentifierMutator-Variable,tq,tags,1,0.077253126,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!<mask>.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
662,Parser.java,parseStartTag,void parseStartTag(),130,141,4716,4717,IdentifierMutator-Variable,tq,attribute,2,0.051130194,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!<mask>.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
663,Parser.java,parseStartTag,void parseStartTag(),130,141,4716,4717,IdentifierMutator-Variable,tq,attr,3,0.04347921,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!<mask>.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
664,Parser.java,parseStartTag,void parseStartTag(),130,141,4716,4717,IdentifierMutator-Variable,tq,uri,4,0.039480522,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!<mask>.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
665,Parser.java,parseStartTag,void parseStartTag(),130,141,4716,4717,FieldReferenceMutator,tq,tag,0,0.54352313,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!<mask>.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
666,Parser.java,parseStartTag,void parseStartTag(),130,141,4716,4717,FieldReferenceMutator,tq,tags,1,0.077253126,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!<mask>.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
667,Parser.java,parseStartTag,void parseStartTag(),130,141,4716,4717,FieldReferenceMutator,tq,attribute,2,0.051130194,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!<mask>.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
668,Parser.java,parseStartTag,void parseStartTag(),130,141,4716,4717,FieldReferenceMutator,tq,attr,3,0.04347921,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!<mask>.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
669,Parser.java,parseStartTag,void parseStartTag(),130,141,4716,4717,FieldReferenceMutator,tq,uri,4,0.039480522,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!<mask>.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
670,Parser.java,parseStartTag,void parseStartTag(),130,141,4730,4732,IdentifierMutator-Literal,"""<""",tag,0,0.4598608,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(<mask>, ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
671,Parser.java,parseStartTag,void parseStartTag(),130,141,4730,4732,IdentifierMutator-Literal,"""<""",tags,1,0.030563867,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(<mask>, ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
672,Parser.java,parseStartTag,void parseStartTag(),130,141,4730,4732,IdentifierMutator-Literal,"""<""",attr,2,0.025910264,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(<mask>, ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
673,Parser.java,parseStartTag,void parseStartTag(),130,141,4730,4732,IdentifierMutator-Literal,"""<""",string,3,0.022737585,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(<mask>, ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
674,Parser.java,parseStartTag,void parseStartTag(),130,141,4730,4732,IdentifierMutator-Literal,"""<""",this,4,0.022295035,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(<mask>, ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
675,Parser.java,parseStartTag,void parseStartTag(),130,141,4735,4738,IdentifierMutator-Literal,"""/>""","""""",0,0.3143206,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"",<mask>, "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
676,Parser.java,parseStartTag,void parseStartTag(),130,141,4735,4738,IdentifierMutator-Literal,"""/>""",null,1,0.0898633,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"",<mask>, "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
677,Parser.java,parseStartTag,void parseStartTag(),130,141,4735,4738,IdentifierMutator-Literal,"""/>""",attributes,2,0.089260034,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"",<mask>, "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
678,Parser.java,parseStartTag,void parseStartTag(),130,141,4735,4738,IdentifierMutator-Literal,"""/>""",tag,3,0.075863175,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"",<mask>, "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
679,Parser.java,parseStartTag,void parseStartTag(),130,141,4735,4738,IdentifierMutator-Literal,"""/>""",true,4,0.07202466,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"",<mask>, "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
680,Parser.java,parseStartTag,void parseStartTag(),130,141,4741,4743,IdentifierMutator-Literal,""">""",attributes,0,0.39575613,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"",<mask>) && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
681,Parser.java,parseStartTag,void parseStartTag(),130,141,4741,4743,IdentifierMutator-Literal,""">""",true,1,0.15399572,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"",<mask>) && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
682,Parser.java,parseStartTag,void parseStartTag(),130,141,4741,4743,IdentifierMutator-Literal,""">""",false,2,0.111842535,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"",<mask>) && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
683,Parser.java,parseStartTag,void parseStartTag(),130,141,4741,4743,IdentifierMutator-Literal,""">""","""""",3,0.065944135,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"",<mask>) && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
684,Parser.java,parseStartTag,void parseStartTag(),130,141,4741,4743,IdentifierMutator-Literal,""">""",null,4,0.048985988,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"",<mask>) && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
685,Parser.java,parseStartTag,void parseStartTag(),130,141,4749,4749,UnaryOperatorMutator,!,(!,1,0.0037964436,<mask>tq.isEmpty(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") &&<mask>tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
686,Parser.java,parseStartTag,void parseStartTag(),130,141,4749,4749,UnaryOperatorMutator,!,(,3,4.2428976E-4,<mask>tq.isEmpty(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") &&<mask>tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
687,Parser.java,parseStartTag,void parseStartTag(),130,141,4749,4749,UnaryOperatorMutator,!,//,4,3.5336884E-4,<mask>tq.isEmpty(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") &&<mask>tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
688,Parser.java,parseStartTag,void parseStartTag(),130,141,4753,4759,MethodCallMutator,isEmpty,empty,0,0.43346378,tq.<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.<mask>()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
689,Parser.java,parseStartTag,void parseStartTag(),130,141,4753,4759,MethodCallMutator,isEmpty,finished,1,0.14133705,tq.<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.<mask>()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
690,Parser.java,parseStartTag,void parseStartTag(),130,141,4753,4759,MethodCallMutator,isEmpty,done,2,0.044515006,tq.<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.<mask>()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
691,Parser.java,parseStartTag,void parseStartTag(),130,141,4753,4759,MethodCallMutator,isEmpty,space,3,0.032716177,tq.<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.<mask>()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
692,Parser.java,parseStartTag,void parseStartTag(),130,141,4753,4759,MethodCallMutator,isEmpty,blank,4,0.029877754,tq.<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.<mask>()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
693,Parser.java,parseStartTag,void parseStartTag(),130,141,4750,4751,IdentifierMutator-Variable,tq,attributes,0,0.8451718,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !<mask>.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
694,Parser.java,parseStartTag,void parseStartTag(),130,141,4750,4751,IdentifierMutator-Variable,tq,attribute,1,0.06265244,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !<mask>.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
695,Parser.java,parseStartTag,void parseStartTag(),130,141,4750,4751,IdentifierMutator-Variable,tq,Attributes,2,0.025329836,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !<mask>.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
696,Parser.java,parseStartTag,void parseStartTag(),130,141,4750,4751,IdentifierMutator-Variable,tq,attribute,3,0.014265192,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !<mask>.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
697,Parser.java,parseStartTag,void parseStartTag(),130,141,4750,4751,IdentifierMutator-Variable,tq,ributes,4,0.01332216,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !<mask>.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
698,Parser.java,parseStartTag,void parseStartTag(),130,141,4750,4751,FieldReferenceMutator,tq,attributes,0,0.8451718,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !<mask>.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
699,Parser.java,parseStartTag,void parseStartTag(),130,141,4750,4751,FieldReferenceMutator,tq,attribute,1,0.06265244,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !<mask>.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
700,Parser.java,parseStartTag,void parseStartTag(),130,141,4750,4751,FieldReferenceMutator,tq,Attributes,2,0.025329836,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !<mask>.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
701,Parser.java,parseStartTag,void parseStartTag(),130,141,4750,4751,FieldReferenceMutator,tq,attribute,3,0.014265192,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !<mask>.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
702,Parser.java,parseStartTag,void parseStartTag(),130,141,4750,4751,FieldReferenceMutator,tq,ributes,4,0.01332216,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !<mask>.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
703,Parser.java,parseStartTag,void parseStartTag(),130,142,4800,4813,MethodCallMutator,parseAttribute,next,0,0.7103925,<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute =<mask>();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
704,Parser.java,parseStartTag,void parseStartTag(),130,142,4800,4813,MethodCallMutator,parseAttribute,current,1,0.118913054,<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute =<mask>();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
705,Parser.java,parseStartTag,void parseStartTag(),130,142,4800,4813,MethodCallMutator,parseAttribute,pop,2,0.017910535,<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute =<mask>();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
706,Parser.java,parseStartTag,void parseStartTag(),130,142,4800,4813,MethodCallMutator,parseAttribute,first,3,0.01633179,<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute =<mask>();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
707,Parser.java,parseStartTag,void parseStartTag(),130,142,4800,4813,MethodCallMutator,parseAttribute,parse,4,0.011067633,<mask>(),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute =<mask>();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"
708,Parser.java,parseStartTag,void parseStartTag(),130,143,4843,4846,BinaryOperatorMutator,!=,==,1,0.3953597,attribute <mask> null,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute<mask>null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
709,Parser.java,parseStartTag,void parseStartTag(),130,143,4843,4846,BinaryOperatorMutator,!=,=,2,0.16944475,attribute <mask> null,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute<mask>null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
710,Parser.java,parseStartTag,void parseStartTag(),130,143,4843,4846,BinaryOperatorMutator,!=,.,3,0.008399022,attribute <mask> null,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute<mask>null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
711,Parser.java,parseStartTag,void parseStartTag(),130,143,4843,4846,BinaryOperatorMutator,!=,==,4,0.0034859139,attribute <mask> null,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute<mask>null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
712,Parser.java,parseStartTag,void parseStartTag(),130,143,4834,4842,IdentifierMutator-Variable,attribute,attr,1,8.702437E-4,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (<mask> != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
713,Parser.java,parseStartTag,void parseStartTag(),130,143,4834,4842,IdentifierMutator-Variable,attribute,Attribute,3,3.1937083E-4,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (<mask> != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
714,Parser.java,parseStartTag,void parseStartTag(),130,143,4834,4842,IdentifierMutator-Variable,attribute,value,4,3.6918416E-5,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (<mask> != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
715,Parser.java,parseStartTag,void parseStartTag(),130,143,4847,4850,IdentifierMutator-Literal,null,NULL,1,3.0329294E-4,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute !=<mask>)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
716,Parser.java,parseStartTag,void parseStartTag(),130,143,4847,4850,IdentifierMutator-Literal,null,this,3,2.8118308E-4,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute !=<mask>)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
717,Parser.java,parseStartTag,void parseStartTag(),130,143,4847,4850,IdentifierMutator-Literal,null,nil,4,2.1511142E-4,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute !=<mask>)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
718,Parser.java,parseStartTag,void parseStartTag(),130,144,4880,4882,MethodCallMutator,put,add,0,0.8780009,attributes.<mask>(attribute),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.<mask>(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
719,Parser.java,parseStartTag,void parseStartTag(),130,144,4880,4882,MethodCallMutator,put,append,1,0.071661815,attributes.<mask>(attribute),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.<mask>(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
720,Parser.java,parseStartTag,void parseStartTag(),130,144,4880,4882,MethodCallMutator,put,push,2,0.020505583,attributes.<mask>(attribute),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.<mask>(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
721,Parser.java,parseStartTag,void parseStartTag(),130,144,4880,4882,MethodCallMutator,put,add,3,0.0060950946,attributes.<mask>(attribute),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.<mask>(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
722,Parser.java,parseStartTag,void parseStartTag(),130,144,4880,4882,MethodCallMutator,put,update,4,0.004018704,attributes.<mask>(attribute),"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.<mask>(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
723,Parser.java,parseStartTag,void parseStartTag(),130,144,4869,4878,IdentifierMutator-Variable,attributes,attribute,1,6.7360065E-4,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)<mask>.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
         "
724,Parser.java,parseStartTag,void parseStartTag(),130,144,4869,4878,IdentifierMutator-Variable,attributes,ributes,2,4.356332E-4,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)<mask>.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
         "
725,Parser.java,parseStartTag,void parseStartTag(),130,144,4869,4878,IdentifierMutator-Variable,attributes,Attributes,3,1.5505009E-4,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)<mask>.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
         "
726,Parser.java,parseStartTag,void parseStartTag(),130,144,4869,4878,IdentifierMutator-Variable,attributes,Attributes,4,6.2836465E-5,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)<mask>.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
         "
727,Parser.java,parseStartTag,void parseStartTag(),130,144,4884,4892,IdentifierMutator-Variable,attribute,Attribute,2,8.718554E-4,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(<mask>);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
728,Parser.java,parseStartTag,void parseStartTag(),130,144,4884,4892,IdentifierMutator-Variable,attribute,attr,3,2.920556E-4,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(<mask>);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
729,Parser.java,parseStartTag,void parseStartTag(),130,144,4884,4892,IdentifierMutator-Variable,attribute,tag,4,1.3839373E-4,<mask>,"void parseStartTag() {
        tq.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(<mask>);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo("""
730,Parser.java,parseStartTag,void parseStartTag(),130,147,4929,4935,MethodCallMutator,valueOf,create,0,0.5622251,Tag.<mask>(tagName),"q.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.<mask>(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
         "
731,Parser.java,parseStartTag,void parseStartTag(),130,147,4929,4935,MethodCallMutator,valueOf,parse,1,0.0906408,Tag.<mask>(tagName),"q.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.<mask>(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
         "
732,Parser.java,parseStartTag,void parseStartTag(),130,147,4929,4935,MethodCallMutator,valueOf,new,2,0.04120046,Tag.<mask>(tagName),"q.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.<mask>(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
         "
733,Parser.java,parseStartTag,void parseStartTag(),130,147,4929,4935,MethodCallMutator,valueOf,get,3,0.040520374,Tag.<mask>(tagName),"q.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.<mask>(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
         "
734,Parser.java,parseStartTag,void parseStartTag(),130,147,4929,4935,MethodCallMutator,valueOf,parse,4,0.024928194,Tag.<mask>(tagName),"q.consume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.<mask>(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
         "
735,Parser.java,parseStartTag,void parseStartTag(),130,147,4937,4943,IdentifierMutator-Variable,tagName,tag,0,0.62614244,<mask>,"ume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(<mask>);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            t"
736,Parser.java,parseStartTag,void parseStartTag(),130,147,4937,4943,IdentifierMutator-Variable,tagName,name,1,0.12462398,<mask>,"ume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(<mask>);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            t"
737,Parser.java,parseStartTag,void parseStartTag(),130,147,4937,4943,IdentifierMutator-Variable,tagName,attribute,2,0.095547594,<mask>,"ume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(<mask>);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            t"
738,Parser.java,parseStartTag,void parseStartTag(),130,147,4937,4943,IdentifierMutator-Variable,tagName,attr,3,0.03780738,<mask>,"ume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(<mask>);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            t"
739,Parser.java,parseStartTag,void parseStartTag(),130,147,4937,4943,IdentifierMutator-Variable,tagName,type,4,0.008855499,<mask>,"ume(""<"");
        String tagName = tq.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(<mask>);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            t"
740,Parser.java,parseStartTag,void parseStartTag(),130,148,4983,4985,IdentifierMutator-Variable,tag,name,1,0.071795076,<mask>,"q.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(<mask>, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
       "
741,Parser.java,parseStartTag,void parseStartTag(),130,148,4983,4985,IdentifierMutator-Variable,tag,uri,2,0.04947111,<mask>,"q.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(<mask>, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
       "
742,Parser.java,parseStartTag,void parseStartTag(),130,148,4983,4985,IdentifierMutator-Variable,tag,prefix,3,0.016673086,<mask>,"q.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(<mask>, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
       "
743,Parser.java,parseStartTag,void parseStartTag(),130,148,4983,4985,IdentifierMutator-Variable,tag,path,4,0.012508996,<mask>,"q.consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(<mask>, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
       "
744,Parser.java,parseStartTag,void parseStartTag(),130,148,4988,4994,IdentifierMutator-Variable,baseUri,tag,0,0.39525387,<mask>,"consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag,<mask>, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
           "
745,Parser.java,parseStartTag,void parseStartTag(),130,148,4988,4994,IdentifierMutator-Variable,baseUri,null,1,0.12079776,<mask>,"consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag,<mask>, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
           "
746,Parser.java,parseStartTag,void parseStartTag(),130,148,4988,4994,IdentifierMutator-Variable,baseUri,name,2,0.080731384,<mask>,"consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag,<mask>, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
           "
747,Parser.java,parseStartTag,void parseStartTag(),130,148,4988,4994,IdentifierMutator-Variable,baseUri,text,3,0.07414853,<mask>,"consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag,<mask>, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
           "
748,Parser.java,parseStartTag,void parseStartTag(),130,148,4988,4994,IdentifierMutator-Variable,baseUri,content,4,0.028516877,<mask>,"consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag,<mask>, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
           "
749,Parser.java,parseStartTag,void parseStartTag(),130,148,4988,4994,FieldReferenceMutator,baseUri,tag,0,0.39525387,<mask>,"consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag,<mask>, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
           "
750,Parser.java,parseStartTag,void parseStartTag(),130,148,4988,4994,FieldReferenceMutator,baseUri,null,1,0.12079776,<mask>,"consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag,<mask>, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
           "
751,Parser.java,parseStartTag,void parseStartTag(),130,148,4988,4994,FieldReferenceMutator,baseUri,name,2,0.080731384,<mask>,"consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag,<mask>, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
           "
752,Parser.java,parseStartTag,void parseStartTag(),130,148,4988,4994,FieldReferenceMutator,baseUri,text,3,0.07414853,<mask>,"consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag,<mask>, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
           "
753,Parser.java,parseStartTag,void parseStartTag(),130,148,4988,4994,FieldReferenceMutator,baseUri,content,4,0.028516877,<mask>,"consumeWord();

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag,<mask>, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
           "
754,Parser.java,parseStartTag,void parseStartTag(),130,148,4997,5006,IdentifierMutator-Variable,attributes,null,1,0.055220913,<mask>,"

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri,<mask>);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStack"
755,Parser.java,parseStartTag,void parseStartTag(),130,148,4997,5006,IdentifierMutator-Variable,attributes,false,2,0.042687576,<mask>,"

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri,<mask>);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStack"
756,Parser.java,parseStartTag,void parseStartTag(),130,148,4997,5006,IdentifierMutator-Variable,attributes,true,3,0.032197297,<mask>,"

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri,<mask>);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStack"
757,Parser.java,parseStartTag,void parseStartTag(),130,148,4997,5006,IdentifierMutator-Variable,attributes,name,4,0.03161278,<mask>,"

        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri,<mask>);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStack"
758,Parser.java,parseStartTag,void parseStartTag(),130,150,5048,5054,MethodCallMutator,isEmpty,empty,0,0.8975228,tag.<mask>(),") { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.<mask>(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            "
759,Parser.java,parseStartTag,void parseStartTag(),130,150,5048,5054,MethodCallMutator,isEmpty,is,1,0.049239203,tag.<mask>(),") { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.<mask>(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            "
760,Parser.java,parseStartTag,void parseStartTag(),130,150,5048,5054,MethodCallMutator,isEmpty,close,2,0.010095923,tag.<mask>(),") { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.<mask>(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            "
761,Parser.java,parseStartTag,void parseStartTag(),130,150,5048,5054,MethodCallMutator,isEmpty,blank,3,0.007932047,tag.<mask>(),") { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.<mask>(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            "
762,Parser.java,parseStartTag,void parseStartTag(),130,150,5048,5054,MethodCallMutator,isEmpty,open,4,0.0030463287,tag.<mask>(),") { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.<mask>(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            "
763,Parser.java,parseStartTag,void parseStartTag(),130,150,5044,5046,IdentifierMutator-Variable,tag,child,0,0.8163278,<mask>," == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement =<mask>.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
         "
764,Parser.java,parseStartTag,void parseStartTag(),130,150,5044,5046,IdentifierMutator-Variable,tag,element,2,0.008903746,<mask>," == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement =<mask>.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
         "
765,Parser.java,parseStartTag,void parseStartTag(),130,150,5044,5046,IdentifierMutator-Variable,tag,parent,3,0.0073904735,<mask>," == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement =<mask>.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
         "
766,Parser.java,parseStartTag,void parseStartTag(),130,150,5044,5046,IdentifierMutator-Variable,tag,root,4,0.0041744355,<mask>," == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text
            tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement =<mask>.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
         "
767,Parser.java,parseStartTag,void parseStartTag(),130,151,5141,5150,MethodCallMutator,matchChomp,match,0,0.87358904,"tq.<mask>(""/>"")","addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.<mask>(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag)"
768,Parser.java,parseStartTag,void parseStartTag(),130,151,5141,5150,MethodCallMutator,matchChomp,has,1,0.024642013,"tq.<mask>(""/>"")","addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.<mask>(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag)"
769,Parser.java,parseStartTag,void parseStartTag(),130,151,5141,5150,MethodCallMutator,matchChomp,is,2,0.022542246,"tq.<mask>(""/>"")","addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.<mask>(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag)"
770,Parser.java,parseStartTag,void parseStartTag(),130,151,5141,5150,MethodCallMutator,matchChomp,matched,3,0.019247746,"tq.<mask>(""/>"")","addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.<mask>(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag)"
771,Parser.java,parseStartTag,void parseStartTag(),130,151,5141,5150,MethodCallMutator,matchChomp,remove,4,0.003825738,"tq.<mask>(""/>"")","addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.<mask>(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag)"
772,Parser.java,parseStartTag,void parseStartTag(),130,151,5138,5139,IdentifierMutator-Variable,tq,tag,0,0.9737328,<mask>," tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (<mask>.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals"
773,Parser.java,parseStartTag,void parseStartTag(),130,151,5138,5139,IdentifierMutator-Variable,tq,tf,1,0.006964963,<mask>," tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (<mask>.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals"
774,Parser.java,parseStartTag,void parseStartTag(),130,151,5138,5139,IdentifierMutator-Variable,tq,tc,2,0.0032797903,<mask>," tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (<mask>.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals"
775,Parser.java,parseStartTag,void parseStartTag(),130,151,5138,5139,IdentifierMutator-Variable,tq,child,3,0.00186859,<mask>," tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (<mask>.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals"
776,Parser.java,parseStartTag,void parseStartTag(),130,151,5138,5139,IdentifierMutator-Variable,tq,q,4,0.0014635433,<mask>," tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (<mask>.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals"
777,Parser.java,parseStartTag,void parseStartTag(),130,151,5138,5139,FieldReferenceMutator,tq,tag,0,0.9737328,<mask>," tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (<mask>.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals"
778,Parser.java,parseStartTag,void parseStartTag(),130,151,5138,5139,FieldReferenceMutator,tq,tf,1,0.006964963,<mask>," tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (<mask>.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals"
779,Parser.java,parseStartTag,void parseStartTag(),130,151,5138,5139,FieldReferenceMutator,tq,tc,2,0.0032797903,<mask>," tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (<mask>.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals"
780,Parser.java,parseStartTag,void parseStartTag(),130,151,5138,5139,FieldReferenceMutator,tq,child,3,0.00186859,<mask>," tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (<mask>.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals"
781,Parser.java,parseStartTag,void parseStartTag(),130,151,5138,5139,FieldReferenceMutator,tq,q,4,0.0014635433,<mask>," tq.addFirst(""&lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (<mask>.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals"
782,Parser.java,parseStartTag,void parseStartTag(),130,151,5152,5155,IdentifierMutator-Literal,"""/>""",""">",0,0.27372164,<mask>,"lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(<mask>)) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag"
783,Parser.java,parseStartTag,void parseStartTag(),130,151,5152,5155,IdentifierMutator-Literal,"""/>""","''",1,0.19869341,<mask>,"lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(<mask>)) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag"
784,Parser.java,parseStartTag,void parseStartTag(),130,151,5152,5155,IdentifierMutator-Literal,"""/>""",tag,2,0.10470726,<mask>,"lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(<mask>)) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag"
785,Parser.java,parseStartTag,void parseStartTag(),130,151,5152,5155,IdentifierMutator-Literal,"""/>""","""",3,0.057597753,<mask>,"lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(<mask>)) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag"
786,Parser.java,parseStartTag,void parseStartTag(),130,151,5152,5155,IdentifierMutator-Literal,"""/>""","\""",4,0.052515022,<mask>,"lt;"");
            parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(<mask>)) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag"
787,Parser.java,parseStartTag,void parseStartTag(),130,152,5217,5217,AssignmentMutator,isEmptyElement=true,|,0,0.8205974,isEmptyElement <mask>= true,"        return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement<mask>= true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not"
788,Parser.java,parseStartTag,void parseStartTag(),130,152,5217,5217,AssignmentMutator,isEmptyElement=true,&,1,0.10609496,isEmptyElement <mask>= true,"        return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement<mask>= true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not"
789,Parser.java,parseStartTag,void parseStartTag(),130,152,5217,5217,AssignmentMutator,isEmptyElement=true,||,2,0.03277491,isEmptyElement <mask>= true,"        return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement<mask>= true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not"
790,Parser.java,parseStartTag,void parseStartTag(),130,152,5217,5217,AssignmentMutator,isEmptyElement=true,*,3,0.01313064,isEmptyElement <mask>= true,"        return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement<mask>= true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not"
791,Parser.java,parseStartTag,void parseStartTag(),130,152,5217,5217,AssignmentMutator,isEmptyElement=true,^,4,0.009258617,isEmptyElement <mask>= true,"        return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement<mask>= true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not"
792,Parser.java,parseStartTag,void parseStartTag(),130,152,5203,5216,IdentifierMutator-Variable,isEmptyElement,closed,0,0.4380302,<mask>,"       parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag<mask> = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not"
793,Parser.java,parseStartTag,void parseStartTag(),130,152,5203,5216,IdentifierMutator-Variable,isEmptyElement,close,1,0.22330402,<mask>,"       parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag<mask> = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not"
794,Parser.java,parseStartTag,void parseStartTag(),130,152,5203,5216,IdentifierMutator-Variable,isEmptyElement,closing,2,0.13019308,<mask>,"       parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag<mask> = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not"
795,Parser.java,parseStartTag,void parseStartTag(),130,152,5203,5216,IdentifierMutator-Variable,isEmptyElement,Close,3,0.047236394,<mask>,"       parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag<mask> = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not"
796,Parser.java,parseStartTag,void parseStartTag(),130,152,5203,5216,IdentifierMutator-Variable,isEmptyElement,osing,4,0.013932457,<mask>,"       parseTextNode();
            return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag<mask> = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not"
797,Parser.java,parseStartTag,void parseStartTag(),130,152,5220,5223,IdentifierMutator-Literal,true,false,0,0.7535277,<mask>,"       return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement =<mask>;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data"
798,Parser.java,parseStartTag,void parseStartTag(),130,152,5220,5223,IdentifierMutator-Literal,true,null,2,0.0011035445,<mask>,"       return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement =<mask>;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data"
799,Parser.java,parseStartTag,void parseStartTag(),130,152,5220,5223,IdentifierMutator-Literal,true,FALSE,3,7.6255866E-4,<mask>,"       return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement =<mask>;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data"
800,Parser.java,parseStartTag,void parseStartTag(),130,152,5220,5223,IdentifierMutator-Literal,true,TRUE,4,5.389954E-4,<mask>,"       return;
        }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement =<mask>;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data"
801,Parser.java,parseStartTag,void parseStartTag(),130,154,5258,5267,MethodCallMutator,matchChomp,append,0,0.3397414,"tq.<mask>("">"")"," new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.<mask>("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data"
802,Parser.java,parseStartTag,void parseStartTag(),130,154,5258,5267,MethodCallMutator,matchChomp,push,1,0.26398396,"tq.<mask>("">"")"," new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.<mask>("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data"
803,Parser.java,parseStartTag,void parseStartTag(),130,154,5258,5267,MethodCallMutator,matchChomp,text,2,0.0319724,"tq.<mask>("">"")"," new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.<mask>("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data"
804,Parser.java,parseStartTag,void parseStartTag(),130,154,5258,5267,MethodCallMutator,matchChomp,delete,3,0.025097292,"tq.<mask>("">"")"," new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.<mask>("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data"
805,Parser.java,parseStartTag,void parseStartTag(),130,154,5258,5267,MethodCallMutator,matchChomp,close,4,0.022731928,"tq.<mask>("">"")"," new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.<mask>("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data"
806,Parser.java,parseStartTag,void parseStartTag(),130,154,5255,5256,IdentifierMutator-Variable,tq,tag,0,0.546624,<mask>,"    }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {<mask>.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFrom"
807,Parser.java,parseStartTag,void parseStartTag(),130,154,5255,5256,IdentifierMutator-Variable,tq,tag,1,0.36589146,<mask>,"    }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {<mask>.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFrom"
808,Parser.java,parseStartTag,void parseStartTag(),130,154,5255,5256,IdentifierMutator-Variable,tq,q,2,0.010211132,<mask>,"    }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {<mask>.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFrom"
809,Parser.java,parseStartTag,void parseStartTag(),130,154,5255,5256,IdentifierMutator-Variable,tq,q,3,0.007195255,<mask>,"    }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {<mask>.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFrom"
810,Parser.java,parseStartTag,void parseStartTag(),130,154,5255,5256,IdentifierMutator-Variable,tq,child,4,0.0069468636,<mask>,"    }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {<mask>.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFrom"
811,Parser.java,parseStartTag,void parseStartTag(),130,154,5255,5256,FieldReferenceMutator,tq,tag,0,0.546624,<mask>,"    }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {<mask>.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFrom"
812,Parser.java,parseStartTag,void parseStartTag(),130,154,5255,5256,FieldReferenceMutator,tq,tag,1,0.36589146,<mask>,"    }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {<mask>.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFrom"
813,Parser.java,parseStartTag,void parseStartTag(),130,154,5255,5256,FieldReferenceMutator,tq,q,2,0.010211132,<mask>,"    }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {<mask>.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFrom"
814,Parser.java,parseStartTag,void parseStartTag(),130,154,5255,5256,FieldReferenceMutator,tq,q,3,0.007195255,<mask>,"    }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {<mask>.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFrom"
815,Parser.java,parseStartTag,void parseStartTag(),130,154,5255,5256,FieldReferenceMutator,tq,child,4,0.0069468636,<mask>,"    }

        Attributes attributes = new Attributes();
        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {<mask>.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFrom"
816,Parser.java,parseStartTag,void parseStartTag(),130,154,5269,5271,IdentifierMutator-Literal,""">""",tag,0,0.5454846,<mask>,"        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp(<mask>);
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, base"
817,Parser.java,parseStartTag,void parseStartTag(),130,154,5269,5271,IdentifierMutator-Literal,""">""","''",1,0.06095604,<mask>,"        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp(<mask>);
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, base"
818,Parser.java,parseStartTag,void parseStartTag(),130,154,5269,5271,IdentifierMutator-Literal,""">""",true,2,0.027349243,<mask>,"        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp(<mask>);
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, base"
819,Parser.java,parseStartTag,void parseStartTag(),130,154,5269,5271,IdentifierMutator-Literal,""">""",1,3,0.019764142,<mask>,"        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp(<mask>);
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, base"
820,Parser.java,parseStartTag,void parseStartTag(),130,154,5269,5271,IdentifierMutator-Literal,""">""",q,4,0.013885283,<mask>,"        while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp(<mask>);
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, base"
821,Parser.java,parseStartTag,void parseStartTag(),130,156,5293,5308,MethodCallMutator,addChildToParent,close,0,0.31482017,"<mask>(child, isEmptyElement)",".matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }<mask>(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
     "
822,Parser.java,parseStartTag,void parseStartTag(),130,156,5293,5308,MethodCallMutator,addChildToParent,push,1,0.18368325,"<mask>(child, isEmptyElement)",".matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }<mask>(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
     "
823,Parser.java,parseStartTag,void parseStartTag(),130,156,5293,5308,MethodCallMutator,addChildToParent,append,2,0.07889735,"<mask>(child, isEmptyElement)",".matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }<mask>(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
     "
824,Parser.java,parseStartTag,void parseStartTag(),130,156,5293,5308,MethodCallMutator,addChildToParent,add,3,0.07688961,"<mask>(child, isEmptyElement)",".matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }<mask>(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
     "
825,Parser.java,parseStartTag,void parseStartTag(),130,156,5293,5308,MethodCallMutator,addChildToParent,finish,4,0.022210069,"<mask>(child, isEmptyElement)",".matchesAny(""<"", ""/>"", "">"") && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }<mask>(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
     "
826,Parser.java,parseStartTag,void parseStartTag(),130,156,5310,5314,IdentifierMutator-Variable,child,tag,1,0.015695732,<mask>," && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(<mask>, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
       "
827,Parser.java,parseStartTag,void parseStartTag(),130,156,5310,5314,IdentifierMutator-Variable,child,parent,2,0.0019900152,<mask>," && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(<mask>, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
       "
828,Parser.java,parseStartTag,void parseStartTag(),130,156,5310,5314,IdentifierMutator-Variable,child,this,3,4.3272754E-4,<mask>," && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(<mask>, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
       "
829,Parser.java,parseStartTag,void parseStartTag(),130,156,5310,5314,IdentifierMutator-Variable,child,element,4,3.719978E-4,<mask>," && !tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(<mask>, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
       "
830,Parser.java,parseStartTag,void parseStartTag(),130,156,5317,5330,IdentifierMutator-Variable,isEmptyElement,tag,0,0.5833078,<mask>,"tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child,<mask>);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
           "
831,Parser.java,parseStartTag,void parseStartTag(),130,156,5317,5330,IdentifierMutator-Variable,isEmptyElement,parent,1,0.16114932,<mask>,"tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child,<mask>);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
           "
832,Parser.java,parseStartTag,void parseStartTag(),130,156,5317,5330,IdentifierMutator-Variable,isEmptyElement,true,2,0.06399016,<mask>,"tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child,<mask>);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
           "
833,Parser.java,parseStartTag,void parseStartTag(),130,156,5317,5330,IdentifierMutator-Variable,isEmptyElement,false,3,0.04369492,<mask>,"tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child,<mask>);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
           "
834,Parser.java,parseStartTag,void parseStartTag(),130,156,5317,5330,IdentifierMutator-Variable,isEmptyElement,null,4,0.016887007,<mask>,"tq.isEmpty()) {
            Attribute attribute = parseAttribute();
            if (attribute != null)
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child,<mask>);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
           "
835,Parser.java,parseStartTag,void parseStartTag(),130,159,5443,5448,MethodCallMutator,isData,empty,0,0.30069768,tag.<mask>(),"               attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.<mask>()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild"
836,Parser.java,parseStartTag,void parseStartTag(),130,159,5443,5448,MethodCallMutator,isData,data,1,0.0942342,tag.<mask>(),"               attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.<mask>()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild"
837,Parser.java,parseStartTag,void parseStartTag(),130,159,5443,5448,MethodCallMutator,isData,text,2,0.06364395,tag.<mask>(),"               attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.<mask>()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild"
838,Parser.java,parseStartTag,void parseStartTag(),130,159,5443,5448,MethodCallMutator,isData,content,3,0.040548954,tag.<mask>(),"               attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.<mask>()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild"
839,Parser.java,parseStartTag,void parseStartTag(),130,159,5443,5448,MethodCallMutator,isData,close,4,0.020214077,tag.<mask>(),"               attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.<mask>()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild"
840,Parser.java,parseStartTag,void parseStartTag(),130,159,5439,5441,IdentifierMutator-Variable,tag,child,1,0.007077988,<mask>,"
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (<mask>.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child"
841,Parser.java,parseStartTag,void parseStartTag(),130,159,5439,5441,IdentifierMutator-Variable,tag,Tag,2,0.004111544,<mask>,"
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (<mask>.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child"
842,Parser.java,parseStartTag,void parseStartTag(),130,159,5439,5441,IdentifierMutator-Variable,tag,parent,3,0.0036257026,<mask>,"
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (<mask>.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child"
843,Parser.java,parseStartTag,void parseStartTag(),130,159,5439,5441,IdentifierMutator-Variable,tag,this,4,0.0031032248,<mask>,"
                attributes.put(attribute);
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (<mask>.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child"
844,Parser.java,parseStartTag,void parseStartTag(),130,160,5484,5490,MethodCallMutator,chompTo,join,0,0.26105252,"tq.<mask>(""</"" + tagName)","       }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.<mask>(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

      "
845,Parser.java,parseStartTag,void parseStartTag(),130,160,5484,5490,MethodCallMutator,chompTo,replace,1,0.15170732,"tq.<mask>(""</"" + tagName)","       }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.<mask>(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

      "
846,Parser.java,parseStartTag,void parseStartTag(),130,160,5484,5490,MethodCallMutator,chompTo,match,2,0.05987722,"tq.<mask>(""</"" + tagName)","       }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.<mask>(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

      "
847,Parser.java,parseStartTag,void parseStartTag(),130,160,5484,5490,MethodCallMutator,chompTo,split,3,0.04311643,"tq.<mask>(""</"" + tagName)","       }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.<mask>(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

      "
848,Parser.java,parseStartTag,void parseStartTag(),130,160,5484,5490,MethodCallMutator,chompTo,until,4,0.03376433,"tq.<mask>(""</"" + tagName)","       }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.<mask>(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

      "
849,Parser.java,parseStartTag,void parseStartTag(),130,160,5481,5482,IdentifierMutator-Variable,tq,tag,0,0.93739647,<mask>,");
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data =<mask>.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

  "
850,Parser.java,parseStartTag,void parseStartTag(),130,160,5481,5482,IdentifierMutator-Variable,tq,child,1,0.010471904,<mask>,");
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data =<mask>.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

  "
851,Parser.java,parseStartTag,void parseStartTag(),130,160,5481,5482,IdentifierMutator-Variable,tq,html,2,0.0054807896,<mask>,");
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data =<mask>.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

  "
852,Parser.java,parseStartTag,void parseStartTag(),130,160,5481,5482,IdentifierMutator-Variable,tq,text,3,0.0028283484,<mask>,");
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data =<mask>.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

  "
853,Parser.java,parseStartTag,void parseStartTag(),130,160,5481,5482,IdentifierMutator-Variable,tq,tags,4,0.0021794923,<mask>,");
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data =<mask>.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

  "
854,Parser.java,parseStartTag,void parseStartTag(),130,160,5481,5482,FieldReferenceMutator,tq,tag,0,0.93739647,<mask>,");
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data =<mask>.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

  "
855,Parser.java,parseStartTag,void parseStartTag(),130,160,5481,5482,FieldReferenceMutator,tq,child,1,0.010471904,<mask>,");
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data =<mask>.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

  "
856,Parser.java,parseStartTag,void parseStartTag(),130,160,5481,5482,FieldReferenceMutator,tq,html,2,0.0054807896,<mask>,");
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data =<mask>.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

  "
857,Parser.java,parseStartTag,void parseStartTag(),130,160,5481,5482,FieldReferenceMutator,tq,text,3,0.0028283484,<mask>,");
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data =<mask>.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

  "
858,Parser.java,parseStartTag,void parseStartTag(),130,160,5481,5482,FieldReferenceMutator,tq,tags,4,0.0021794923,<mask>,");
        }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data =<mask>.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

  "
859,Parser.java,parseStartTag,void parseStartTag(),130,160,5496,5498,BinaryOperatorMutator,+,"""+",2,0.00801281,"""</"" <mask> tagName"," }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</""<mask>tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base"
860,Parser.java,parseStartTag,void parseStartTag(),130,160,5496,5498,BinaryOperatorMutator,+,+.,3,2.8175785E-4,"""</"" <mask> tagName"," }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</""<mask>tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base"
861,Parser.java,parseStartTag,void parseStartTag(),130,160,5496,5498,BinaryOperatorMutator,+,)(,4,1.3437693E-4,"""</"" <mask> tagName"," }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</""<mask>tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base"
862,Parser.java,parseStartTag,void parseStartTag(),130,160,5492,5495,IdentifierMutator-Literal,"""</""","""",0,0.32849285,<mask>,"   }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(<mask> + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <"
863,Parser.java,parseStartTag,void parseStartTag(),130,160,5492,5495,IdentifierMutator-Literal,"""</""",""">",1,0.21061389,<mask>,"   }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(<mask> + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <"
864,Parser.java,parseStartTag,void parseStartTag(),130,160,5492,5495,IdentifierMutator-Literal,"""</""","""""",2,0.072920166,<mask>,"   }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(<mask> + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <"
865,Parser.java,parseStartTag,void parseStartTag(),130,160,5492,5495,IdentifierMutator-Literal,"""</""","''",3,0.06757281,<mask>,"   }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(<mask> + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <"
866,Parser.java,parseStartTag,void parseStartTag(),130,160,5492,5495,IdentifierMutator-Literal,"""</""","\""",4,0.04276331,<mask>,"   }

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(<mask> + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <"
867,Parser.java,parseStartTag,void parseStartTag(),130,160,5499,5505,IdentifierMutator-Variable,tagName,tag,0,0.97728443,<mask>,"

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" +<mask>);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>:"
868,Parser.java,parseStartTag,void parseStartTag(),130,160,5499,5505,IdentifierMutator-Variable,tagName,content,1,0.0021404386,<mask>,"

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" +<mask>);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>:"
869,Parser.java,parseStartTag,void parseStartTag(),130,160,5499,5505,IdentifierMutator-Variable,tagName,html,2,0.0020411902,<mask>,"

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" +<mask>);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>:"
870,Parser.java,parseStartTag,void parseStartTag(),130,160,5499,5505,IdentifierMutator-Variable,tagName,text,3,0.0019646303,<mask>,"

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" +<mask>);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>:"
871,Parser.java,parseStartTag,void parseStartTag(),130,160,5499,5505,IdentifierMutator-Variable,tagName,name,4,0.0010699526,<mask>,"

        Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" +<mask>);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>:"
872,Parser.java,parseStartTag,void parseStartTag(),130,161,5524,5530,MethodCallMutator,chompTo,push,0,0.39087173,"tq.<mask>("">"")",");
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.<mask>("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName"
873,Parser.java,parseStartTag,void parseStartTag(),130,161,5524,5530,MethodCallMutator,chompTo,append,1,0.24304567,"tq.<mask>("">"")",");
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.<mask>("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName"
874,Parser.java,parseStartTag,void parseStartTag(),130,161,5524,5530,MethodCallMutator,chompTo,match,2,0.083522104,"tq.<mask>("">"")",");
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.<mask>("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName"
875,Parser.java,parseStartTag,void parseStartTag(),130,161,5524,5530,MethodCallMutator,chompTo,write,3,0.032651313,"tq.<mask>("">"")",");
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.<mask>("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName"
876,Parser.java,parseStartTag,void parseStartTag(),130,161,5524,5530,MethodCallMutator,chompTo,pop,4,0.02274539,"tq.<mask>("">"")",");
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.<mask>("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName"
877,Parser.java,parseStartTag,void parseStartTag(),130,161,5521,5522,IdentifierMutator-Variable,tq,data,0,0.71341276,<mask>,"      Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);<mask>.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if ("
878,Parser.java,parseStartTag,void parseStartTag(),130,161,5521,5522,IdentifierMutator-Variable,tq,data,1,0.22467676,<mask>,"      Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);<mask>.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if ("
879,Parser.java,parseStartTag,void parseStartTag(),130,161,5521,5522,IdentifierMutator-Variable,tq,//,2,0.013610767,<mask>,"      Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);<mask>.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if ("
880,Parser.java,parseStartTag,void parseStartTag(),130,161,5521,5522,IdentifierMutator-Variable,tq,tag,3,0.009381542,<mask>,"      Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);<mask>.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if ("
881,Parser.java,parseStartTag,void parseStartTag(),130,161,5521,5522,IdentifierMutator-Variable,tq,tag,4,0.0031345123,<mask>,"      Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);<mask>.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if ("
882,Parser.java,parseStartTag,void parseStartTag(),130,161,5521,5522,FieldReferenceMutator,tq,data,0,0.71341276,<mask>,"      Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);<mask>.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if ("
883,Parser.java,parseStartTag,void parseStartTag(),130,161,5521,5522,FieldReferenceMutator,tq,data,1,0.22467676,<mask>,"      Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);<mask>.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if ("
884,Parser.java,parseStartTag,void parseStartTag(),130,161,5521,5522,FieldReferenceMutator,tq,//,2,0.013610767,<mask>,"      Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);<mask>.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if ("
885,Parser.java,parseStartTag,void parseStartTag(),130,161,5521,5522,FieldReferenceMutator,tq,tag,3,0.009381542,<mask>,"      Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);<mask>.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if ("
886,Parser.java,parseStartTag,void parseStartTag(),130,161,5521,5522,FieldReferenceMutator,tq,tag,4,0.0031345123,<mask>,"      Tag tag = Tag.valueOf(tagName);
        Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);<mask>.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if ("
887,Parser.java,parseStartTag,void parseStartTag(),130,161,5532,5534,IdentifierMutator-Literal,""">""",data,0,0.9228625,<mask>,"      Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo(<mask>);
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equ"
888,Parser.java,parseStartTag,void parseStartTag(),130,161,5532,5534,IdentifierMutator-Literal,""">""",tag,1,0.013835546,<mask>,"      Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo(<mask>);
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equ"
889,Parser.java,parseStartTag,void parseStartTag(),130,161,5532,5534,IdentifierMutator-Literal,""">""",content,2,0.005106427,<mask>,"      Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo(<mask>);
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equ"
890,Parser.java,parseStartTag,void parseStartTag(),130,161,5532,5534,IdentifierMutator-Literal,""">""","''",3,0.0033703235,<mask>,"      Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo(<mask>);
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equ"
891,Parser.java,parseStartTag,void parseStartTag(),130,161,5532,5534,IdentifierMutator-Literal,""">""",data,4,0.0030230638,<mask>,"      Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo(<mask>);
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equ"
892,Parser.java,parseStartTag,void parseStartTag(),130,162,5550,5564,MethodCallMutator,popStackToClose,end,0,0.118353106,<mask>(tag),"    Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");<mask>(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
           "
893,Parser.java,parseStartTag,void parseStartTag(),130,162,5550,5564,MethodCallMutator,popStackToClose,append,1,0.11632391,<mask>(tag),"    Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");<mask>(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
           "
894,Parser.java,parseStartTag,void parseStartTag(),130,162,5550,5564,MethodCallMutator,popStackToClose,add,2,0.05405119,<mask>(tag),"    Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");<mask>(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
           "
895,Parser.java,parseStartTag,void parseStartTag(),130,162,5550,5564,MethodCallMutator,popStackToClose,print,3,0.03892738,<mask>(tag),"    Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");<mask>(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
           "
896,Parser.java,parseStartTag,void parseStartTag(),130,162,5550,5564,MethodCallMutator,popStackToClose,push,4,0.035779804,<mask>(tag),"    Element child = new Element(tag, baseUri, attributes);

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");<mask>(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
           "
897,Parser.java,parseStartTag,void parseStartTag(),130,162,5566,5568,IdentifierMutator-Variable,tag,child,1,0.1454534,<mask>,"

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(<mask>);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href"
898,Parser.java,parseStartTag,void parseStartTag(),130,162,5566,5568,IdentifierMutator-Variable,tag,stack,2,0.048520107,<mask>,"

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(<mask>);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href"
899,Parser.java,parseStartTag,void parseStartTag(),130,162,5566,5568,IdentifierMutator-Variable,tag,parent,3,0.02967941,<mask>,"

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(<mask>);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href"
900,Parser.java,parseStartTag,void parseStartTag(),130,162,5566,5568,IdentifierMutator-Variable,tag,1,4,0.018466225,<mask>,"

        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>
        if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(<mask>);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href"
901,Parser.java,parseStartTag,void parseStartTag(),130,165,5648,5651,BinaryOperatorMutator,||,|,1,0.20571484,tag.equals(org.jsoup.parser.Parser.titleTag) <mask> tag.equals(org.jsoup.parser.Parser.textareaTag),"Chomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag)<mask>tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
               "
902,Parser.java,parseStartTag,void parseStartTag(),130,165,5648,5651,BinaryOperatorMutator,||,or,3,0.03462346,tag.equals(org.jsoup.parser.Parser.titleTag) <mask> tag.equals(org.jsoup.parser.Parser.textareaTag),"Chomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag)<mask>tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
               "
903,Parser.java,parseStartTag,void parseStartTag(),130,165,5648,5651,BinaryOperatorMutator,||,&&,4,0.03020234,tag.equals(org.jsoup.parser.Parser.titleTag) <mask> tag.equals(org.jsoup.parser.Parser.textareaTag),"Chomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag)<mask>tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
               "
904,Parser.java,parseStartTag,void parseStartTag(),130,165,5632,5637,MethodCallMutator,equals,is,0,0.8192067,tag.<mask>(titleTag)," if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.<mask>(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
          "
905,Parser.java,parseStartTag,void parseStartTag(),130,165,5632,5637,MethodCallMutator,equals,equ,1,0.042364545,tag.<mask>(titleTag)," if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.<mask>(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
          "
906,Parser.java,parseStartTag,void parseStartTag(),130,165,5632,5637,MethodCallMutator,equals,equal,3,0.012297197,tag.<mask>(titleTag)," if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.<mask>(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
          "
907,Parser.java,parseStartTag,void parseStartTag(),130,165,5632,5637,MethodCallMutator,equals,eq,4,0.008513796,tag.<mask>(titleTag)," if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.<mask>(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
          "
908,Parser.java,parseStartTag,void parseStartTag(),130,165,5628,5630,IdentifierMutator-Variable,tag,Tag,2,1.00746565E-5,<mask>,"   if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (<mask>.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
       "
909,Parser.java,parseStartTag,void parseStartTag(),130,165,5628,5630,IdentifierMutator-Variable,tag,child,3,3.947784E-6,<mask>,"   if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (<mask>.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
       "
910,Parser.java,parseStartTag,void parseStartTag(),130,165,5628,5630,IdentifierMutator-Variable,tag,name,4,3.454429E-6,<mask>,"   if (tq.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (<mask>.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
       "
911,Parser.java,parseStartTag,void parseStartTag(),130,165,5639,5646,IdentifierMutator-Variable,org.jsoup.parser.Parser.titleTag,script,0,0.89096665,<mask>,"q.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(<mask>) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
             "
912,Parser.java,parseStartTag,void parseStartTag(),130,165,5639,5646,IdentifierMutator-Variable,org.jsoup.parser.Parser.titleTag,data,1,0.02428784,<mask>,"q.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(<mask>) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
             "
913,Parser.java,parseStartTag,void parseStartTag(),130,165,5639,5646,IdentifierMutator-Variable,org.jsoup.parser.Parser.titleTag,text,2,0.010064356,<mask>,"q.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(<mask>) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
             "
914,Parser.java,parseStartTag,void parseStartTag(),130,165,5639,5646,IdentifierMutator-Variable,org.jsoup.parser.Parser.titleTag,Script,3,0.005567429,<mask>,"q.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(<mask>) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
             "
915,Parser.java,parseStartTag,void parseStartTag(),130,165,5639,5646,IdentifierMutator-Variable,org.jsoup.parser.Parser.titleTag,Data,4,0.004306642,<mask>,"q.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(<mask>) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
             "
916,Parser.java,parseStartTag,void parseStartTag(),130,165,5639,5646,FieldReferenceMutator,titleTag,script,0,0.89096665,org.jsoup.parser.Parser.<mask>,"q.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(<mask>) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
             "
917,Parser.java,parseStartTag,void parseStartTag(),130,165,5639,5646,FieldReferenceMutator,titleTag,data,1,0.02428784,org.jsoup.parser.Parser.<mask>,"q.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(<mask>) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
             "
918,Parser.java,parseStartTag,void parseStartTag(),130,165,5639,5646,FieldReferenceMutator,titleTag,text,2,0.010064356,org.jsoup.parser.Parser.<mask>,"q.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(<mask>) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
             "
919,Parser.java,parseStartTag,void parseStartTag(),130,165,5639,5646,FieldReferenceMutator,titleTag,Script,3,0.005567429,org.jsoup.parser.Parser.<mask>,"q.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(<mask>) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
             "
920,Parser.java,parseStartTag,void parseStartTag(),130,165,5639,5646,FieldReferenceMutator,titleTag,Data,4,0.004306642,org.jsoup.parser.Parser.<mask>,"q.matchChomp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(<mask>) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
             "
921,Parser.java,parseStartTag,void parseStartTag(),130,165,5656,5661,MethodCallMutator,equals,equ,0,0.44344404,tag.<mask>(textareaTag),"/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.<mask>(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri ="
922,Parser.java,parseStartTag,void parseStartTag(),130,165,5656,5661,MethodCallMutator,equals,is,1,0.21852313,tag.<mask>(textareaTag),"/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.<mask>(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri ="
923,Parser.java,parseStartTag,void parseStartTag(),130,165,5656,5661,MethodCallMutator,equals,equal,3,0.050872028,tag.<mask>(textareaTag),"/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.<mask>(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri ="
924,Parser.java,parseStartTag,void parseStartTag(),130,165,5656,5661,MethodCallMutator,equals,eq,4,0.038951036,tag.<mask>(textareaTag),"/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.<mask>(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri ="
925,Parser.java,parseStartTag,void parseStartTag(),130,165,5652,5654,IdentifierMutator-Variable,tag,parent,2,2.2341781E-5,<mask>,"omp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) ||<mask>.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                base"
926,Parser.java,parseStartTag,void parseStartTag(),130,165,5652,5654,IdentifierMutator-Variable,tag,child,3,2.0542484E-5,<mask>,"omp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) ||<mask>.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                base"
927,Parser.java,parseStartTag,void parseStartTag(),130,165,5652,5654,IdentifierMutator-Variable,tag,element,4,1.4083557E-5,<mask>,"omp(""/>"")) { // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) ||<mask>.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                base"
928,Parser.java,parseStartTag,void parseStartTag(),130,165,5663,5673,IdentifierMutator-Variable,org.jsoup.parser.Parser.textareaTag,script,0,0.5736282,<mask>," // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(<mask>)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
 "
929,Parser.java,parseStartTag,void parseStartTag(),130,165,5663,5673,IdentifierMutator-Variable,org.jsoup.parser.Parser.textareaTag,data,1,0.036288004,<mask>," // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(<mask>)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
 "
930,Parser.java,parseStartTag,void parseStartTag(),130,165,5663,5673,IdentifierMutator-Variable,org.jsoup.parser.Parser.textareaTag,text,2,0.027343964,<mask>," // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(<mask>)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
 "
931,Parser.java,parseStartTag,void parseStartTag(),130,165,5663,5673,IdentifierMutator-Variable,org.jsoup.parser.Parser.textareaTag,content,3,0.024136394,<mask>," // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(<mask>)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
 "
932,Parser.java,parseStartTag,void parseStartTag(),130,165,5663,5673,IdentifierMutator-Variable,org.jsoup.parser.Parser.textareaTag,body,4,0.018019956,<mask>," // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(<mask>)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
 "
933,Parser.java,parseStartTag,void parseStartTag(),130,165,5663,5673,FieldReferenceMutator,textareaTag,script,0,0.5736282,org.jsoup.parser.Parser.<mask>," // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(<mask>)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
 "
934,Parser.java,parseStartTag,void parseStartTag(),130,165,5663,5673,FieldReferenceMutator,textareaTag,data,1,0.036288004,org.jsoup.parser.Parser.<mask>," // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(<mask>)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
 "
935,Parser.java,parseStartTag,void parseStartTag(),130,165,5663,5673,FieldReferenceMutator,textareaTag,text,2,0.027343964,org.jsoup.parser.Parser.<mask>," // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(<mask>)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
 "
936,Parser.java,parseStartTag,void parseStartTag(),130,165,5663,5673,FieldReferenceMutator,textareaTag,content,3,0.024136394,org.jsoup.parser.Parser.<mask>," // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(<mask>)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
 "
937,Parser.java,parseStartTag,void parseStartTag(),130,165,5663,5673,FieldReferenceMutator,textareaTag,body,4,0.018019956,org.jsoup.parser.Parser.<mask>," // close empty element or tag
            isEmptyElement = true;
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(<mask>)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
 "
938,Parser.java,parseStartTag,void parseStartTag(),130,166,5775,5775,AssignmentMutator,"dataNode=TextNode.createFromEncoded(data,baseUri)",|,0,0.27477816,"dataNode <mask>= TextNode.createFromEncoded(data, baseUri)","       tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode<mask>= TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get"
939,Parser.java,parseStartTag,void parseStartTag(),130,166,5775,5775,AssignmentMutator,"dataNode=TextNode.createFromEncoded(data,baseUri)",*,1,0.27113748,"dataNode <mask>= TextNode.createFromEncoded(data, baseUri)","       tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode<mask>= TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get"
940,Parser.java,parseStartTag,void parseStartTag(),130,166,5775,5775,AssignmentMutator,"dataNode=TextNode.createFromEncoded(data,baseUri)",||,2,0.12367942,"dataNode <mask>= TextNode.createFromEncoded(data, baseUri)","       tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode<mask>= TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get"
941,Parser.java,parseStartTag,void parseStartTag(),130,166,5775,5775,AssignmentMutator,"dataNode=TextNode.createFromEncoded(data,baseUri)",&,3,0.056092467,"dataNode <mask>= TextNode.createFromEncoded(data, baseUri)","       tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode<mask>= TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get"
942,Parser.java,parseStartTag,void parseStartTag(),130,166,5775,5775,AssignmentMutator,"dataNode=TextNode.createFromEncoded(data,baseUri)",||,4,0.04988425,"dataNode <mask>= TextNode.createFromEncoded(data, baseUri)","       tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode<mask>= TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get"
943,Parser.java,parseStartTag,void parseStartTag(),130,166,5767,5774,IdentifierMutator-Variable,dataNode,data,0,0.53306377,<mask>,";
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)<mask> = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get"
944,Parser.java,parseStartTag,void parseStartTag(),130,166,5767,5774,IdentifierMutator-Variable,dataNode,node,1,0.26062983,<mask>,";
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)<mask> = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get"
945,Parser.java,parseStartTag,void parseStartTag(),130,166,5767,5774,IdentifierMutator-Variable,dataNode,child,2,0.06676939,<mask>,";
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)<mask> = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get"
946,Parser.java,parseStartTag,void parseStartTag(),130,166,5767,5774,IdentifierMutator-Variable,dataNode,root,3,0.009643768,<mask>,";
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)<mask> = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get"
947,Parser.java,parseStartTag,void parseStartTag(),130,166,5767,5774,IdentifierMutator-Variable,dataNode,content,4,0.008889867,<mask>,";
        } else {
            tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)<mask> = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get"
948,Parser.java,parseStartTag,void parseStartTag(),130,166,5787,5803,MethodCallMutator,createFromEncoded,create,0,0.35472476,"TextNode.<mask>(data, baseUri)","   tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.<mask>(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
     "
949,Parser.java,parseStartTag,void parseStartTag(),130,166,5787,5803,MethodCallMutator,createFromEncoded,parse,1,0.11082696,"TextNode.<mask>(data, baseUri)","   tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.<mask>(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
     "
950,Parser.java,parseStartTag,void parseStartTag(),130,166,5787,5803,MethodCallMutator,createFromEncoded,node,2,0.07570641,"TextNode.<mask>(data, baseUri)","   tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.<mask>(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
     "
951,Parser.java,parseStartTag,void parseStartTag(),130,166,5787,5803,MethodCallMutator,createFromEncoded,text,3,0.07562097,"TextNode.<mask>(data, baseUri)","   tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.<mask>(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
     "
952,Parser.java,parseStartTag,void parseStartTag(),130,166,5787,5803,MethodCallMutator,createFromEncoded,html,4,0.055648647,"TextNode.<mask>(data, baseUri)","   tq.matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.<mask>(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
     "
953,Parser.java,parseStartTag,void parseStartTag(),130,166,5805,5808,IdentifierMutator-Variable,data,text,2,4.986594E-4,<mask>,"matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(<mask>, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
       "
954,Parser.java,parseStartTag,void parseStartTag(),130,166,5805,5808,IdentifierMutator-Variable,data,raw,3,4.1778866E-4,<mask>,"matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(<mask>, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
       "
955,Parser.java,parseStartTag,void parseStartTag(),130,166,5805,5808,IdentifierMutator-Variable,data,content,4,3.7331268E-4,<mask>,"matchChomp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(<mask>, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
       "
956,Parser.java,parseStartTag,void parseStartTag(),130,166,5811,5817,IdentifierMutator-Variable,baseUri,true,0,0.20148607,<mask>,"omp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data,<mask>);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
           "
957,Parser.java,parseStartTag,void parseStartTag(),130,166,5811,5817,IdentifierMutator-Variable,baseUri,encoding,1,0.17230746,<mask>,"omp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data,<mask>);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
           "
958,Parser.java,parseStartTag,void parseStartTag(),130,166,5811,5817,IdentifierMutator-Variable,baseUri,false,2,0.12799627,<mask>,"omp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data,<mask>);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
           "
959,Parser.java,parseStartTag,void parseStartTag(),130,166,5811,5817,IdentifierMutator-Variable,baseUri,null,3,0.07116962,<mask>,"omp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data,<mask>);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
           "
960,Parser.java,parseStartTag,void parseStartTag(),130,166,5811,5817,IdentifierMutator-Variable,baseUri,tag,4,0.059749696,<mask>,"omp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data,<mask>);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
           "
961,Parser.java,parseStartTag,void parseStartTag(),130,166,5811,5817,FieldReferenceMutator,baseUri,true,0,0.20148607,<mask>,"omp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data,<mask>);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
           "
962,Parser.java,parseStartTag,void parseStartTag(),130,166,5811,5817,FieldReferenceMutator,baseUri,encoding,1,0.17230746,<mask>,"omp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data,<mask>);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
           "
963,Parser.java,parseStartTag,void parseStartTag(),130,166,5811,5817,FieldReferenceMutator,baseUri,false,2,0.12799627,<mask>,"omp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data,<mask>);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
           "
964,Parser.java,parseStartTag,void parseStartTag(),130,166,5811,5817,FieldReferenceMutator,baseUri,null,3,0.07116962,<mask>,"omp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data,<mask>);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
           "
965,Parser.java,parseStartTag,void parseStartTag(),130,166,5811,5817,FieldReferenceMutator,baseUri,tag,4,0.059749696,<mask>,"omp("">"");
        }
        addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data,<mask>);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
           "
966,Parser.java,parseStartTag,void parseStartTag(),130,168,5862,5862,AssignmentMutator,"dataNode=newDataNode(data,baseUri)",*,0,0.4563454,"dataNode <mask>= new DataNode(data, baseUri)","      // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode<mask>= new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
967,Parser.java,parseStartTag,void parseStartTag(),130,168,5862,5862,AssignmentMutator,"dataNode=newDataNode(data,baseUri)",|,1,0.28331187,"dataNode <mask>= new DataNode(data, baseUri)","      // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode<mask>= new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
968,Parser.java,parseStartTag,void parseStartTag(),130,168,5862,5862,AssignmentMutator,"dataNode=newDataNode(data,baseUri)",||,2,0.08500045,"dataNode <mask>= new DataNode(data, baseUri)","      // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode<mask>= new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
969,Parser.java,parseStartTag,void parseStartTag(),130,168,5862,5862,AssignmentMutator,"dataNode=newDataNode(data,baseUri)",/,3,0.047765583,"dataNode <mask>= new DataNode(data, baseUri)","      // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode<mask>= new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
970,Parser.java,parseStartTag,void parseStartTag(),130,168,5862,5862,AssignmentMutator,"dataNode=newDataNode(data,baseUri)",&,4,0.019719038,"dataNode <mask>= new DataNode(data, baseUri)","      // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode<mask>= new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
971,Parser.java,parseStartTag,void parseStartTag(),130,168,5854,5861,IdentifierMutator-Variable,dataNode,data,0,0.34832522,<mask>,"     addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else<mask> = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
972,Parser.java,parseStartTag,void parseStartTag(),130,168,5854,5861,IdentifierMutator-Variable,dataNode,child,1,0.32739264,<mask>,"     addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else<mask> = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
973,Parser.java,parseStartTag,void parseStartTag(),130,168,5854,5861,IdentifierMutator-Variable,dataNode,node,2,0.23680545,<mask>,"     addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else<mask> = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
974,Parser.java,parseStartTag,void parseStartTag(),130,168,5854,5861,IdentifierMutator-Variable,dataNode,Data,3,0.0130179785,<mask>,"     addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else<mask> = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
975,Parser.java,parseStartTag,void parseStartTag(),130,168,5854,5861,IdentifierMutator-Variable,dataNode,root,4,0.0071289386,<mask>,"     addChildToParent(child, isEmptyElement);

        // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else<mask> = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
976,Parser.java,parseStartTag,void parseStartTag(),130,168,5878,5881,IdentifierMutator-Variable,data,tag,1,0.0011803806,<mask>," // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(<mask>, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
977,Parser.java,parseStartTag,void parseStartTag(),130,168,5878,5881,IdentifierMutator-Variable,data,raw,3,0.0010859946,<mask>," // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(<mask>, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
978,Parser.java,parseStartTag,void parseStartTag(),130,168,5878,5881,IdentifierMutator-Variable,data,content,4,7.82514E-4,<mask>," // pc data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(<mask>, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
979,Parser.java,parseStartTag,void parseStartTag(),130,168,5884,5890,IdentifierMutator-Variable,baseUri,true,0,0.159659,<mask>," data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data,<mask>); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
980,Parser.java,parseStartTag,void parseStartTag(),130,168,5884,5890,IdentifierMutator-Variable,baseUri,false,1,0.15034062,<mask>," data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data,<mask>); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
981,Parser.java,parseStartTag,void parseStartTag(),130,168,5884,5890,IdentifierMutator-Variable,baseUri,null,2,0.104908936,<mask>," data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data,<mask>); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
982,Parser.java,parseStartTag,void parseStartTag(),130,168,5884,5890,IdentifierMutator-Variable,baseUri,encoding,3,0.052573882,<mask>," data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data,<mask>); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
983,Parser.java,parseStartTag,void parseStartTag(),130,168,5884,5890,IdentifierMutator-Variable,baseUri,"''",4,0.046080165,<mask>," data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data,<mask>); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
984,Parser.java,parseStartTag,void parseStartTag(),130,168,5884,5890,FieldReferenceMutator,baseUri,true,0,0.159659,<mask>," data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data,<mask>); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
985,Parser.java,parseStartTag,void parseStartTag(),130,168,5884,5890,FieldReferenceMutator,baseUri,false,1,0.15034062,<mask>," data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data,<mask>); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
986,Parser.java,parseStartTag,void parseStartTag(),130,168,5884,5890,FieldReferenceMutator,baseUri,null,2,0.104908936,<mask>," data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data,<mask>); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
987,Parser.java,parseStartTag,void parseStartTag(),130,168,5884,5890,FieldReferenceMutator,baseUri,encoding,3,0.052573882,<mask>," data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data,<mask>); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
988,Parser.java,parseStartTag,void parseStartTag(),130,168,5884,5890,FieldReferenceMutator,baseUri,"''",4,0.046080165,<mask>," data only tags (textarea, script): chomp to end tag, add content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data,<mask>); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
989,Parser.java,parseStartTag,void parseStartTag(),130,169,5958,5968,MethodCallMutator,appendChild,append,0,0.63318115,child.<mask>(dataNode),"tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.<mask>(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
990,Parser.java,parseStartTag,void parseStartTag(),130,169,5958,5968,MethodCallMutator,appendChild,add,1,0.10748482,child.<mask>(dataNode),"tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.<mask>(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
991,Parser.java,parseStartTag,void parseStartTag(),130,169,5958,5968,MethodCallMutator,appendChild,next,2,0.06146101,child.<mask>(dataNode),"tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.<mask>(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
992,Parser.java,parseStartTag,void parseStartTag(),130,169,5958,5968,MethodCallMutator,appendChild,after,3,0.05401172,child.<mask>(dataNode),"tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.<mask>(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
993,Parser.java,parseStartTag,void parseStartTag(),130,169,5958,5968,MethodCallMutator,appendChild,push,4,0.01814502,child.<mask>(dataNode),"tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.<mask>(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
994,Parser.java,parseStartTag,void parseStartTag(),130,169,5952,5956,IdentifierMutator-Variable,child,tag,1,0.14552358,<mask>," content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)<mask>.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
995,Parser.java,parseStartTag,void parseStartTag(),130,169,5952,5956,IdentifierMutator-Variable,child,doc,2,0.1066472,<mask>," content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)<mask>.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
996,Parser.java,parseStartTag,void parseStartTag(),130,169,5952,5956,IdentifierMutator-Variable,child,node,3,0.10203303,<mask>," content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)<mask>.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
997,Parser.java,parseStartTag,void parseStartTag(),130,169,5952,5956,IdentifierMutator-Variable,child,parent,4,0.09061194,<mask>," content as text node
        if (tag.isData()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)<mask>.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
998,Parser.java,parseStartTag,void parseStartTag(),130,169,5970,5977,IdentifierMutator-Variable,dataNode,node,0,0.7803312,<mask>,"Data()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(<mask>);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
999,Parser.java,parseStartTag,void parseStartTag(),130,169,5970,5977,IdentifierMutator-Variable,dataNode,data,1,0.06706132,<mask>,"Data()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(<mask>);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1000,Parser.java,parseStartTag,void parseStartTag(),130,169,5970,5977,IdentifierMutator-Variable,dataNode,doc,2,0.02261025,<mask>,"Data()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(<mask>);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1001,Parser.java,parseStartTag,void parseStartTag(),130,169,5970,5977,IdentifierMutator-Variable,dataNode,tag,3,0.0147916395,<mask>,"Data()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(<mask>);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1002,Parser.java,parseStartTag,void parseStartTag(),130,169,5970,5977,IdentifierMutator-Variable,dataNode,Node,4,0.01026637,<mask>,"Data()) {
            String data = tq.chompTo(""</"" + tagName);
            tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(<mask>);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1003,Parser.java,parseStartTag,void parseStartTag(),130,173,6067,6072,MethodCallMutator,equals,is,0,0.5132965,"child.tagName().<mask>(""base"")","To("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().<mask>(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1004,Parser.java,parseStartTag,void parseStartTag(),130,173,6067,6072,MethodCallMutator,equals,match,2,0.08966306,"child.tagName().<mask>(""base"")","To("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().<mask>(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1005,Parser.java,parseStartTag,void parseStartTag(),130,173,6067,6072,MethodCallMutator,equals,equ,3,0.047657758,"child.tagName().<mask>(""base"")","To("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().<mask>(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1006,Parser.java,parseStartTag,void parseStartTag(),130,173,6067,6072,MethodCallMutator,equals,contains,4,0.031317677,"child.tagName().<mask>(""base"")","To("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().<mask>(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1007,Parser.java,parseStartTag,void parseStartTag(),130,173,6057,6063,MethodCallMutator,tagName,tag,0,0.42344397,child.<mask>(),".chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.<mask>().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1008,Parser.java,parseStartTag,void parseStartTag(),130,173,6057,6063,MethodCallMutator,tagName,rel,1,0.24435644,child.<mask>(),".chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.<mask>().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1009,Parser.java,parseStartTag,void parseStartTag(),130,173,6057,6063,MethodCallMutator,tagName,name,2,0.21185116,child.<mask>(),".chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.<mask>().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1010,Parser.java,parseStartTag,void parseStartTag(),130,173,6057,6063,MethodCallMutator,tagName,path,3,0.015002645,child.<mask>(),".chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.<mask>().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1011,Parser.java,parseStartTag,void parseStartTag(),130,173,6057,6063,MethodCallMutator,tagName,type,4,0.012918469,child.<mask>(),".chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.<mask>().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1012,Parser.java,parseStartTag,void parseStartTag(),130,173,6051,6055,IdentifierMutator-Variable,child,tag,1,0.06528124,<mask>," tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (<mask>.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1013,Parser.java,parseStartTag,void parseStartTag(),130,173,6051,6055,IdentifierMutator-Variable,child,link,2,0.012309927,<mask>," tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (<mask>.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1014,Parser.java,parseStartTag,void parseStartTag(),130,173,6051,6055,IdentifierMutator-Variable,child,parent,3,0.0060953554,<mask>," tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (<mask>.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1015,Parser.java,parseStartTag,void parseStartTag(),130,173,6051,6055,IdentifierMutator-Variable,child,node,4,0.003042652,<mask>," tq.chompTo("">"");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (<mask>.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1016,Parser.java,parseStartTag,void parseStartTag(),130,173,6074,6079,IdentifierMutator-Literal,"""base""",A,0,0.38339755,<mask>,""");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(<mask>)) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1017,Parser.java,parseStartTag,void parseStartTag(),130,173,6074,6079,IdentifierMutator-Literal,"""base""",link,1,0.08561889,<mask>,""");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(<mask>)) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1018,Parser.java,parseStartTag,void parseStartTag(),130,173,6074,6079,IdentifierMutator-Literal,"""base""",a,2,0.071379565,<mask>,""");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(<mask>)) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1019,Parser.java,parseStartTag,void parseStartTag(),130,173,6074,6079,IdentifierMutator-Literal,"""base""",base,3,0.05864181,<mask>,""");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(<mask>)) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1020,Parser.java,parseStartTag,void parseStartTag(),130,173,6074,6079,IdentifierMutator-Literal,"""base""",URL,4,0.0528999,<mask>,""");
            popStackToClose(tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(<mask>)) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1021,Parser.java,parseStartTag,void parseStartTag(),130,174,6117,6122,MethodCallMutator,absUrl,attribute,0,0.4523598,"child.<mask>(""href"")","
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.<mask>(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1022,Parser.java,parseStartTag,void parseStartTag(),130,174,6117,6122,MethodCallMutator,absUrl,get,1,0.35223368,"child.<mask>(""href"")","
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.<mask>(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1023,Parser.java,parseStartTag,void parseStartTag(),130,174,6117,6122,MethodCallMutator,absUrl,tag,2,0.086502336,"child.<mask>(""href"")","
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.<mask>(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1024,Parser.java,parseStartTag,void parseStartTag(),130,174,6117,6122,MethodCallMutator,absUrl,Attribute,3,0.032747213,"child.<mask>(""href"")","
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.<mask>(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1025,Parser.java,parseStartTag,void parseStartTag(),130,174,6117,6122,MethodCallMutator,absUrl,property,4,0.017267566,"child.<mask>(""href"")","
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.<mask>(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1026,Parser.java,parseStartTag,void parseStartTag(),130,174,6111,6115,IdentifierMutator-Variable,child,doc,1,0.14318624,<mask>,"tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href =<mask>.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1027,Parser.java,parseStartTag,void parseStartTag(),130,174,6111,6115,IdentifierMutator-Variable,child,url,2,0.120194316,<mask>,"tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href =<mask>.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1028,Parser.java,parseStartTag,void parseStartTag(),130,174,6111,6115,IdentifierMutator-Variable,child,node,3,0.028273774,<mask>,"tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href =<mask>.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1029,Parser.java,parseStartTag,void parseStartTag(),130,174,6111,6115,IdentifierMutator-Variable,child,link,4,0.026457202,<mask>,"tag);
            
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href =<mask>.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1030,Parser.java,parseStartTag,void parseStartTag(),130,174,6124,6129,IdentifierMutator-Literal,"""href""",uri,0,0.15964563,<mask>,"          
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(<mask>);
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1031,Parser.java,parseStartTag,void parseStartTag(),130,174,6124,6129,IdentifierMutator-Literal,"""href""",href,1,0.084551215,<mask>,"          
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(<mask>);
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1032,Parser.java,parseStartTag,void parseStartTag(),130,174,6124,6129,IdentifierMutator-Literal,"""href""",doc,2,0.08216301,<mask>,"          
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(<mask>);
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1033,Parser.java,parseStartTag,void parseStartTag(),130,174,6124,6129,IdentifierMutator-Literal,"""href""",url,3,0.07711217,<mask>,"          
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(<mask>);
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1034,Parser.java,parseStartTag,void parseStartTag(),130,174,6124,6129,IdentifierMutator-Literal,"""href""",tag,4,0.06828607,<mask>,"          
            Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(<mask>);
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1035,Parser.java,parseStartTag,void parseStartTag(),130,175,6162,6165,BinaryOperatorMutator,!=,==,0,0.4464799,href.length() <mask> 0,"   Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length()<mask>0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1036,Parser.java,parseStartTag,void parseStartTag(),130,175,6162,6165,BinaryOperatorMutator,!=,>,1,0.34522226,href.length() <mask> 0,"   Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length()<mask>0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1037,Parser.java,parseStartTag,void parseStartTag(),130,175,6162,6165,BinaryOperatorMutator,!=,==,2,0.10948474,href.length() <mask> 0,"   Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length()<mask>0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1038,Parser.java,parseStartTag,void parseStartTag(),130,175,6162,6165,BinaryOperatorMutator,!=,>,3,0.06021819,href.length() <mask> 0,"   Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length()<mask>0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1039,Parser.java,parseStartTag,void parseStartTag(),130,175,6154,6159,MethodCallMutator,length,width,2,2.0126202E-4,href.<mask>(),"     Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.<mask>() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1040,Parser.java,parseStartTag,void parseStartTag(),130,175,6154,6159,MethodCallMutator,length,Length,3,5.3308584E-5,href.<mask>(),"     Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.<mask>() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1041,Parser.java,parseStartTag,void parseStartTag(),130,175,6154,6159,MethodCallMutator,length,len,4,4.010396E-5,href.<mask>(),"     Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.<mask>() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1042,Parser.java,parseStartTag,void parseStartTag(),130,175,6149,6152,IdentifierMutator-Variable,href,ref,2,1.7793424E-4,<mask>,"       Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (<mask>.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1043,Parser.java,parseStartTag,void parseStartTag(),130,175,6149,6152,IdentifierMutator-Variable,href,url,3,1.2754671E-4,<mask>,"       Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (<mask>.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1044,Parser.java,parseStartTag,void parseStartTag(),130,175,6149,6152,IdentifierMutator-Variable,href,uri,4,9.972054E-5,<mask>,"       Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (<mask>.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1045,Parser.java,parseStartTag,void parseStartTag(),130,175,6166,6166,IdentifierMutator-Literal,0,1,1,0.08148245,<mask>,"  Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() !=<mask>) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1046,Parser.java,parseStartTag,void parseStartTag(),130,175,6166,6166,IdentifierMutator-Literal,0,2,2,0.020199582,<mask>,"  Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() !=<mask>) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1047,Parser.java,parseStartTag,void parseStartTag(),130,175,6166,6166,IdentifierMutator-Literal,0,4,3,0.016866779,<mask>,"  Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() !=<mask>) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1048,Parser.java,parseStartTag,void parseStartTag(),130,175,6166,6166,IdentifierMutator-Literal,0,5,4,0.015249087,<mask>,"  Node dataNode;
            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() !=<mask>) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1049,Parser.java,parseStartTag,void parseStartTag(),130,176,6222,6222,AssignmentMutator,baseUri=href,+,0,0.21732737,baseUri <mask>= href,".equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri<mask>= href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1050,Parser.java,parseStartTag,void parseStartTag(),130,176,6222,6222,AssignmentMutator,baseUri=href,.,1,0.160607,baseUri <mask>= href,".equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri<mask>= href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1051,Parser.java,parseStartTag,void parseStartTag(),130,176,6222,6222,AssignmentMutator,baseUri=href,.,2,0.15755376,baseUri <mask>= href,".equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri<mask>= href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1052,Parser.java,parseStartTag,void parseStartTag(),130,176,6222,6222,AssignmentMutator,baseUri=href,|,3,0.13782875,baseUri <mask>= href,".equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri<mask>= href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1053,Parser.java,parseStartTag,void parseStartTag(),130,176,6222,6222,AssignmentMutator,baseUri=href,||,4,0.088531494,baseUri <mask>= href,".equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri<mask>= href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1054,Parser.java,parseStartTag,void parseStartTag(),130,176,6215,6221,IdentifierMutator-Variable,baseUri,href,0,0.64361984,<mask>,"        if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc<mask> = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1055,Parser.java,parseStartTag,void parseStartTag(),130,176,6215,6221,IdentifierMutator-Variable,baseUri,rel,1,0.08009684,<mask>,"        if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc<mask> = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1056,Parser.java,parseStartTag,void parseStartTag(),130,176,6215,6221,IdentifierMutator-Variable,baseUri,base,2,0.039199628,<mask>,"        if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc<mask> = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1057,Parser.java,parseStartTag,void parseStartTag(),130,176,6215,6221,IdentifierMutator-Variable,baseUri,src,3,0.03900512,<mask>,"        if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc<mask> = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1058,Parser.java,parseStartTag,void parseStartTag(),130,176,6215,6221,IdentifierMutator-Variable,baseUri,url,4,0.03405434,<mask>,"        if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc<mask> = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1059,Parser.java,parseStartTag,void parseStartTag(),130,176,6215,6221,FieldReferenceMutator,baseUri,href,0,0.64361984,<mask>,"        if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc<mask> = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1060,Parser.java,parseStartTag,void parseStartTag(),130,176,6215,6221,FieldReferenceMutator,baseUri,rel,1,0.08009684,<mask>,"        if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc<mask> = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1061,Parser.java,parseStartTag,void parseStartTag(),130,176,6215,6221,FieldReferenceMutator,baseUri,base,2,0.039199628,<mask>,"        if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc<mask> = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1062,Parser.java,parseStartTag,void parseStartTag(),130,176,6215,6221,FieldReferenceMutator,baseUri,src,3,0.03900512,<mask>,"        if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc<mask> = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1063,Parser.java,parseStartTag,void parseStartTag(),130,176,6215,6221,FieldReferenceMutator,baseUri,url,4,0.03405434,<mask>,"        if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc<mask> = href;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1064,Parser.java,parseStartTag,void parseStartTag(),130,176,6225,6228,IdentifierMutator-Variable,href,null,2,0.004306508,<mask>,"equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri =<mask>;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1065,Parser.java,parseStartTag,void parseStartTag(),130,176,6225,6228,IdentifierMutator-Variable,href,"""""",3,0.0021660598,<mask>,"equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri =<mask>;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1066,Parser.java,parseStartTag,void parseStartTag(),130,176,6225,6228,IdentifierMutator-Variable,href,"''",4,7.9276634E-4,<mask>,"equals(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri =<mask>;
                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1067,Parser.java,parseStartTag,void parseStartTag(),130,177,6251,6260,MethodCallMutator,setBaseUri,url,0,0.15725385,doc.<mask>(href),"so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.<mask>(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1068,Parser.java,parseStartTag,void parseStartTag(),130,177,6251,6260,MethodCallMutator,setBaseUri,tag,1,0.14010128,doc.<mask>(href),"so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.<mask>(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1069,Parser.java,parseStartTag,void parseStartTag(),130,177,6251,6260,MethodCallMutator,setBaseUri,html,2,0.11148118,doc.<mask>(href),"so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.<mask>(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1070,Parser.java,parseStartTag,void parseStartTag(),130,177,6251,6260,MethodCallMutator,setBaseUri,text,3,0.056483734,doc.<mask>(href),"so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.<mask>(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1071,Parser.java,parseStartTag,void parseStartTag(),130,177,6251,6260,MethodCallMutator,setBaseUri,write,4,0.039298203,doc.<mask>(href),"so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.<mask>(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1072,Parser.java,parseStartTag,void parseStartTag(),130,177,6247,6249,IdentifierMutator-Variable,doc,tag,1,0.18831387,<mask>,"(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;<mask>.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1073,Parser.java,parseStartTag,void parseStartTag(),130,177,6247,6249,IdentifierMutator-Variable,doc,child,2,0.04997074,<mask>,"(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;<mask>.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1074,Parser.java,parseStartTag,void parseStartTag(),130,177,6247,6249,IdentifierMutator-Variable,doc,document,3,0.03227015,<mask>,"(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;<mask>.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1075,Parser.java,parseStartTag,void parseStartTag(),130,177,6247,6249,IdentifierMutator-Variable,doc,parent,4,0.0299846,<mask>,"(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;<mask>.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1076,Parser.java,parseStartTag,void parseStartTag(),130,177,6247,6249,FieldReferenceMutator,doc,tag,1,0.18831387,<mask>,"(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;<mask>.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1077,Parser.java,parseStartTag,void parseStartTag(),130,177,6247,6249,FieldReferenceMutator,doc,child,2,0.04997074,<mask>,"(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;<mask>.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1078,Parser.java,parseStartTag,void parseStartTag(),130,177,6247,6249,FieldReferenceMutator,doc,document,3,0.03227015,<mask>,"(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;<mask>.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1079,Parser.java,parseStartTag,void parseStartTag(),130,177,6247,6249,FieldReferenceMutator,doc,parent,4,0.0299846,<mask>,"(textareaTag)) // want to show as text, but not contain inside tags (so not a data tag?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;<mask>.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1080,Parser.java,parseStartTag,void parseStartTag(),130,177,6262,6265,IdentifierMutator-Variable,href,uri,1,0.004522065,<mask>,"?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(<mask>); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1081,Parser.java,parseStartTag,void parseStartTag(),130,177,6262,6265,IdentifierMutator-Variable,href,ref,2,0.0031104991,<mask>,"?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(<mask>); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1082,Parser.java,parseStartTag,void parseStartTag(),130,177,6262,6265,IdentifierMutator-Variable,href,base,3,0.0024587682,<mask>,"?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(<mask>); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1083,Parser.java,parseStartTag,void parseStartTag(),130,177,6262,6265,IdentifierMutator-Variable,href,url,4,0.0017459637,<mask>,"?)
                dataNode = TextNode.createFromEncoded(data, baseUri);
            else
                dataNode = new DataNode(data, baseUri); // data not encoded but raw (for "" in script)
            child.appendChild(dataNode);   
        }

        // <base href>: update the base uri
        if (child.tagName().equals(""base"")) {
            String href = child.absUrl(""href"");
            if (href.length() != 0) { // ignore <base target> etc
                baseUri = href;
                doc.setBaseUri(<mask>); // set on the doc so doc.createElement(Tag) will get updated base
            }
        }
   "
1084,Parser.java,parseAttribute,Attribute parseAttribute(),182,183,6418,6434,MethodCallMutator,consumeWhitespace,next,0,0.38431126,tq.<mask>(),"Attribute parseAttribute() {
        tq.<mask>();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
 "
1085,Parser.java,parseAttribute,Attribute parseAttribute(),182,183,6418,6434,MethodCallMutator,consumeWhitespace,parse,1,0.11866278,tq.<mask>(),"Attribute parseAttribute() {
        tq.<mask>();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
 "
1086,Parser.java,parseAttribute,Attribute parseAttribute(),182,183,6418,6434,MethodCallMutator,consumeWhitespace,continue,2,0.06691819,tq.<mask>(),"Attribute parseAttribute() {
        tq.<mask>();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
 "
1087,Parser.java,parseAttribute,Attribute parseAttribute(),182,183,6418,6434,MethodCallMutator,consumeWhitespace,read,3,0.059302963,tq.<mask>(),"Attribute parseAttribute() {
        tq.<mask>();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
 "
1088,Parser.java,parseAttribute,Attribute parseAttribute(),182,183,6418,6434,MethodCallMutator,consumeWhitespace,scan,4,0.027550312,tq.<mask>(),"Attribute parseAttribute() {
        tq.<mask>();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
 "
1089,Parser.java,parseAttribute,Attribute parseAttribute(),182,183,6415,6416,IdentifierMutator-Variable,tq,parser,0,0.16061296,<mask>,"Attribute parseAttribute() {<mask>.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
      "
1090,Parser.java,parseAttribute,Attribute parseAttribute(),182,183,6415,6416,IdentifierMutator-Variable,tq,this,1,0.15554662,<mask>,"Attribute parseAttribute() {<mask>.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
      "
1091,Parser.java,parseAttribute,Attribute parseAttribute(),182,183,6415,6416,IdentifierMutator-Variable,tq,q,2,0.07368827,<mask>,"Attribute parseAttribute() {<mask>.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
      "
1092,Parser.java,parseAttribute,Attribute parseAttribute(),182,183,6415,6416,IdentifierMutator-Variable,tq,q,3,0.05736829,<mask>,"Attribute parseAttribute() {<mask>.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
      "
1093,Parser.java,parseAttribute,Attribute parseAttribute(),182,183,6415,6416,IdentifierMutator-Variable,tq,reader,4,0.033749823,<mask>,"Attribute parseAttribute() {<mask>.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
      "
1094,Parser.java,parseAttribute,Attribute parseAttribute(),182,183,6415,6416,FieldReferenceMutator,tq,parser,0,0.16061296,<mask>,"Attribute parseAttribute() {<mask>.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
      "
1095,Parser.java,parseAttribute,Attribute parseAttribute(),182,183,6415,6416,FieldReferenceMutator,tq,this,1,0.15554662,<mask>,"Attribute parseAttribute() {<mask>.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
      "
1096,Parser.java,parseAttribute,Attribute parseAttribute(),182,183,6415,6416,FieldReferenceMutator,tq,q,2,0.07368827,<mask>,"Attribute parseAttribute() {<mask>.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
      "
1097,Parser.java,parseAttribute,Attribute parseAttribute(),182,183,6415,6416,FieldReferenceMutator,tq,q,3,0.05736829,<mask>,"Attribute parseAttribute() {<mask>.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
      "
1098,Parser.java,parseAttribute,Attribute parseAttribute(),182,183,6415,6416,FieldReferenceMutator,tq,reader,4,0.033749823,<mask>,"Attribute parseAttribute() {<mask>.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
      "
1099,Parser.java,parseAttribute,Attribute parseAttribute(),182,184,6463,6481,MethodCallMutator,consumeAttributeKey,next,0,0.1457183,tq.<mask>(),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.<mask>();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
"
1100,Parser.java,parseAttribute,Attribute parseAttribute(),182,184,6463,6481,MethodCallMutator,consumeAttributeKey,value,1,0.12276611,tq.<mask>(),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.<mask>();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
"
1101,Parser.java,parseAttribute,Attribute parseAttribute(),182,184,6463,6481,MethodCallMutator,consumeAttributeKey,parse,2,0.087116495,tq.<mask>(),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.<mask>();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
"
1102,Parser.java,parseAttribute,Attribute parseAttribute(),182,184,6463,6481,MethodCallMutator,consumeAttributeKey,current,3,0.084449254,tq.<mask>(),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.<mask>();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
"
1103,Parser.java,parseAttribute,Attribute parseAttribute(),182,184,6463,6481,MethodCallMutator,consumeAttributeKey,text,4,0.0725651,tq.<mask>(),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.<mask>();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
"
1104,Parser.java,parseAttribute,Attribute parseAttribute(),182,184,6460,6461,IdentifierMutator-Variable,tq,parser,0,0.30965632,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key =<mask>.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1105,Parser.java,parseAttribute,Attribute parseAttribute(),182,184,6460,6461,IdentifierMutator-Variable,tq,this,1,0.20900667,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key =<mask>.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1106,Parser.java,parseAttribute,Attribute parseAttribute(),182,184,6460,6461,IdentifierMutator-Variable,tq,reader,2,0.038734015,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key =<mask>.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1107,Parser.java,parseAttribute,Attribute parseAttribute(),182,184,6460,6461,IdentifierMutator-Variable,tq,attribute,3,0.036518298,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key =<mask>.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1108,Parser.java,parseAttribute,Attribute parseAttribute(),182,184,6460,6461,IdentifierMutator-Variable,tq,q,4,0.021660076,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key =<mask>.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1109,Parser.java,parseAttribute,Attribute parseAttribute(),182,184,6460,6461,FieldReferenceMutator,tq,parser,0,0.30965632,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key =<mask>.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1110,Parser.java,parseAttribute,Attribute parseAttribute(),182,184,6460,6461,FieldReferenceMutator,tq,this,1,0.20900667,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key =<mask>.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1111,Parser.java,parseAttribute,Attribute parseAttribute(),182,184,6460,6461,FieldReferenceMutator,tq,reader,2,0.038734015,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key =<mask>.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1112,Parser.java,parseAttribute,Attribute parseAttribute(),182,184,6460,6461,FieldReferenceMutator,tq,attribute,3,0.036518298,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key =<mask>.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1113,Parser.java,parseAttribute,Attribute parseAttribute(),182,184,6460,6461,FieldReferenceMutator,tq,q,4,0.021660076,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key =<mask>.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1114,Parser.java,parseAttribute,Attribute parseAttribute(),182,185,6509,6510,IdentifierMutator-Literal,"""""",null,1,0.30841544,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value =<mask>;
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key,"
1115,Parser.java,parseAttribute,Attribute parseAttribute(),182,185,6509,6510,IdentifierMutator-Literal,"""""",key,2,0.20357545,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value =<mask>;
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key,"
1116,Parser.java,parseAttribute,Attribute parseAttribute(),182,185,6509,6510,IdentifierMutator-Literal,"""""","''",3,0.08406759,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value =<mask>;
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key,"
1117,Parser.java,parseAttribute,Attribute parseAttribute(),182,185,6509,6510,IdentifierMutator-Literal,"""""",value,4,0.017752111,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value =<mask>;
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key,"
1118,Parser.java,parseAttribute,Attribute parseAttribute(),182,186,6524,6540,MethodCallMutator,consumeWhitespace,next,0,0.31659746,tq.<mask>(),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.<mask>();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
 "
1119,Parser.java,parseAttribute,Attribute parseAttribute(),182,186,6524,6540,MethodCallMutator,consumeWhitespace,continue,1,0.12169795,tq.<mask>(),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.<mask>();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
 "
1120,Parser.java,parseAttribute,Attribute parseAttribute(),182,186,6524,6540,MethodCallMutator,consumeWhitespace,clean,2,0.059603427,tq.<mask>(),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.<mask>();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
 "
1121,Parser.java,parseAttribute,Attribute parseAttribute(),182,186,6524,6540,MethodCallMutator,consumeWhitespace,parse,3,0.036290374,tq.<mask>(),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.<mask>();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
 "
1122,Parser.java,parseAttribute,Attribute parseAttribute(),182,186,6524,6540,MethodCallMutator,consumeWhitespace,read,4,0.03470019,tq.<mask>(),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.<mask>();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
 "
1123,Parser.java,parseAttribute,Attribute parseAttribute(),182,186,6521,6522,IdentifierMutator-Variable,tq,q,0,0.14728616,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";<mask>.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
      "
1124,Parser.java,parseAttribute,Attribute parseAttribute(),182,186,6521,6522,IdentifierMutator-Variable,tq,parser,1,0.06940645,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";<mask>.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
      "
1125,Parser.java,parseAttribute,Attribute parseAttribute(),182,186,6521,6522,IdentifierMutator-Variable,tq,this,2,0.053270258,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";<mask>.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
      "
1126,Parser.java,parseAttribute,Attribute parseAttribute(),182,186,6521,6522,IdentifierMutator-Variable,tq,waiter,3,0.043607354,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";<mask>.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
      "
1127,Parser.java,parseAttribute,Attribute parseAttribute(),182,186,6521,6522,IdentifierMutator-Variable,tq,ctx,4,0.023543928,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";<mask>.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
      "
1128,Parser.java,parseAttribute,Attribute parseAttribute(),182,186,6521,6522,FieldReferenceMutator,tq,q,0,0.14728616,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";<mask>.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
      "
1129,Parser.java,parseAttribute,Attribute parseAttribute(),182,186,6521,6522,FieldReferenceMutator,tq,parser,1,0.06940645,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";<mask>.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
      "
1130,Parser.java,parseAttribute,Attribute parseAttribute(),182,186,6521,6522,FieldReferenceMutator,tq,this,2,0.053270258,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";<mask>.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
      "
1131,Parser.java,parseAttribute,Attribute parseAttribute(),182,186,6521,6522,FieldReferenceMutator,tq,waiter,3,0.043607354,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";<mask>.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
      "
1132,Parser.java,parseAttribute,Attribute parseAttribute(),182,186,6521,6522,FieldReferenceMutator,tq,ctx,4,0.023543928,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";<mask>.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
      "
1133,Parser.java,parseAttribute,Attribute parseAttribute(),182,187,6560,6569,MethodCallMutator,matchChomp,match,0,0.97587204,"tq.<mask>(""="")","Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.<mask>(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1134,Parser.java,parseAttribute,Attribute parseAttribute(),182,187,6560,6569,MethodCallMutator,matchChomp,matched,1,0.00944282,"tq.<mask>(""="")","Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.<mask>(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1135,Parser.java,parseAttribute,Attribute parseAttribute(),182,187,6560,6569,MethodCallMutator,matchChomp,search,2,0.0011986826,"tq.<mask>(""="")","Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.<mask>(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1136,Parser.java,parseAttribute,Attribute parseAttribute(),182,187,6560,6569,MethodCallMutator,matchChomp,has,3,0.0011503699,"tq.<mask>(""="")","Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.<mask>(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1137,Parser.java,parseAttribute,Attribute parseAttribute(),182,187,6560,6569,MethodCallMutator,matchChomp,test,4,0.0010668138,"tq.<mask>(""="")","Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.<mask>(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1138,Parser.java,parseAttribute,Attribute parseAttribute(),182,187,6557,6558,IdentifierMutator-Variable,tq,key,0,0.9053536,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (<mask>.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1139,Parser.java,parseAttribute,Attribute parseAttribute(),182,187,6557,6558,IdentifierMutator-Variable,tq,q,1,0.034988724,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (<mask>.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1140,Parser.java,parseAttribute,Attribute parseAttribute(),182,187,6557,6558,IdentifierMutator-Variable,tq,value,2,0.0050383164,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (<mask>.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1141,Parser.java,parseAttribute,Attribute parseAttribute(),182,187,6557,6558,IdentifierMutator-Variable,tq,qv,3,0.0029247713,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (<mask>.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1142,Parser.java,parseAttribute,Attribute parseAttribute(),182,187,6557,6558,IdentifierMutator-Variable,tq,tag,4,0.0028806766,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (<mask>.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1143,Parser.java,parseAttribute,Attribute parseAttribute(),182,187,6557,6558,FieldReferenceMutator,tq,key,0,0.9053536,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (<mask>.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1144,Parser.java,parseAttribute,Attribute parseAttribute(),182,187,6557,6558,FieldReferenceMutator,tq,q,1,0.034988724,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (<mask>.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1145,Parser.java,parseAttribute,Attribute parseAttribute(),182,187,6557,6558,FieldReferenceMutator,tq,value,2,0.0050383164,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (<mask>.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1146,Parser.java,parseAttribute,Attribute parseAttribute(),182,187,6557,6558,FieldReferenceMutator,tq,qv,3,0.0029247713,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (<mask>.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1147,Parser.java,parseAttribute,Attribute parseAttribute(),182,187,6557,6558,FieldReferenceMutator,tq,tag,4,0.0028806766,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (<mask>.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1148,Parser.java,parseAttribute,Attribute parseAttribute(),182,187,6571,6573,IdentifierMutator-Literal,"""=""",PK,0,0.054100204,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(<mask>)) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key,"
1149,Parser.java,parseAttribute,Attribute parseAttribute(),182,187,6571,6573,IdentifierMutator-Literal,"""=""",Q,1,0.05017504,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(<mask>)) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key,"
1150,Parser.java,parseAttribute,Attribute parseAttribute(),182,187,6571,6573,IdentifierMutator-Literal,"""=""",NS,2,0.027292004,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(<mask>)) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key,"
1151,Parser.java,parseAttribute,Attribute parseAttribute(),182,187,6571,6573,IdentifierMutator-Literal,"""=""",SS,3,0.023123756,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(<mask>)) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key,"
1152,Parser.java,parseAttribute,Attribute parseAttribute(),182,187,6571,6573,IdentifierMutator-Literal,"""=""",WS,4,0.019191157,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(<mask>)) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key,"
1153,Parser.java,parseAttribute,Attribute parseAttribute(),182,188,6594,6610,MethodCallMutator,consumeWhitespace,next,0,0.4672923,tq.<mask>(),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.<mask>();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
 "
1154,Parser.java,parseAttribute,Attribute parseAttribute(),182,188,6594,6610,MethodCallMutator,consumeWhitespace,continue,1,0.06548064,tq.<mask>(),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.<mask>();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
 "
1155,Parser.java,parseAttribute,Attribute parseAttribute(),182,188,6594,6610,MethodCallMutator,consumeWhitespace,parse,2,0.042148016,tq.<mask>(),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.<mask>();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
 "
1156,Parser.java,parseAttribute,Attribute parseAttribute(),182,188,6594,6610,MethodCallMutator,consumeWhitespace,read,3,0.03882494,tq.<mask>(),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.<mask>();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
 "
1157,Parser.java,parseAttribute,Attribute parseAttribute(),182,188,6594,6610,MethodCallMutator,consumeWhitespace,scan,4,0.033413824,tq.<mask>(),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.<mask>();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
 "
1158,Parser.java,parseAttribute,Attribute parseAttribute(),182,188,6591,6592,IdentifierMutator-Variable,tq,q,0,0.5384262,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {<mask>.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
"
1159,Parser.java,parseAttribute,Attribute parseAttribute(),182,188,6591,6592,IdentifierMutator-Variable,tq,q,1,0.03880297,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {<mask>.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
"
1160,Parser.java,parseAttribute,Attribute parseAttribute(),182,188,6591,6592,IdentifierMutator-Variable,tq,this,2,0.027576057,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {<mask>.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
"
1161,Parser.java,parseAttribute,Attribute parseAttribute(),182,188,6591,6592,IdentifierMutator-Variable,tq,ctx,3,0.018449867,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {<mask>.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
"
1162,Parser.java,parseAttribute,Attribute parseAttribute(),182,188,6591,6592,IdentifierMutator-Variable,tq,parser,4,0.013641742,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {<mask>.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
"
1163,Parser.java,parseAttribute,Attribute parseAttribute(),182,188,6591,6592,FieldReferenceMutator,tq,q,0,0.5384262,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {<mask>.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
"
1164,Parser.java,parseAttribute,Attribute parseAttribute(),182,188,6591,6592,FieldReferenceMutator,tq,q,1,0.03880297,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {<mask>.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
"
1165,Parser.java,parseAttribute,Attribute parseAttribute(),182,188,6591,6592,FieldReferenceMutator,tq,this,2,0.027576057,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {<mask>.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
"
1166,Parser.java,parseAttribute,Attribute parseAttribute(),182,188,6591,6592,FieldReferenceMutator,tq,ctx,3,0.018449867,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {<mask>.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
"
1167,Parser.java,parseAttribute,Attribute parseAttribute(),182,188,6591,6592,FieldReferenceMutator,tq,parser,4,0.013641742,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {<mask>.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
"
1168,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6635,6644,MethodCallMutator,matchChomp,match,0,0.99860245,tq.<mask>(SQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.<mask>(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1169,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6635,6644,MethodCallMutator,matchChomp,matched,1,6.10365E-4,tq.<mask>(SQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.<mask>(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1170,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6635,6644,MethodCallMutator,matchChomp,parse,2,7.293024E-5,tq.<mask>(SQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.<mask>(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1171,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6635,6644,MethodCallMutator,matchChomp,is,3,3.892307E-5,tq.<mask>(SQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.<mask>(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1172,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6635,6644,MethodCallMutator,matchChomp,include,4,3.57944E-5,tq.<mask>(SQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.<mask>(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1173,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6632,6633,IdentifierMutator-Variable,tq,qt,0,0.4868883,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (<mask>.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1174,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6632,6633,IdentifierMutator-Variable,tq,txt,1,0.07340867,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (<mask>.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1175,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6632,6633,IdentifierMutator-Variable,tq,tc,2,0.051075768,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (<mask>.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1176,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6632,6633,IdentifierMutator-Variable,tq,key,3,0.034791276,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (<mask>.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1177,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6632,6633,IdentifierMutator-Variable,tq,tf,4,0.028218772,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (<mask>.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1178,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6632,6633,FieldReferenceMutator,tq,qt,0,0.4868883,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (<mask>.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1179,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6632,6633,FieldReferenceMutator,tq,txt,1,0.07340867,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (<mask>.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1180,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6632,6633,FieldReferenceMutator,tq,tc,2,0.051075768,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (<mask>.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1181,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6632,6633,FieldReferenceMutator,tq,key,3,0.034791276,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (<mask>.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1182,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6632,6633,FieldReferenceMutator,tq,tf,4,0.028218772,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (<mask>.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1183,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6646,6647,IdentifierMutator-Variable,org.jsoup.parser.Parser.SQ,SS,0,0.27538228,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(<mask>)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1184,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6646,6647,IdentifierMutator-Variable,org.jsoup.parser.Parser.SQ,SQL,1,0.069543265,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(<mask>)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1185,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6646,6647,IdentifierMutator-Variable,org.jsoup.parser.Parser.SQ,SH,2,0.05024093,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(<mask>)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1186,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6646,6647,IdentifierMutator-Variable,org.jsoup.parser.Parser.SQ,SE,3,0.041617047,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(<mask>)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1187,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6646,6647,IdentifierMutator-Variable,org.jsoup.parser.Parser.SQ,SP,4,0.03893902,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(<mask>)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1188,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6646,6647,FieldReferenceMutator,SQ,SS,0,0.27538228,org.jsoup.parser.Parser.<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(<mask>)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1189,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6646,6647,FieldReferenceMutator,SQ,SQL,1,0.069543265,org.jsoup.parser.Parser.<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(<mask>)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1190,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6646,6647,FieldReferenceMutator,SQ,SH,2,0.05024093,org.jsoup.parser.Parser.<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(<mask>)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1191,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6646,6647,FieldReferenceMutator,SQ,SE,3,0.041617047,org.jsoup.parser.Parser.<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(<mask>)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1192,Parser.java,parseAttribute,Attribute parseAttribute(),182,190,6646,6647,FieldReferenceMutator,SQ,SP,4,0.03893902,org.jsoup.parser.Parser.<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(<mask>)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1193,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6674,6674,AssignmentMutator,value=tq.chompTo(org.jsoup.parser.Parser.SQ),.,0,0.2550085,value <mask>= tq.chompTo(org.jsoup.parser.Parser.SQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value<mask>= tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key"
1194,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6674,6674,AssignmentMutator,value=tq.chompTo(org.jsoup.parser.Parser.SQ),|,1,0.17817612,value <mask>= tq.chompTo(org.jsoup.parser.Parser.SQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value<mask>= tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key"
1195,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6674,6674,AssignmentMutator,value=tq.chompTo(org.jsoup.parser.Parser.SQ),||,2,0.13669239,value <mask>= tq.chompTo(org.jsoup.parser.Parser.SQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value<mask>= tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key"
1196,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6674,6674,AssignmentMutator,value=tq.chompTo(org.jsoup.parser.Parser.SQ),*,3,0.11021589,value <mask>= tq.chompTo(org.jsoup.parser.Parser.SQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value<mask>= tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key"
1197,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6674,6674,AssignmentMutator,value=tq.chompTo(org.jsoup.parser.Parser.SQ),+,4,0.04476424,value <mask>= tq.chompTo(org.jsoup.parser.Parser.SQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value<mask>= tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key"
1198,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6669,6673,IdentifierMutator-Variable,value,key,1,0.34798285,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {<mask> = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
   "
1199,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6669,6673,IdentifierMutator-Variable,value,key,2,0.04683713,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {<mask> = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
   "
1200,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6669,6673,IdentifierMutator-Variable,value,name,4,0.004837012,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {<mask> = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
   "
1201,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6680,6686,MethodCallMutator,chompTo,split,0,0.12988058,tq.<mask>(SQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.<mask>(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1202,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6680,6686,MethodCallMutator,chompTo,to,1,0.11776602,tq.<mask>(SQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.<mask>(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1203,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6680,6686,MethodCallMutator,chompTo,parse,2,0.08852306,tq.<mask>(SQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.<mask>(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1204,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6680,6686,MethodCallMutator,chompTo,replace,3,0.08584255,tq.<mask>(SQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.<mask>(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1205,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6680,6686,MethodCallMutator,chompTo,strip,4,0.065221414,tq.<mask>(SQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.<mask>(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1206,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6677,6678,IdentifierMutator-Variable,tq,q,0,0.14830633,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value =<mask>.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1207,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6677,6678,IdentifierMutator-Variable,tq,t,1,0.09786318,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value =<mask>.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1208,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6677,6678,IdentifierMutator-Variable,tq,this,2,0.07402001,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value =<mask>.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1209,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6677,6678,IdentifierMutator-Variable,tq,query,3,0.063787945,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value =<mask>.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1210,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6677,6678,IdentifierMutator-Variable,tq,ti,4,0.060486652,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value =<mask>.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1211,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6677,6678,FieldReferenceMutator,tq,q,0,0.14830633,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value =<mask>.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1212,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6677,6678,FieldReferenceMutator,tq,t,1,0.09786318,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value =<mask>.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1213,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6677,6678,FieldReferenceMutator,tq,this,2,0.07402001,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value =<mask>.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1214,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6677,6678,FieldReferenceMutator,tq,query,3,0.063787945,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value =<mask>.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1215,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6677,6678,FieldReferenceMutator,tq,ti,4,0.060486652,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value =<mask>.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1216,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6688,6689,IdentifierMutator-Variable,org.jsoup.parser.Parser.SQ,SS,0,0.19920775,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(<mask>);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1217,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6688,6689,IdentifierMutator-Variable,org.jsoup.parser.Parser.SQ,sq,1,0.13114946,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(<mask>);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1218,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6688,6689,IdentifierMutator-Variable,org.jsoup.parser.Parser.SQ,SA,2,0.11285688,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(<mask>);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1219,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6688,6689,IdentifierMutator-Variable,org.jsoup.parser.Parser.SQ,SG,3,0.05951463,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(<mask>);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1220,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6688,6689,IdentifierMutator-Variable,org.jsoup.parser.Parser.SQ,SAN,4,0.05597839,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(<mask>);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1221,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6688,6689,FieldReferenceMutator,SQ,SS,0,0.19920775,org.jsoup.parser.Parser.<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(<mask>);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1222,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6688,6689,FieldReferenceMutator,SQ,sq,1,0.13114946,org.jsoup.parser.Parser.<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(<mask>);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1223,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6688,6689,FieldReferenceMutator,SQ,SA,2,0.11285688,org.jsoup.parser.Parser.<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(<mask>);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1224,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6688,6689,FieldReferenceMutator,SQ,SG,3,0.05951463,org.jsoup.parser.Parser.<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(<mask>);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1225,Parser.java,parseAttribute,Attribute parseAttribute(),182,191,6688,6689,FieldReferenceMutator,SQ,SAN,4,0.05597839,org.jsoup.parser.Parser.<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(<mask>);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1226,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6719,6728,MethodCallMutator,matchChomp,match,0,0.99240416,tq.<mask>(DQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.<mask>(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1227,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6719,6728,MethodCallMutator,matchChomp,matched,1,0.0027136123,tq.<mask>(DQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.<mask>(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1228,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6719,6728,MethodCallMutator,matchChomp,has,2,4.1204912E-4,tq.<mask>(DQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.<mask>(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1229,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6719,6728,MethodCallMutator,matchChomp,is,3,3.65398E-4,tq.<mask>(DQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.<mask>(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1230,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6719,6728,MethodCallMutator,matchChomp,parse,4,3.3629956E-4,tq.<mask>(DQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.<mask>(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1231,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6716,6717,IdentifierMutator-Variable,tq,qt,0,0.56681865,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (<mask>.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1232,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6716,6717,IdentifierMutator-Variable,tq,tc,1,0.07713502,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (<mask>.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1233,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6716,6717,IdentifierMutator-Variable,tq,tz,2,0.045752272,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (<mask>.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1234,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6716,6717,IdentifierMutator-Variable,tq,txt,3,0.043044023,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (<mask>.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1235,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6716,6717,IdentifierMutator-Variable,tq,q,4,0.03659843,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (<mask>.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1236,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6716,6717,FieldReferenceMutator,tq,qt,0,0.56681865,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (<mask>.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1237,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6716,6717,FieldReferenceMutator,tq,tc,1,0.07713502,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (<mask>.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1238,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6716,6717,FieldReferenceMutator,tq,tz,2,0.045752272,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (<mask>.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1239,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6716,6717,FieldReferenceMutator,tq,txt,3,0.043044023,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (<mask>.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1240,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6716,6717,FieldReferenceMutator,tq,q,4,0.03659843,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (<mask>.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1241,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6730,6731,IdentifierMutator-Variable,org.jsoup.parser.Parser.DQ,DJ,0,0.23093188,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(<mask>)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1242,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6730,6731,IdentifierMutator-Variable,org.jsoup.parser.Parser.DQ,DD,1,0.11677282,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(<mask>)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1243,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6730,6731,IdentifierMutator-Variable,org.jsoup.parser.Parser.DQ,dq,2,0.09696792,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(<mask>)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1244,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6730,6731,IdentifierMutator-Variable,org.jsoup.parser.Parser.DQ,DIV,3,0.077248394,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(<mask>)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1245,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6730,6731,IdentifierMutator-Variable,org.jsoup.parser.Parser.DQ,DEF,4,0.062095463,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(<mask>)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1246,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6730,6731,FieldReferenceMutator,DQ,DJ,0,0.23093188,org.jsoup.parser.Parser.<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(<mask>)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1247,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6730,6731,FieldReferenceMutator,DQ,DD,1,0.11677282,org.jsoup.parser.Parser.<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(<mask>)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1248,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6730,6731,FieldReferenceMutator,DQ,dq,2,0.09696792,org.jsoup.parser.Parser.<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(<mask>)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1249,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6730,6731,FieldReferenceMutator,DQ,DIV,3,0.077248394,org.jsoup.parser.Parser.<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(<mask>)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1250,Parser.java,parseAttribute,Attribute parseAttribute(),182,192,6730,6731,FieldReferenceMutator,DQ,DEF,4,0.062095463,org.jsoup.parser.Parser.<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(<mask>)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1251,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6758,6758,AssignmentMutator,value=tq.chompTo(org.jsoup.parser.Parser.DQ),|,0,0.15678872,value <mask>= tq.chompTo(org.jsoup.parser.Parser.DQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value<mask>= tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key"
1252,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6758,6758,AssignmentMutator,value=tq.chompTo(org.jsoup.parser.Parser.DQ),||,1,0.12290841,value <mask>= tq.chompTo(org.jsoup.parser.Parser.DQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value<mask>= tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key"
1253,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6758,6758,AssignmentMutator,value=tq.chompTo(org.jsoup.parser.Parser.DQ),*,2,0.11817924,value <mask>= tq.chompTo(org.jsoup.parser.Parser.DQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value<mask>= tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key"
1254,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6758,6758,AssignmentMutator,value=tq.chompTo(org.jsoup.parser.Parser.DQ),.,3,0.09659215,value <mask>= tq.chompTo(org.jsoup.parser.Parser.DQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value<mask>= tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key"
1255,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6758,6758,AssignmentMutator,value=tq.chompTo(org.jsoup.parser.Parser.DQ),||,4,0.09334529,value <mask>= tq.chompTo(org.jsoup.parser.Parser.DQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value<mask>= tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key"
1256,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6753,6757,IdentifierMutator-Variable,value,key,2,0.011443898,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {<mask> = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
   "
1257,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6753,6757,IdentifierMutator-Variable,value,tag,3,0.0021087558,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {<mask> = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
   "
1258,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6753,6757,IdentifierMutator-Variable,value,key,4,0.0017179251,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {<mask> = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
   "
1259,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6764,6770,MethodCallMutator,chompTo,to,0,0.17019589,tq.<mask>(DQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.<mask>(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1260,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6764,6770,MethodCallMutator,chompTo,split,1,0.11834002,tq.<mask>(DQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.<mask>(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1261,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6764,6770,MethodCallMutator,chompTo,parse,2,0.07394802,tq.<mask>(DQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.<mask>(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1262,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6764,6770,MethodCallMutator,chompTo,replace,3,0.065999314,tq.<mask>(DQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.<mask>(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1263,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6764,6770,MethodCallMutator,chompTo,strip,4,0.060877774,tq.<mask>(DQ),"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.<mask>(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);"
1264,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6761,6762,IdentifierMutator-Variable,tq,t,0,0.11414053,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value =<mask>.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1265,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6761,6762,IdentifierMutator-Variable,tq,q,1,0.09759448,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value =<mask>.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1266,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6761,6762,IdentifierMutator-Variable,tq,query,2,0.073555924,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value =<mask>.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1267,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6761,6762,IdentifierMutator-Variable,tq,this,3,0.06965583,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value =<mask>.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1268,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6761,6762,IdentifierMutator-Variable,tq,req,4,0.053751882,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value =<mask>.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1269,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6761,6762,FieldReferenceMutator,tq,t,0,0.11414053,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value =<mask>.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1270,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6761,6762,FieldReferenceMutator,tq,q,1,0.09759448,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value =<mask>.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1271,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6761,6762,FieldReferenceMutator,tq,query,2,0.073555924,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value =<mask>.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1272,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6761,6762,FieldReferenceMutator,tq,this,3,0.06965583,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value =<mask>.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1273,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6761,6762,FieldReferenceMutator,tq,req,4,0.053751882,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value =<mask>.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1274,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6772,6773,IdentifierMutator-Variable,org.jsoup.parser.Parser.DQ,DJ,0,0.2677663,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(<mask>);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1275,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6772,6773,IdentifierMutator-Variable,org.jsoup.parser.Parser.DQ,DD,1,0.1785696,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(<mask>);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1276,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6772,6773,IdentifierMutator-Variable,org.jsoup.parser.Parser.DQ,dq,2,0.053385597,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(<mask>);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1277,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6772,6773,IdentifierMutator-Variable,org.jsoup.parser.Parser.DQ,DP,3,0.048164044,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(<mask>);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1278,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6772,6773,IdentifierMutator-Variable,org.jsoup.parser.Parser.DQ,DK,4,0.035834897,<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(<mask>);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1279,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6772,6773,FieldReferenceMutator,DQ,DJ,0,0.2677663,org.jsoup.parser.Parser.<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(<mask>);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1280,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6772,6773,FieldReferenceMutator,DQ,DD,1,0.1785696,org.jsoup.parser.Parser.<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(<mask>);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1281,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6772,6773,FieldReferenceMutator,DQ,dq,2,0.053385597,org.jsoup.parser.Parser.<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(<mask>);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1282,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6772,6773,FieldReferenceMutator,DQ,DP,3,0.048164044,org.jsoup.parser.Parser.<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(<mask>);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1283,Parser.java,parseAttribute,Attribute parseAttribute(),182,193,6772,6773,FieldReferenceMutator,DQ,DK,4,0.035834897,org.jsoup.parser.Parser.<mask>,"Attribute parseAttribute() {
        tq.consumeWhitespace();
        String key = tq.consumeAttributeKey();
        String value = """";
        tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(<mask>);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value"
1284,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7031,7034,BinaryOperatorMutator,&&,&,2,0.009837035,"((!tq.matchesAny(""<"", ""/>"", "">"")) && (!tq.matchesWhitespace())) <mask> (!tq.isEmpty())","="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace()<mask>!tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1285,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7031,7034,BinaryOperatorMutator,&&,*/,3,0.0026120343,"((!tq.matchesAny(""<"", ""/>"", "">"")) && (!tq.matchesWhitespace())) <mask> (!tq.isEmpty())","="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace()<mask>!tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1286,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7031,7034,BinaryOperatorMutator,&&,||,4,0.0012336246,"((!tq.matchesAny(""<"", ""/>"", "">"")) && (!tq.matchesWhitespace())) <mask> (!tq.isEmpty())","="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace()<mask>!tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1287,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7004,7007,BinaryOperatorMutator,&&,&,2,0.008155822,"(!tq.matchesAny(""<"", ""/>"", "">"")) <mask> (!tq.matchesWhitespace())","   if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"")<mask>!tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1288,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7004,7007,BinaryOperatorMutator,&&,&,3,0.0037606098,"(!tq.matchesAny(""<"", ""/>"", "">"")) <mask> (!tq.matchesWhitespace())","   if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"")<mask>!tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1289,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7004,7007,BinaryOperatorMutator,&&,)(,4,0.0035094514,"(!tq.matchesAny(""<"", ""/>"", "">"")) <mask> (!tq.matchesWhitespace())","   if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"")<mask>!tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1290,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6974,6974,UnaryOperatorMutator,!,!!,2,0.0022170658,"<mask>tq.matchesAny(""<"", ""/>"", "">"")"," tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (<mask>tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
     "
1291,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6974,6974,UnaryOperatorMutator,!,?,3,6.700954E-4,"<mask>tq.matchesAny(""<"", ""/>"", "">"")"," tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (<mask>tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
     "
1292,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6974,6974,UnaryOperatorMutator,!,...,4,3.056385E-4,"<mask>tq.matchesAny(""<"", ""/>"", "">"")"," tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (<mask>tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
     "
1293,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6978,6987,MethodCallMutator,matchesAny,match,0,0.9541752,"tq.<mask>(""<"", ""/>"", "">"")","consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.<mask>(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
  "
1294,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6978,6987,MethodCallMutator,matchesAny,matched,1,0.017193606,"tq.<mask>(""<"", ""/>"", "">"")","consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.<mask>(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
  "
1295,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6978,6987,MethodCallMutator,matchesAny,is,2,0.0036196895,"tq.<mask>(""<"", ""/>"", "">"")","consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.<mask>(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
  "
1296,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6978,6987,MethodCallMutator,matchesAny,has,3,0.0022932088,"tq.<mask>(""<"", ""/>"", "">"")","consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.<mask>(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
  "
1297,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6978,6987,MethodCallMutator,matchesAny,pattern,4,0.0017234605,"tq.<mask>(""<"", ""/>"", "">"")","consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.<mask>(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
  "
1298,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6975,6976,IdentifierMutator-Variable,tq,value,0,0.56053615,<mask>," tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!<mask>.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
       "
1299,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6975,6976,IdentifierMutator-Variable,tq,key,1,0.08255932,<mask>," tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!<mask>.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
       "
1300,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6975,6976,IdentifierMutator-Variable,tq,tag,2,0.07075222,<mask>," tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!<mask>.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
       "
1301,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6975,6976,IdentifierMutator-Variable,tq,input,3,0.024429496,<mask>," tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!<mask>.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
       "
1302,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6975,6976,IdentifierMutator-Variable,tq,pattern,4,0.020840053,<mask>," tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!<mask>.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
       "
1303,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6975,6976,FieldReferenceMutator,tq,value,0,0.56053615,<mask>," tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!<mask>.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
       "
1304,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6975,6976,FieldReferenceMutator,tq,key,1,0.08255932,<mask>," tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!<mask>.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
       "
1305,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6975,6976,FieldReferenceMutator,tq,tag,2,0.07075222,<mask>," tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!<mask>.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
       "
1306,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6975,6976,FieldReferenceMutator,tq,input,3,0.024429496,<mask>," tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!<mask>.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
       "
1307,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6975,6976,FieldReferenceMutator,tq,pattern,4,0.020840053,<mask>," tq.consumeWhitespace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!<mask>.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
       "
1308,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6989,6991,IdentifierMutator-Literal,"""<""",tag,0,0.098711126,<mask>,"pace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(<mask>, ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1309,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6989,6991,IdentifierMutator-Literal,"""<""",true,1,0.07659039,<mask>,"pace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(<mask>, ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1310,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6989,6991,IdentifierMutator-Literal,"""<""","\""",2,0.07603793,<mask>,"pace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(<mask>, ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1311,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6989,6991,IdentifierMutator-Literal,"""<""","''",3,0.07123212,<mask>,"pace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(<mask>, ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1312,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6989,6991,IdentifierMutator-Literal,"""<""",value,4,0.036617145,<mask>,"pace();
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(<mask>, ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1313,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6994,6997,IdentifierMutator-Literal,"""/>""",value,0,0.29629394,<mask>,"
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"",<mask>, "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1314,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6994,6997,IdentifierMutator-Literal,"""/>""","""""",1,0.21071187,<mask>,"
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"",<mask>, "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1315,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6994,6997,IdentifierMutator-Literal,"""/>""",null,2,0.17450145,<mask>,"
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"",<mask>, "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1316,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6994,6997,IdentifierMutator-Literal,"""/>""","''",3,0.072690465,<mask>,"
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"",<mask>, "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1317,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,6994,6997,IdentifierMutator-Literal,"""/>""",true,4,0.024794126,<mask>,"
        if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"",<mask>, "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1318,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7000,7002,IdentifierMutator-Literal,""">""","""""",0,0.18056534,<mask>,"      if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"",<mask>) && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1319,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7000,7002,IdentifierMutator-Literal,""">""","''",1,0.064962685,<mask>,"      if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"",<mask>) && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1320,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7000,7002,IdentifierMutator-Literal,""">""","""",2,0.06390974,<mask>,"      if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"",<mask>) && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1321,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7000,7002,IdentifierMutator-Literal,""">""",space,3,0.040280122,<mask>,"      if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"",<mask>) && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1322,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7000,7002,IdentifierMutator-Literal,""">""",value,4,0.03926337,<mask>,"      if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"",<mask>) && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1323,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7008,7008,UnaryOperatorMutator,!,(!,1,0.0038968355,<mask>tq.matchesWhitespace(),"  if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") &&<mask>tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1324,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7008,7008,UnaryOperatorMutator,!,//,2,0.0019645432,<mask>tq.matchesWhitespace(),"  if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") &&<mask>tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1325,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7008,7008,UnaryOperatorMutator,!,(,4,5.051103E-4,<mask>tq.matchesWhitespace(),"  if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") &&<mask>tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1326,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7012,7028,MethodCallMutator,matchesWhitespace,empty,0,0.2838052,tq.<mask>(),"q.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.<mask>() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1327,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7012,7028,MethodCallMutator,matchesWhitespace,space,1,0.11525465,tq.<mask>(),"q.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.<mask>() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1328,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7012,7028,MethodCallMutator,matchesWhitespace,null,2,0.09716417,tq.<mask>(),"q.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.<mask>() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1329,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7012,7028,MethodCallMutator,matchesWhitespace,next,3,0.06850581,tq.<mask>(),"q.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.<mask>() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1330,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7012,7028,MethodCallMutator,matchesWhitespace,blank,4,0.053450767,tq.<mask>(),"q.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.<mask>() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1331,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7009,7010,IdentifierMutator-Variable,tq,value,0,0.3778236,<mask>," if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !<mask>.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1332,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7009,7010,IdentifierMutator-Variable,tq,q,1,0.09338234,<mask>," if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !<mask>.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1333,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7009,7010,IdentifierMutator-Variable,tq,key,2,0.035763178,<mask>," if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !<mask>.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1334,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7009,7010,IdentifierMutator-Variable,tq,qv,3,0.03536203,<mask>," if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !<mask>.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1335,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7009,7010,IdentifierMutator-Variable,tq,token,4,0.029040476,<mask>," if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !<mask>.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1336,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7009,7010,FieldReferenceMutator,tq,value,0,0.3778236,<mask>," if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !<mask>.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1337,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7009,7010,FieldReferenceMutator,tq,q,1,0.09338234,<mask>," if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !<mask>.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1338,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7009,7010,FieldReferenceMutator,tq,key,2,0.035763178,<mask>," if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !<mask>.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1339,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7009,7010,FieldReferenceMutator,tq,qv,3,0.03536203,<mask>," if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !<mask>.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1340,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7009,7010,FieldReferenceMutator,tq,token,4,0.029040476,<mask>," if (tq.matchChomp(""="")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !<mask>.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1341,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7035,7035,UnaryOperatorMutator,!,(!,1,0.0031392884,<mask>tq.isEmpty(),")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() &&<mask>tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1342,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7035,7035,UnaryOperatorMutator,!,//,3,1.8293862E-4,<mask>tq.isEmpty(),")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() &&<mask>tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1343,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7035,7035,UnaryOperatorMutator,!,!!,4,1.2550209E-4,<mask>tq.isEmpty(),")) {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() &&<mask>tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1344,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7039,7045,MethodCallMutator,isEmpty,empty,0,0.40317872,tq.<mask>(),"           tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.<mask>()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1345,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7039,7045,MethodCallMutator,isEmpty,space,1,0.17203258,tq.<mask>(),"           tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.<mask>()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1346,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7039,7045,MethodCallMutator,isEmpty,next,2,0.048696287,tq.<mask>(),"           tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.<mask>()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1347,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7039,7045,MethodCallMutator,isEmpty,complete,3,0.036130074,tq.<mask>(),"           tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.<mask>()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1348,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7039,7045,MethodCallMutator,isEmpty,length,4,0.024531983,tq.<mask>(),"           tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.<mask>()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1349,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7036,7037,IdentifierMutator-Variable,tq,value,0,0.7613828,<mask>," {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !<mask>.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1350,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7036,7037,IdentifierMutator-Variable,tq,value,1,0.18300009,<mask>," {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !<mask>.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1351,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7036,7037,IdentifierMutator-Variable,tq,tag,2,0.005852184,<mask>," {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !<mask>.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1352,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7036,7037,IdentifierMutator-Variable,tq,key,3,0.004874258,<mask>," {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !<mask>.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1353,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7036,7037,IdentifierMutator-Variable,tq,string,4,0.0034542507,<mask>," {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !<mask>.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1354,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7036,7037,FieldReferenceMutator,tq,value,0,0.7613828,<mask>," {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !<mask>.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1355,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7036,7037,FieldReferenceMutator,tq,value,1,0.18300009,<mask>," {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !<mask>.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1356,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7036,7037,FieldReferenceMutator,tq,tag,2,0.005852184,<mask>," {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !<mask>.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1357,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7036,7037,FieldReferenceMutator,tq,key,3,0.004874258,<mask>," {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !<mask>.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1358,Parser.java,parseAttribute,Attribute parseAttribute(),182,197,7036,7037,FieldReferenceMutator,tq,string,4,0.0034542507,<mask>," {
            tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !<mask>.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1359,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7083,7088,MethodCallMutator,append,push,2,0.0012430478,valueAccum.<mask>(tq.consume()),"    if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.<mask>(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1360,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7083,7088,MethodCallMutator,append,write,3,7.5856096E-4,valueAccum.<mask>(tq.consume()),"    if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.<mask>(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1361,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7083,7088,MethodCallMutator,append,insert,4,4.790649E-4,valueAccum.<mask>(tq.consume()),"    if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.<mask>(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1362,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7072,7081,IdentifierMutator-Variable,valueAccum,value,0,0.7103203,<mask>,"       tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {<mask>.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1363,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7072,7081,IdentifierMutator-Variable,valueAccum,buf,1,0.038259584,<mask>,"       tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {<mask>.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1364,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7072,7081,IdentifierMutator-Variable,valueAccum,accum,2,0.03276263,<mask>,"       tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {<mask>.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1365,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7072,7081,IdentifierMutator-Variable,valueAccum,result,3,0.031411897,<mask>,"       tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {<mask>.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1366,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7072,7081,IdentifierMutator-Variable,valueAccum,out,4,0.0184636,<mask>,"       tq.consumeWhitespace();

            if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {<mask>.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1367,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7093,7099,MethodCallMutator,consume,next,0,0.83348066,tq.<mask>(),"tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.<mask>());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1368,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7093,7099,MethodCallMutator,consume,current,1,0.05099639,tq.<mask>(),"tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.<mask>());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1369,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7093,7099,MethodCallMutator,consume,pop,2,0.017983003,tq.<mask>(),"tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.<mask>());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1370,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7093,7099,MethodCallMutator,consume,char,3,0.013259935,tq.<mask>(),"tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.<mask>());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1371,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7093,7099,MethodCallMutator,consume,get,4,0.010336583,tq.<mask>(),"tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.<mask>());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1372,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7090,7091,IdentifierMutator-Variable,tq,q,0,0.3320136,<mask>,"  if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(<mask>.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1373,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7090,7091,IdentifierMutator-Variable,tq,t,1,0.095455185,<mask>,"  if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(<mask>.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1374,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7090,7091,IdentifierMutator-Variable,tq,tc,2,0.09102006,<mask>,"  if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(<mask>.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1375,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7090,7091,IdentifierMutator-Variable,tq,qt,3,0.03754857,<mask>,"  if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(<mask>.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1376,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7090,7091,IdentifierMutator-Variable,tq,ctx,4,0.029285891,<mask>,"  if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(<mask>.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1377,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7090,7091,FieldReferenceMutator,tq,q,0,0.3320136,<mask>,"  if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(<mask>.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1378,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7090,7091,FieldReferenceMutator,tq,t,1,0.095455185,<mask>,"  if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(<mask>.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1379,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7090,7091,FieldReferenceMutator,tq,tc,2,0.09102006,<mask>,"  if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(<mask>.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1380,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7090,7091,FieldReferenceMutator,tq,qt,3,0.03754857,<mask>,"  if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(<mask>.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1381,Parser.java,parseAttribute,Attribute parseAttribute(),182,198,7090,7091,FieldReferenceMutator,tq,ctx,4,0.029285891,<mask>,"  if (tq.matchChomp(SQ)) {
                value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(<mask>.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1382,Parser.java,parseAttribute,Attribute parseAttribute(),182,200,7144,7144,AssignmentMutator,value=valueAccum.toString(),.,0,0.3236116,value <mask>= valueAccum.toString(),"Q);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value<mask>= valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1383,Parser.java,parseAttribute,Attribute parseAttribute(),182,200,7144,7144,AssignmentMutator,value=valueAccum.toString(),||,1,0.17768814,value <mask>= valueAccum.toString(),"Q);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value<mask>= valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1384,Parser.java,parseAttribute,Attribute parseAttribute(),182,200,7144,7144,AssignmentMutator,value=valueAccum.toString(),.,2,0.09158254,value <mask>= valueAccum.toString(),"Q);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value<mask>= valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1385,Parser.java,parseAttribute,Attribute parseAttribute(),182,200,7144,7144,AssignmentMutator,value=valueAccum.toString(),|,3,0.059036143,value <mask>= valueAccum.toString(),"Q);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value<mask>= valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1386,Parser.java,parseAttribute,Attribute parseAttribute(),182,200,7144,7144,AssignmentMutator,value=valueAccum.toString(),||,4,0.05712814,value <mask>= valueAccum.toString(),"Q);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value<mask>= valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1387,Parser.java,parseAttribute,Attribute parseAttribute(),182,200,7139,7143,IdentifierMutator-Variable,value,key,1,0.0034373377,<mask>,"        value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }<mask> = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1388,Parser.java,parseAttribute,Attribute parseAttribute(),182,200,7139,7143,IdentifierMutator-Variable,value,string,3,7.4183044E-4,<mask>,"        value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }<mask> = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1389,Parser.java,parseAttribute,Attribute parseAttribute(),182,200,7139,7143,IdentifierMutator-Variable,value,result,4,5.049618E-4,<mask>,"        value = tq.chompTo(SQ);
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }<mask> = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1390,Parser.java,parseAttribute,Attribute parseAttribute(),182,200,7158,7165,MethodCallMutator,toString,build,0,0.49235082,valueAccum.<mask>(),"          } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.<mask>();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1391,Parser.java,parseAttribute,Attribute parseAttribute(),182,200,7158,7165,MethodCallMutator,toString,string,1,0.15986821,valueAccum.<mask>(),"          } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.<mask>();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1392,Parser.java,parseAttribute,Attribute parseAttribute(),182,200,7158,7165,MethodCallMutator,toString,join,2,0.08532421,valueAccum.<mask>(),"          } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.<mask>();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1393,Parser.java,parseAttribute,Attribute parseAttribute(),182,200,7158,7165,MethodCallMutator,toString,replace,3,0.047348984,valueAccum.<mask>(),"          } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.<mask>();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1394,Parser.java,parseAttribute,Attribute parseAttribute(),182,200,7158,7165,MethodCallMutator,toString,value,4,0.03752399,valueAccum.<mask>(),"          } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.<mask>();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1395,Parser.java,parseAttribute,Attribute parseAttribute(),182,200,7147,7156,IdentifierMutator-Variable,valueAccum,accum,0,0.36651528,<mask>,");
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value =<mask>.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1396,Parser.java,parseAttribute,Attribute parseAttribute(),182,200,7147,7156,IdentifierMutator-Variable,valueAccum,buf,1,0.2946081,<mask>,");
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value =<mask>.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1397,Parser.java,parseAttribute,Attribute parseAttribute(),182,200,7147,7156,IdentifierMutator-Variable,valueAccum,value,2,0.07762766,<mask>,");
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value =<mask>.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1398,Parser.java,parseAttribute,Attribute parseAttribute(),182,200,7147,7156,IdentifierMutator-Variable,valueAccum,result,3,0.034303706,<mask>,");
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value =<mask>.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1399,Parser.java,parseAttribute,Attribute parseAttribute(),182,200,7147,7156,IdentifierMutator-Variable,valueAccum,acc,4,0.03407007,<mask>,");
            } else if (tq.matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value =<mask>.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1400,Parser.java,parseAttribute,Attribute parseAttribute(),182,202,7199,7215,MethodCallMutator,consumeWhitespace,next,0,0.26669902,tq.<mask>(),"          value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.<mask>();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1401,Parser.java,parseAttribute,Attribute parseAttribute(),182,202,7199,7215,MethodCallMutator,consumeWhitespace,close,1,0.26383182,tq.<mask>(),"          value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.<mask>();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1402,Parser.java,parseAttribute,Attribute parseAttribute(),182,202,7199,7215,MethodCallMutator,consumeWhitespace,continue,2,0.05582963,tq.<mask>(),"          value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.<mask>();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1403,Parser.java,parseAttribute,Attribute parseAttribute(),182,202,7199,7215,MethodCallMutator,consumeWhitespace,pop,3,0.054662347,tq.<mask>(),"          value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.<mask>();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1404,Parser.java,parseAttribute,Attribute parseAttribute(),182,202,7199,7215,MethodCallMutator,consumeWhitespace,clean,4,0.0490091,tq.<mask>(),"          value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.<mask>();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1405,Parser.java,parseAttribute,Attribute parseAttribute(),182,202,7196,7197,IdentifierMutator-Variable,tq,q,0,0.09344692,<mask>,"matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }<mask>.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1406,Parser.java,parseAttribute,Attribute parseAttribute(),182,202,7196,7197,IdentifierMutator-Variable,tq,reader,1,0.08091708,<mask>,"matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }<mask>.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1407,Parser.java,parseAttribute,Attribute parseAttribute(),182,202,7196,7197,IdentifierMutator-Variable,tq,this,2,0.07067452,<mask>,"matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }<mask>.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1408,Parser.java,parseAttribute,Attribute parseAttribute(),182,202,7196,7197,IdentifierMutator-Variable,tq,parser,3,0.07052855,<mask>,"matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }<mask>.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1409,Parser.java,parseAttribute,Attribute parseAttribute(),182,202,7196,7197,IdentifierMutator-Variable,tq,waiter,4,0.059799522,<mask>,"matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }<mask>.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1410,Parser.java,parseAttribute,Attribute parseAttribute(),182,202,7196,7197,FieldReferenceMutator,tq,q,0,0.09344692,<mask>,"matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }<mask>.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1411,Parser.java,parseAttribute,Attribute parseAttribute(),182,202,7196,7197,FieldReferenceMutator,tq,reader,1,0.08091708,<mask>,"matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }<mask>.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1412,Parser.java,parseAttribute,Attribute parseAttribute(),182,202,7196,7197,FieldReferenceMutator,tq,this,2,0.07067452,<mask>,"matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }<mask>.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1413,Parser.java,parseAttribute,Attribute parseAttribute(),182,202,7196,7197,FieldReferenceMutator,tq,parser,3,0.07052855,<mask>,"matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }<mask>.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1414,Parser.java,parseAttribute,Attribute parseAttribute(),182,202,7196,7197,FieldReferenceMutator,tq,waiter,4,0.059799522,<mask>,"matchChomp(DQ)) {
                value = tq.chompTo(DQ);
            } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }<mask>.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1415,Parser.java,parseAttribute,Attribute parseAttribute(),182,204,7254,7257,BinaryOperatorMutator,!=,>,0,0.4462521,key.length() <mask> 0,"     } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length()<mask>0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1416,Parser.java,parseAttribute,Attribute parseAttribute(),182,204,7254,7257,BinaryOperatorMutator,!=,==,1,0.37698948,key.length() <mask> 0,"     } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length()<mask>0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1417,Parser.java,parseAttribute,Attribute parseAttribute(),182,204,7254,7257,BinaryOperatorMutator,!=,>,2,0.15352856,key.length() <mask> 0,"     } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length()<mask>0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1418,Parser.java,parseAttribute,Attribute parseAttribute(),182,204,7254,7257,BinaryOperatorMutator,!=,=,4,0.004564527,key.length() <mask> 0,"     } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length()<mask>0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1419,Parser.java,parseAttribute,Attribute parseAttribute(),182,204,7246,7251,MethodCallMutator,length,size,1,0.001833022,key.<mask>(),"       } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.<mask>() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1420,Parser.java,parseAttribute,Attribute parseAttribute(),182,204,7246,7251,MethodCallMutator,length,index,2,0.0017582132,key.<mask>(),"       } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.<mask>() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1421,Parser.java,parseAttribute,Attribute parseAttribute(),182,204,7246,7251,MethodCallMutator,length,position,3,0.0014291336,key.<mask>(),"       } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.<mask>() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1422,Parser.java,parseAttribute,Attribute parseAttribute(),182,204,7246,7251,MethodCallMutator,length,len,4,0.0013183613,key.<mask>(),"       } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.<mask>() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1423,Parser.java,parseAttribute,Attribute parseAttribute(),182,204,7242,7244,IdentifierMutator-Variable,key,value,0,0.5114789,<mask>,"         } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (<mask>.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1424,Parser.java,parseAttribute,Attribute parseAttribute(),182,204,7242,7244,IdentifierMutator-Variable,key,value,2,0.0020220906,<mask>,"         } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (<mask>.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1425,Parser.java,parseAttribute,Attribute parseAttribute(),182,204,7242,7244,IdentifierMutator-Variable,key,name,3,0.0013361735,<mask>,"         } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (<mask>.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1426,Parser.java,parseAttribute,Attribute parseAttribute(),182,204,7242,7244,IdentifierMutator-Variable,key,string,4,0.001328874,<mask>,"         } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (<mask>.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1427,Parser.java,parseAttribute,Attribute parseAttribute(),182,204,7258,7258,IdentifierMutator-Literal,0,null,1,0.0019930336,<mask>,"    } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() !=<mask>)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1428,Parser.java,parseAttribute,Attribute parseAttribute(),182,204,7258,7258,IdentifierMutator-Literal,0,1,2,0.0014012168,<mask>,"    } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() !=<mask>)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1429,Parser.java,parseAttribute,Attribute parseAttribute(),182,204,7258,7258,IdentifierMutator-Literal,0,zero,3,3.3310967E-4,<mask>,"    } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() !=<mask>)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1430,Parser.java,parseAttribute,Attribute parseAttribute(),182,204,7258,7258,IdentifierMutator-Literal,0,32,4,3.2447468E-4,<mask>,"    } else {
                StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() !=<mask>)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1431,Parser.java,parseAttribute,Attribute parseAttribute(),182,205,7290,7306,MethodCallMutator,createFromEncoded,create,0,0.29008028,"Attribute.<mask>(key, value)","     StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.<mask>(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1432,Parser.java,parseAttribute,Attribute parseAttribute(),182,205,7290,7306,MethodCallMutator,createFromEncoded,of,1,0.13075079,"Attribute.<mask>(key, value)","     StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.<mask>(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1433,Parser.java,parseAttribute,Attribute parseAttribute(),182,205,7290,7306,MethodCallMutator,createFromEncoded,create,2,0.09715833,"Attribute.<mask>(key, value)","     StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.<mask>(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1434,Parser.java,parseAttribute,Attribute parseAttribute(),182,205,7290,7306,MethodCallMutator,createFromEncoded,of,3,0.040298842,"Attribute.<mask>(key, value)","     StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.<mask>(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1435,Parser.java,parseAttribute,Attribute parseAttribute(),182,205,7290,7306,MethodCallMutator,createFromEncoded,get,4,0.03867877,"Attribute.<mask>(key, value)","     StringBuilder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.<mask>(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1436,Parser.java,parseAttribute,Attribute parseAttribute(),182,205,7308,7310,IdentifierMutator-Variable,key,name,1,7.639875E-4,<mask>,"Builder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(<mask>, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1437,Parser.java,parseAttribute,Attribute parseAttribute(),182,205,7308,7310,IdentifierMutator-Variable,key,attribute,2,2.9918292E-4,<mask>,"Builder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(<mask>, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1438,Parser.java,parseAttribute,Attribute parseAttribute(),182,205,7308,7310,IdentifierMutator-Variable,key,type,3,1.16251955E-4,<mask>,"Builder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(<mask>, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1439,Parser.java,parseAttribute,Attribute parseAttribute(),182,205,7308,7310,IdentifierMutator-Variable,key,attr,4,1.1447627E-4,<mask>,"Builder valueAccum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(<mask>, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1440,Parser.java,parseAttribute,Attribute parseAttribute(),182,205,7313,7317,IdentifierMutator-Variable,value,null,1,0.017650094,<mask>,"Accum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key,<mask>);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1441,Parser.java,parseAttribute,Attribute parseAttribute(),182,205,7313,7317,IdentifierMutator-Variable,value,encoding,2,0.012930188,<mask>,"Accum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key,<mask>);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1442,Parser.java,parseAttribute,Attribute parseAttribute(),182,205,7313,7317,IdentifierMutator-Variable,value,true,3,0.009605757,<mask>,"Accum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key,<mask>);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1443,Parser.java,parseAttribute,Attribute parseAttribute(),182,205,7313,7317,IdentifierMutator-Variable,value,val,4,0.0069379685,<mask>,"Accum = new StringBuilder();
                // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key,<mask>);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1444,Parser.java,parseAttribute,Attribute parseAttribute(),182,207,7351,7357,MethodCallMutator,consume,pop,0,0.8609345,tq.<mask>()," "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.<mask>(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1445,Parser.java,parseAttribute,Attribute parseAttribute(),182,207,7351,7357,MethodCallMutator,consume,next,1,0.05799363,tq.<mask>()," "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.<mask>(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1446,Parser.java,parseAttribute,Attribute parseAttribute(),182,207,7351,7357,MethodCallMutator,consume,push,2,0.01038712,tq.<mask>()," "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.<mask>(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1447,Parser.java,parseAttribute,Attribute parseAttribute(),182,207,7351,7357,MethodCallMutator,consume,prev,3,0.008460388,tq.<mask>()," "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.<mask>(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1448,Parser.java,parseAttribute,Attribute parseAttribute(),182,207,7351,7357,MethodCallMutator,consume,remove,4,0.005284135,tq.<mask>()," "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.<mask>(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1449,Parser.java,parseAttribute,Attribute parseAttribute(),182,207,7348,7349,IdentifierMutator-Variable,tq,q,0,0.23622525,<mask>,"            // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {<mask>.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1450,Parser.java,parseAttribute,Attribute parseAttribute(),182,207,7348,7349,IdentifierMutator-Variable,tq,q,1,0.19159134,<mask>,"            // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {<mask>.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1451,Parser.java,parseAttribute,Attribute parseAttribute(),182,207,7348,7349,IdentifierMutator-Variable,tq,stream,2,0.065939784,<mask>,"            // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {<mask>.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1452,Parser.java,parseAttribute,Attribute parseAttribute(),182,207,7348,7349,IdentifierMutator-Variable,tq,t,3,0.052454688,<mask>,"            // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {<mask>.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1453,Parser.java,parseAttribute,Attribute parseAttribute(),182,207,7348,7349,IdentifierMutator-Variable,tq,reader,4,0.041940063,<mask>,"            // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {<mask>.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1454,Parser.java,parseAttribute,Attribute parseAttribute(),182,207,7348,7349,FieldReferenceMutator,tq,q,0,0.23622525,<mask>,"            // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {<mask>.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1455,Parser.java,parseAttribute,Attribute parseAttribute(),182,207,7348,7349,FieldReferenceMutator,tq,q,1,0.19159134,<mask>,"            // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {<mask>.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1456,Parser.java,parseAttribute,Attribute parseAttribute(),182,207,7348,7349,FieldReferenceMutator,tq,stream,2,0.065939784,<mask>,"            // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {<mask>.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1457,Parser.java,parseAttribute,Attribute parseAttribute(),182,207,7348,7349,FieldReferenceMutator,tq,t,3,0.052454688,<mask>,"            // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {<mask>.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1458,Parser.java,parseAttribute,Attribute parseAttribute(),182,207,7348,7349,FieldReferenceMutator,tq,reader,4,0.041940063,<mask>,"            // no ' or "" to look for, so scan to end tag or space (or end of stream)
                while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {<mask>.consume(); // unknown char, keep popping so not get stuck
            return null;
        }
   "
1459,Parser.java,parseAttribute,Attribute parseAttribute(),182,208,7428,7431,IdentifierMutator-Literal,null,value,1,0.35668492,<mask>,"         while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return<mask>;
        }
   "
1460,Parser.java,parseAttribute,Attribute parseAttribute(),182,208,7428,7431,IdentifierMutator-Literal,null,false,2,0.026031807,<mask>,"         while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return<mask>;
        }
   "
1461,Parser.java,parseAttribute,Attribute parseAttribute(),182,208,7428,7431,IdentifierMutator-Literal,null,"""""",3,0.0259941,<mask>,"         while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return<mask>;
        }
   "
1462,Parser.java,parseAttribute,Attribute parseAttribute(),182,208,7428,7431,IdentifierMutator-Literal,null,"''",4,0.018798977,<mask>,"         while (!tq.matchesAny(""<"", ""/>"", "">"") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                    valueAccum.append(tq.consume());
                }
                value = valueAccum.toString();
            }
            tq.consumeWhitespace();
        }
        if (key.length() != 0)
            return Attribute.createFromEncoded(key, value);
        else {
            tq.consume(); // unknown char, keep popping so not get stuck
            return<mask>;
        }
   "
1463,Parser.java,parseTextNode,void parseTextNode(),212,213,7511,7519,MethodCallMutator,consumeTo,text,0,0.1844347,"tq.<mask>(""<"")","void parseTextNode() {
        String text = tq.<mask>(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(textNode);
    }"
1464,Parser.java,parseTextNode,void parseTextNode(),212,213,7511,7519,MethodCallMutator,consumeTo,join,1,0.14525455,"tq.<mask>(""<"")","void parseTextNode() {
        String text = tq.<mask>(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(textNode);
    }"
1465,Parser.java,parseTextNode,void parseTextNode(),212,213,7511,7519,MethodCallMutator,consumeTo,get,2,0.09967437,"tq.<mask>(""<"")","void parseTextNode() {
        String text = tq.<mask>(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(textNode);
    }"
1466,Parser.java,parseTextNode,void parseTextNode(),212,213,7511,7519,MethodCallMutator,consumeTo,escape,3,0.037822165,"tq.<mask>(""<"")","void parseTextNode() {
        String text = tq.<mask>(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(textNode);
    }"
1467,Parser.java,parseTextNode,void parseTextNode(),212,213,7511,7519,MethodCallMutator,consumeTo,string,4,0.031663083,"tq.<mask>(""<"")","void parseTextNode() {
        String text = tq.<mask>(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(textNode);
    }"
1468,Parser.java,parseTextNode,void parseTextNode(),212,213,7508,7509,IdentifierMutator-Variable,tq,parser,0,0.13712764,<mask>,"void parseTextNode() {
        String text =<mask>.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(textNode);
    }"
1469,Parser.java,parseTextNode,void parseTextNode(),212,213,7508,7509,IdentifierMutator-Variable,tq,stream,1,0.09574093,<mask>,"void parseTextNode() {
        String text =<mask>.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(textNode);
    }"
1470,Parser.java,parseTextNode,void parseTextNode(),212,213,7508,7509,IdentifierMutator-Variable,tq,reader,2,0.08205119,<mask>,"void parseTextNode() {
        String text =<mask>.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(textNode);
    }"
1471,Parser.java,parseTextNode,void parseTextNode(),212,213,7508,7509,IdentifierMutator-Variable,tq,input,3,0.05849094,<mask>,"void parseTextNode() {
        String text =<mask>.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(textNode);
    }"
1472,Parser.java,parseTextNode,void parseTextNode(),212,213,7508,7509,IdentifierMutator-Variable,tq,sentence,4,0.043990392,<mask>,"void parseTextNode() {
        String text =<mask>.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(textNode);
    }"
1473,Parser.java,parseTextNode,void parseTextNode(),212,213,7508,7509,FieldReferenceMutator,tq,parser,0,0.13712764,<mask>,"void parseTextNode() {
        String text =<mask>.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(textNode);
    }"
1474,Parser.java,parseTextNode,void parseTextNode(),212,213,7508,7509,FieldReferenceMutator,tq,stream,1,0.09574093,<mask>,"void parseTextNode() {
        String text =<mask>.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(textNode);
    }"
1475,Parser.java,parseTextNode,void parseTextNode(),212,213,7508,7509,FieldReferenceMutator,tq,reader,2,0.08205119,<mask>,"void parseTextNode() {
        String text =<mask>.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(textNode);
    }"
1476,Parser.java,parseTextNode,void parseTextNode(),212,213,7508,7509,FieldReferenceMutator,tq,input,3,0.05849094,<mask>,"void parseTextNode() {
        String text =<mask>.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(textNode);
    }"
1477,Parser.java,parseTextNode,void parseTextNode(),212,213,7508,7509,FieldReferenceMutator,tq,sentence,4,0.043990392,<mask>,"void parseTextNode() {
        String text =<mask>.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(textNode);
    }"
1478,Parser.java,parseTextNode,void parseTextNode(),212,213,7521,7523,IdentifierMutator-Literal,"""<""",parent,0,0.09100756,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(<mask>);
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(textNode);
    }"
1479,Parser.java,parseTextNode,void parseTextNode(),212,213,7521,7523,IdentifierMutator-Literal,"""<""",0,1,0.06695882,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(<mask>);
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(textNode);
    }"
1480,Parser.java,parseTextNode,void parseTextNode(),212,213,7521,7523,IdentifierMutator-Literal,"""<""",node,2,0.04790121,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(<mask>);
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(textNode);
    }"
1481,Parser.java,parseTextNode,void parseTextNode(),212,213,7521,7523,IdentifierMutator-Literal,"""<""",this,3,0.04426071,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(<mask>);
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(textNode);
    }"
1482,Parser.java,parseTextNode,void parseTextNode(),212,213,7521,7523,IdentifierMutator-Literal,"""<""",1,4,0.03466243,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(<mask>);
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(textNode);
    }"
1483,Parser.java,parseTextNode,void parseTextNode(),212,214,7564,7580,MethodCallMutator,createFromEncoded,parse,0,0.3676172,"TextNode.<mask>(text, baseUri)","void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.<mask>(text, baseUri);
        last().appendChild(textNode);
    }"
1484,Parser.java,parseTextNode,void parseTextNode(),212,214,7564,7580,MethodCallMutator,createFromEncoded,create,1,0.20853195,"TextNode.<mask>(text, baseUri)","void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.<mask>(text, baseUri);
        last().appendChild(textNode);
    }"
1485,Parser.java,parseTextNode,void parseTextNode(),212,214,7564,7580,MethodCallMutator,createFromEncoded,new,2,0.10090497,"TextNode.<mask>(text, baseUri)","void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.<mask>(text, baseUri);
        last().appendChild(textNode);
    }"
1486,Parser.java,parseTextNode,void parseTextNode(),212,214,7564,7580,MethodCallMutator,createFromEncoded,of,3,0.04269213,"TextNode.<mask>(text, baseUri)","void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.<mask>(text, baseUri);
        last().appendChild(textNode);
    }"
1487,Parser.java,parseTextNode,void parseTextNode(),212,214,7564,7580,MethodCallMutator,createFromEncoded,from,4,0.035896216,"TextNode.<mask>(text, baseUri)","void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.<mask>(text, baseUri);
        last().appendChild(textNode);
    }"
1488,Parser.java,parseTextNode,void parseTextNode(),212,214,7582,7585,IdentifierMutator-Variable,text,Text,2,1.6313703E-4,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(<mask>, baseUri);
        last().appendChild(textNode);
    }"
1489,Parser.java,parseTextNode,void parseTextNode(),212,214,7582,7585,IdentifierMutator-Variable,text,content,3,4.2457115E-5,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(<mask>, baseUri);
        last().appendChild(textNode);
    }"
1490,Parser.java,parseTextNode,void parseTextNode(),212,214,7582,7585,IdentifierMutator-Variable,text,TEXT,4,4.1471776E-5,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(<mask>, baseUri);
        last().appendChild(textNode);
    }"
1491,Parser.java,parseTextNode,void parseTextNode(),212,214,7588,7594,IdentifierMutator-Variable,baseUri,encoding,0,0.7650876,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text,<mask>);
        last().appendChild(textNode);
    }"
1492,Parser.java,parseTextNode,void parseTextNode(),212,214,7588,7594,IdentifierMutator-Variable,baseUri,true,1,0.04739154,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text,<mask>);
        last().appendChild(textNode);
    }"
1493,Parser.java,parseTextNode,void parseTextNode(),212,214,7588,7594,IdentifierMutator-Variable,baseUri,enc,2,0.02485647,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text,<mask>);
        last().appendChild(textNode);
    }"
1494,Parser.java,parseTextNode,void parseTextNode(),212,214,7588,7594,IdentifierMutator-Variable,baseUri,false,3,0.015970083,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text,<mask>);
        last().appendChild(textNode);
    }"
1495,Parser.java,parseTextNode,void parseTextNode(),212,214,7588,7594,IdentifierMutator-Variable,baseUri,null,4,0.01451827,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text,<mask>);
        last().appendChild(textNode);
    }"
1496,Parser.java,parseTextNode,void parseTextNode(),212,214,7588,7594,FieldReferenceMutator,baseUri,encoding,0,0.7650876,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text,<mask>);
        last().appendChild(textNode);
    }"
1497,Parser.java,parseTextNode,void parseTextNode(),212,214,7588,7594,FieldReferenceMutator,baseUri,true,1,0.04739154,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text,<mask>);
        last().appendChild(textNode);
    }"
1498,Parser.java,parseTextNode,void parseTextNode(),212,214,7588,7594,FieldReferenceMutator,baseUri,enc,2,0.02485647,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text,<mask>);
        last().appendChild(textNode);
    }"
1499,Parser.java,parseTextNode,void parseTextNode(),212,214,7588,7594,FieldReferenceMutator,baseUri,false,3,0.015970083,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text,<mask>);
        last().appendChild(textNode);
    }"
1500,Parser.java,parseTextNode,void parseTextNode(),212,214,7588,7594,FieldReferenceMutator,baseUri,null,4,0.01451827,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text,<mask>);
        last().appendChild(textNode);
    }"
1501,Parser.java,parseTextNode,void parseTextNode(),212,215,7613,7623,MethodCallMutator,appendChild,add,0,0.2942595,last().<mask>(textNode),"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().<mask>(textNode);
    }"
1502,Parser.java,parseTextNode,void parseTextNode(),212,215,7613,7623,MethodCallMutator,appendChild,append,1,0.27037504,last().<mask>(textNode),"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().<mask>(textNode);
    }"
1503,Parser.java,parseTextNode,void parseTextNode(),212,215,7613,7623,MethodCallMutator,appendChild,push,2,0.0938535,last().<mask>(textNode),"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().<mask>(textNode);
    }"
1504,Parser.java,parseTextNode,void parseTextNode(),212,215,7613,7623,MethodCallMutator,appendChild,next,3,0.08398175,last().<mask>(textNode),"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().<mask>(textNode);
    }"
1505,Parser.java,parseTextNode,void parseTextNode(),212,215,7613,7623,MethodCallMutator,appendChild,set,4,0.039143067,last().<mask>(textNode),"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().<mask>(textNode);
    }"
1506,Parser.java,parseTextNode,void parseTextNode(),212,215,7606,7609,MethodCallMutator,last,root,0,0.37797478,<mask>(),"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);<mask>().appendChild(textNode);
    }"
1507,Parser.java,parseTextNode,void parseTextNode(),212,215,7606,7609,MethodCallMutator,last,node,1,0.17642435,<mask>(),"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);<mask>().appendChild(textNode);
    }"
1508,Parser.java,parseTextNode,void parseTextNode(),212,215,7606,7609,MethodCallMutator,last,parent,2,0.080099754,<mask>(),"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);<mask>().appendChild(textNode);
    }"
1509,Parser.java,parseTextNode,void parseTextNode(),212,215,7606,7609,MethodCallMutator,last,body,3,0.049664874,<mask>(),"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);<mask>().appendChild(textNode);
    }"
1510,Parser.java,parseTextNode,void parseTextNode(),212,215,7606,7609,MethodCallMutator,last,head,4,0.024384193,<mask>(),"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);<mask>().appendChild(textNode);
    }"
1511,Parser.java,parseTextNode,void parseTextNode(),212,215,7625,7632,IdentifierMutator-Variable,textNode,text,0,0.43188697,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(<mask>);
    }"
1512,Parser.java,parseTextNode,void parseTextNode(),212,215,7625,7632,IdentifierMutator-Variable,textNode,node,1,0.35808784,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(<mask>);
    }"
1513,Parser.java,parseTextNode,void parseTextNode(),212,215,7625,7632,IdentifierMutator-Variable,textNode,tree,2,0.027632263,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(<mask>);
    }"
1514,Parser.java,parseTextNode,void parseTextNode(),212,215,7625,7632,IdentifierMutator-Variable,textNode,child,3,0.025314266,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(<mask>);
    }"
1515,Parser.java,parseTextNode,void parseTextNode(),212,215,7625,7632,IdentifierMutator-Variable,textNode,this,4,0.023931846,<mask>,"void parseTextNode() {
        String text = tq.consumeTo(""<"");
        TextNode textNode = TextNode.createFromEncoded(text, baseUri);
        last().appendChild(<mask>);
    }"
1516,Parser.java,parseCdata,void parseCdata(),218,219,7686,7692,MethodCallMutator,consume,append,0,0.7395869,"tq.<mask>(""<![CDATA["")","void parseCdata() {
        tq.<mask>(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1517,Parser.java,parseCdata,void parseCdata(),218,219,7686,7692,MethodCallMutator,consume,write,1,0.063776895,"tq.<mask>(""<![CDATA["")","void parseCdata() {
        tq.<mask>(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1518,Parser.java,parseCdata,void parseCdata(),218,219,7686,7692,MethodCallMutator,consume,push,2,0.05861848,"tq.<mask>(""<![CDATA["")","void parseCdata() {
        tq.<mask>(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1519,Parser.java,parseCdata,void parseCdata(),218,219,7686,7692,MethodCallMutator,consume,print,3,0.01198273,"tq.<mask>(""<![CDATA["")","void parseCdata() {
        tq.<mask>(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1520,Parser.java,parseCdata,void parseCdata(),218,219,7686,7692,MethodCallMutator,consume,log,4,0.011978914,"tq.<mask>(""<![CDATA["")","void parseCdata() {
        tq.<mask>(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1521,Parser.java,parseCdata,void parseCdata(),218,219,7683,7684,IdentifierMutator-Variable,tq,parser,0,0.22984357,<mask>,"void parseCdata() {<mask>.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1522,Parser.java,parseCdata,void parseCdata(),218,219,7683,7684,IdentifierMutator-Variable,tq,stream,1,0.13927628,<mask>,"void parseCdata() {<mask>.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1523,Parser.java,parseCdata,void parseCdata(),218,219,7683,7684,IdentifierMutator-Variable,tq,reader,2,0.09835956,<mask>,"void parseCdata() {<mask>.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1524,Parser.java,parseCdata,void parseCdata(),218,219,7683,7684,IdentifierMutator-Variable,tq,input,3,0.05311244,<mask>,"void parseCdata() {<mask>.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1525,Parser.java,parseCdata,void parseCdata(),218,219,7683,7684,IdentifierMutator-Variable,tq,buffer,4,0.033880886,<mask>,"void parseCdata() {<mask>.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1526,Parser.java,parseCdata,void parseCdata(),218,219,7683,7684,FieldReferenceMutator,tq,parser,0,0.22984357,<mask>,"void parseCdata() {<mask>.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1527,Parser.java,parseCdata,void parseCdata(),218,219,7683,7684,FieldReferenceMutator,tq,stream,1,0.13927628,<mask>,"void parseCdata() {<mask>.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1528,Parser.java,parseCdata,void parseCdata(),218,219,7683,7684,FieldReferenceMutator,tq,reader,2,0.09835956,<mask>,"void parseCdata() {<mask>.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1529,Parser.java,parseCdata,void parseCdata(),218,219,7683,7684,FieldReferenceMutator,tq,input,3,0.05311244,<mask>,"void parseCdata() {<mask>.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1530,Parser.java,parseCdata,void parseCdata(),218,219,7683,7684,FieldReferenceMutator,tq,buffer,4,0.033880886,<mask>,"void parseCdata() {<mask>.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1531,Parser.java,parseCdata,void parseCdata(),218,219,7694,7704,IdentifierMutator-Literal,"""<![CDATA[""",1,0,0.1872723,<mask>,"void parseCdata() {
        tq.consume(<mask>);
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1532,Parser.java,parseCdata,void parseCdata(),218,219,7694,7704,IdentifierMutator-Literal,"""<![CDATA[""",true,1,0.07363087,<mask>,"void parseCdata() {
        tq.consume(<mask>);
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1533,Parser.java,parseCdata,void parseCdata(),218,219,7694,7704,IdentifierMutator-Literal,"""<![CDATA[""",2,2,0.048486635,<mask>,"void parseCdata() {
        tq.consume(<mask>);
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1534,Parser.java,parseCdata,void parseCdata(),218,219,7694,7704,IdentifierMutator-Literal,"""<![CDATA[""",0,3,0.031296015,<mask>,"void parseCdata() {
        tq.consume(<mask>);
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1535,Parser.java,parseCdata,void parseCdata(),218,219,7694,7704,IdentifierMutator-Literal,"""<![CDATA[""",8,4,0.0303867,<mask>,"void parseCdata() {
        tq.consume(<mask>);
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1536,Parser.java,parseCdata,void parseCdata(),218,220,7736,7742,MethodCallMutator,chompTo,select,0,0.13702092,"tq.<mask>(""]]>"")","void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.<mask>(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1537,Parser.java,parseCdata,void parseCdata(),218,220,7736,7742,MethodCallMutator,chompTo,token,1,0.0792933,"tq.<mask>(""]]>"")","void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.<mask>(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1538,Parser.java,parseCdata,void parseCdata(),218,220,7736,7742,MethodCallMutator,chompTo,parse,2,0.0779393,"tq.<mask>(""]]>"")","void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.<mask>(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1539,Parser.java,parseCdata,void parseCdata(),218,220,7736,7742,MethodCallMutator,chompTo,string,3,0.046681304,"tq.<mask>(""]]>"")","void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.<mask>(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1540,Parser.java,parseCdata,void parseCdata(),218,220,7736,7742,MethodCallMutator,chompTo,exec,4,0.045801286,"tq.<mask>(""]]>"")","void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.<mask>(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1541,Parser.java,parseCdata,void parseCdata(),218,220,7733,7734,IdentifierMutator-Variable,tq,text,0,0.75702584,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText =<mask>.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1542,Parser.java,parseCdata,void parseCdata(),218,220,7733,7734,IdentifierMutator-Variable,tq,data,1,0.031475853,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText =<mask>.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1543,Parser.java,parseCdata,void parseCdata(),218,220,7733,7734,IdentifierMutator-Variable,tq,content,2,0.031301036,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText =<mask>.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1544,Parser.java,parseCdata,void parseCdata(),218,220,7733,7734,IdentifierMutator-Variable,tq,xml,3,0.012353634,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText =<mask>.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1545,Parser.java,parseCdata,void parseCdata(),218,220,7733,7734,IdentifierMutator-Variable,tq,input,4,0.011468999,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText =<mask>.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1546,Parser.java,parseCdata,void parseCdata(),218,220,7733,7734,FieldReferenceMutator,tq,text,0,0.75702584,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText =<mask>.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1547,Parser.java,parseCdata,void parseCdata(),218,220,7733,7734,FieldReferenceMutator,tq,data,1,0.031475853,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText =<mask>.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1548,Parser.java,parseCdata,void parseCdata(),218,220,7733,7734,FieldReferenceMutator,tq,content,2,0.031301036,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText =<mask>.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1549,Parser.java,parseCdata,void parseCdata(),218,220,7733,7734,FieldReferenceMutator,tq,xml,3,0.012353634,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText =<mask>.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1550,Parser.java,parseCdata,void parseCdata(),218,220,7733,7734,FieldReferenceMutator,tq,input,4,0.011468999,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText =<mask>.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1551,Parser.java,parseCdata,void parseCdata(),218,220,7744,7748,IdentifierMutator-Literal,"""]]>""",text,0,0.12359192,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(<mask>);
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1552,Parser.java,parseCdata,void parseCdata(),218,220,7744,7748,IdentifierMutator-Literal,"""]]>""",string,1,0.120503925,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(<mask>);
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1553,Parser.java,parseCdata,void parseCdata(),218,220,7744,7748,IdentifierMutator-Literal,"""]]>""",data,2,0.046762623,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(<mask>);
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1554,Parser.java,parseCdata,void parseCdata(),218,220,7744,7748,IdentifierMutator-Literal,"""]]>""",buffer,3,0.030565687,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(<mask>);
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1555,Parser.java,parseCdata,void parseCdata(),218,220,7744,7748,IdentifierMutator-Literal,"""]]>""",1,4,0.027758807,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(<mask>);
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1556,Parser.java,parseCdata,void parseCdata(),218,221,7793,7799,IdentifierMutator-Variable,rawText,text,0,0.7691758,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(<mask>, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1557,Parser.java,parseCdata,void parseCdata(),218,221,7793,7799,IdentifierMutator-Variable,rawText,raw,1,0.04847235,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(<mask>, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1558,Parser.java,parseCdata,void parseCdata(),218,221,7793,7799,IdentifierMutator-Variable,rawText,Text,2,0.036572106,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(<mask>, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1559,Parser.java,parseCdata,void parseCdata(),218,221,7793,7799,IdentifierMutator-Variable,rawText,content,3,0.01969612,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(<mask>, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1560,Parser.java,parseCdata,void parseCdata(),218,221,7793,7799,IdentifierMutator-Variable,rawText,string,4,0.011173748,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(<mask>, baseUri); // constructor does not escape
        last().appendChild(textNode);
    }"
1561,Parser.java,parseCdata,void parseCdata(),218,221,7802,7808,IdentifierMutator-Variable,baseUri,true,0,0.20041947,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText,<mask>); // constructor does not escape
        last().appendChild(textNode);
    }"
1562,Parser.java,parseCdata,void parseCdata(),218,221,7802,7808,IdentifierMutator-Variable,baseUri,false,1,0.137396,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText,<mask>); // constructor does not escape
        last().appendChild(textNode);
    }"
1563,Parser.java,parseCdata,void parseCdata(),218,221,7802,7808,IdentifierMutator-Variable,baseUri,null,2,0.117031924,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText,<mask>); // constructor does not escape
        last().appendChild(textNode);
    }"
1564,Parser.java,parseCdata,void parseCdata(),218,221,7802,7808,IdentifierMutator-Variable,baseUri,this,3,0.04830054,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText,<mask>); // constructor does not escape
        last().appendChild(textNode);
    }"
1565,Parser.java,parseCdata,void parseCdata(),218,221,7802,7808,IdentifierMutator-Variable,baseUri,encoding,4,0.04276494,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText,<mask>); // constructor does not escape
        last().appendChild(textNode);
    }"
1566,Parser.java,parseCdata,void parseCdata(),218,221,7802,7808,FieldReferenceMutator,baseUri,true,0,0.20041947,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText,<mask>); // constructor does not escape
        last().appendChild(textNode);
    }"
1567,Parser.java,parseCdata,void parseCdata(),218,221,7802,7808,FieldReferenceMutator,baseUri,false,1,0.137396,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText,<mask>); // constructor does not escape
        last().appendChild(textNode);
    }"
1568,Parser.java,parseCdata,void parseCdata(),218,221,7802,7808,FieldReferenceMutator,baseUri,null,2,0.117031924,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText,<mask>); // constructor does not escape
        last().appendChild(textNode);
    }"
1569,Parser.java,parseCdata,void parseCdata(),218,221,7802,7808,FieldReferenceMutator,baseUri,this,3,0.04830054,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText,<mask>); // constructor does not escape
        last().appendChild(textNode);
    }"
1570,Parser.java,parseCdata,void parseCdata(),218,221,7802,7808,FieldReferenceMutator,baseUri,encoding,4,0.04276494,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText,<mask>); // constructor does not escape
        last().appendChild(textNode);
    }"
1571,Parser.java,parseCdata,void parseCdata(),218,222,7858,7868,MethodCallMutator,appendChild,add,0,0.35702896,last().<mask>(textNode),"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().<mask>(textNode);
    }"
1572,Parser.java,parseCdata,void parseCdata(),218,222,7858,7868,MethodCallMutator,appendChild,append,1,0.2836684,last().<mask>(textNode),"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().<mask>(textNode);
    }"
1573,Parser.java,parseCdata,void parseCdata(),218,222,7858,7868,MethodCallMutator,appendChild,next,2,0.053042118,last().<mask>(textNode),"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().<mask>(textNode);
    }"
1574,Parser.java,parseCdata,void parseCdata(),218,222,7858,7868,MethodCallMutator,appendChild,parse,3,0.04816412,last().<mask>(textNode),"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().<mask>(textNode);
    }"
1575,Parser.java,parseCdata,void parseCdata(),218,222,7858,7868,MethodCallMutator,appendChild,push,4,0.046066824,last().<mask>(textNode),"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().<mask>(textNode);
    }"
1576,Parser.java,parseCdata,void parseCdata(),218,222,7851,7854,MethodCallMutator,last,root,0,0.47736734,<mask>(),"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape<mask>().appendChild(textNode);
    }"
1577,Parser.java,parseCdata,void parseCdata(),218,222,7851,7854,MethodCallMutator,last,parent,1,0.06902504,<mask>(),"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape<mask>().appendChild(textNode);
    }"
1578,Parser.java,parseCdata,void parseCdata(),218,222,7851,7854,MethodCallMutator,last,node,2,0.06762372,<mask>(),"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape<mask>().appendChild(textNode);
    }"
1579,Parser.java,parseCdata,void parseCdata(),218,222,7851,7854,MethodCallMutator,last,body,3,0.05718831,<mask>(),"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape<mask>().appendChild(textNode);
    }"
1580,Parser.java,parseCdata,void parseCdata(),218,222,7851,7854,MethodCallMutator,last,head,4,0.034360517,<mask>(),"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape<mask>().appendChild(textNode);
    }"
1581,Parser.java,parseCdata,void parseCdata(),218,222,7870,7877,IdentifierMutator-Variable,textNode,node,0,0.43375802,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(<mask>);
    }"
1582,Parser.java,parseCdata,void parseCdata(),218,222,7870,7877,IdentifierMutator-Variable,textNode,text,1,0.13963842,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(<mask>);
    }"
1583,Parser.java,parseCdata,void parseCdata(),218,222,7870,7877,IdentifierMutator-Variable,textNode,this,2,0.13682531,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(<mask>);
    }"
1584,Parser.java,parseCdata,void parseCdata(),218,222,7870,7877,IdentifierMutator-Variable,textNode,xml,3,0.02732946,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(<mask>);
    }"
1585,Parser.java,parseCdata,void parseCdata(),218,222,7870,7877,IdentifierMutator-Variable,textNode,tree,4,0.02344433,<mask>,"void parseCdata() {
        tq.consume(""<![CDATA["");
        String rawText = tq.chompTo(""]]>"");
        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape
        last().appendChild(<mask>);
    }"
1586,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,226,7991,8017,MethodCallMutator,popStackToSuitableContainer,parent,0,0.2700673,<mask>(child.tag()),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent =<mask>(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1587,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,226,7991,8017,MethodCallMutator,popStackToSuitableContainer,get,1,0.185231,<mask>(child.tag()),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent =<mask>(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1588,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,226,7991,8017,MethodCallMutator,popStackToSuitableContainer,find,2,0.09809607,<mask>(child.tag()),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent =<mask>(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1589,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,226,7991,8017,MethodCallMutator,popStackToSuitableContainer,element,3,0.052614164,<mask>(child.tag()),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent =<mask>(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1590,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,226,7991,8017,MethodCallMutator,popStackToSuitableContainer,lookup,4,0.039790317,<mask>(child.tag()),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent =<mask>(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1591,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,226,8025,8027,MethodCallMutator,tag,parent,1,0.052475307,child.<mask>(),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.<mask>());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1592,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,226,8025,8027,MethodCallMutator,tag,class,2,0.015358906,child.<mask>(),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.<mask>());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1593,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,226,8025,8027,MethodCallMutator,tag,id,3,0.011315468,child.<mask>(),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.<mask>());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1594,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,226,8025,8027,MethodCallMutator,tag,element,4,0.0065023405,child.<mask>(),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.<mask>());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1595,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,226,8019,8023,IdentifierMutator-Variable,child,parent,1,0.01975302,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(<mask>.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1596,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,226,8019,8023,IdentifierMutator-Variable,child,Child,2,0.007169191,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(<mask>.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1597,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,226,8019,8023,IdentifierMutator-Variable,child,this,3,0.003028259,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(<mask>.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1598,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,226,8019,8023,IdentifierMutator-Variable,child,element,4,8.5077767E-4,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(<mask>.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1599,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,227,8062,8064,MethodCallMutator,tag,parent,1,0.017571984,child.<mask>(),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.<mask>();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1600,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,227,8062,8064,MethodCallMutator,tag,tags,2,0.0021679462,child.<mask>(),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.<mask>();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1601,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,227,8062,8064,MethodCallMutator,tag,child,3,0.0010197753,child.<mask>(),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.<mask>();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1602,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,227,8062,8064,MethodCallMutator,tag,name,4,8.8478695E-4,child.<mask>(),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.<mask>();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1603,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,227,8056,8060,IdentifierMutator-Variable,child,parent,0,0.82951236,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag =<mask>.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1604,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,227,8056,8060,IdentifierMutator-Variable,child,this,2,0.0015260478,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag =<mask>.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1605,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,227,8056,8060,IdentifierMutator-Variable,child,parent,3,3.8772542E-4,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag =<mask>.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1606,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,227,8056,8060,IdentifierMutator-Variable,child,current,4,2.9599704E-4,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag =<mask>.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1607,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,228,8101,8119,MethodCallMutator,stackHasValidParent,contains,0,0.26123023,<mask>(childTag),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor =<mask>(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1608,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,228,8101,8119,MethodCallMutator,stackHasValidParent,validate,1,0.25620496,<mask>(childTag),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor =<mask>(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1609,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,228,8101,8119,MethodCallMutator,stackHasValidParent,check,2,0.060159493,<mask>(childTag),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor =<mask>(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1610,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,228,8101,8119,MethodCallMutator,stackHasValidParent,valid,3,0.043896757,<mask>(childTag),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor =<mask>(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1611,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,228,8101,8119,MethodCallMutator,stackHasValidParent,exists,4,0.03139677,<mask>(childTag),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor =<mask>(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1612,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,228,8121,8128,IdentifierMutator-Variable,childTag,parent,0,0.80460465,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(<mask>);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1613,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,228,8121,8128,IdentifierMutator-Variable,childTag,child,1,0.16819106,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(<mask>);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1614,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,228,8121,8128,IdentifierMutator-Variable,childTag,this,2,0.0018873494,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(<mask>);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1615,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,228,8121,8128,IdentifierMutator-Variable,childTag,root,3,0.0013120612,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(<mask>);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1616,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,228,8121,8128,IdentifierMutator-Variable,childTag,tree,4,0.001197987,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(<mask>);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1617,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8159,8162,BinaryOperatorMutator,&&,||,1,0.040706426,(!validAncestor) <mask> (!relaxed),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor<mask>!relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1618,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8159,8162,BinaryOperatorMutator,&&,||,3,0.0063436204,(!validAncestor) <mask> (!relaxed),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor<mask>!relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1619,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8159,8162,BinaryOperatorMutator,&&,&,4,0.0019721158,(!validAncestor) <mask> (!relaxed),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor<mask>!relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1620,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8145,8145,UnaryOperatorMutator,!,...,2,0.001847365,<mask>validAncestor,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (<mask>validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1621,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8145,8145,UnaryOperatorMutator,!,!!,3,0.0012636125,<mask>validAncestor,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (<mask>validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1622,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8145,8145,UnaryOperatorMutator,!,?,4,7.951831E-4,<mask>validAncestor,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (<mask>validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1623,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8146,8158,IdentifierMutator-Variable,validAncestor,valid,0,0.7436485,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!<mask> && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1624,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8146,8158,IdentifierMutator-Variable,validAncestor,parent,1,0.0786947,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!<mask> && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1625,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8146,8158,IdentifierMutator-Variable,validAncestor,empty,2,0.014741396,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!<mask> && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1626,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8146,8158,IdentifierMutator-Variable,validAncestor,broken,3,0.009209415,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!<mask> && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1627,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8146,8158,IdentifierMutator-Variable,validAncestor,current,4,0.008119285,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!<mask> && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1628,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8163,8163,UnaryOperatorMutator,!,(!,1,0.010699432,<mask>relaxed,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor &&<mask>relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1629,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8163,8163,UnaryOperatorMutator,!,_,2,0.004372018,<mask>relaxed,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor &&<mask>relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1630,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8163,8163,UnaryOperatorMutator,!,//,3,0.004286699,<mask>relaxed,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor &&<mask>relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1631,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8163,8163,UnaryOperatorMutator,!,is,4,0.002484351,<mask>relaxed,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor &&<mask>relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1632,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8164,8170,IdentifierMutator-Variable,relaxed,parent,0,0.14220834,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !<mask>) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1633,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8164,8170,IdentifierMutator-Variable,relaxed,append,1,0.039473113,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !<mask>) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1634,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8164,8170,IdentifierMutator-Variable,relaxed,empty,2,0.030812927,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !<mask>) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1635,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8164,8170,IdentifierMutator-Variable,relaxed,root,3,0.022113837,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !<mask>) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1636,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8164,8170,IdentifierMutator-Variable,relaxed,wrap,4,0.017654309,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !<mask>) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1637,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8164,8170,FieldReferenceMutator,relaxed,parent,0,0.14220834,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !<mask>) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1638,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8164,8170,FieldReferenceMutator,relaxed,append,1,0.039473113,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !<mask>) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1639,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8164,8170,FieldReferenceMutator,relaxed,empty,2,0.030812927,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !<mask>) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1640,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8164,8170,FieldReferenceMutator,relaxed,root,3,0.022113837,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !<mask>) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1641,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,230,8164,8170,FieldReferenceMutator,relaxed,wrap,4,0.017654309,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !<mask>) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1642,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,232,8268,8284,MethodCallMutator,getImplicitParent,parent,0,0.52744216,childTag.<mask>(),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.<mask>();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1643,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,232,8268,8284,MethodCallMutator,getImplicitParent,tag,1,0.43270347,childTag.<mask>(),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.<mask>();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1644,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,232,8268,8284,MethodCallMutator,getImplicitParent,name,2,0.0032794601,childTag.<mask>(),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.<mask>();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1645,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,232,8268,8284,MethodCallMutator,getImplicitParent,parse,3,0.0024108046,childTag.<mask>(),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.<mask>();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1646,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,232,8268,8284,MethodCallMutator,getImplicitParent,text,4,0.0023510403,childTag.<mask>(),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.<mask>();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1647,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,232,8259,8266,IdentifierMutator-Variable,childTag,parent,0,0.4707856,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag =<mask>.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1648,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,232,8259,8266,IdentifierMutator-Variable,childTag,child,1,0.45448437,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag =<mask>.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1649,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,232,8259,8266,IdentifierMutator-Variable,childTag,this,2,0.007844395,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag =<mask>.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1650,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,232,8259,8266,IdentifierMutator-Variable,childTag,tag,3,0.0076239593,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag =<mask>.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1651,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,232,8259,8266,IdentifierMutator-Variable,childTag,element,4,0.004658762,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag =<mask>.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1652,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,233,8332,8340,IdentifierMutator-Variable,parentTag,parent,0,0.84470564,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(<mask>, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1653,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,233,8332,8340,IdentifierMutator-Variable,parentTag,tag,1,0.06946713,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(<mask>, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1654,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,233,8332,8340,IdentifierMutator-Variable,parentTag,null,2,0.011646514,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(<mask>, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1655,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,233,8332,8340,IdentifierMutator-Variable,parentTag,this,3,0.010400694,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(<mask>, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1656,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,233,8332,8340,IdentifierMutator-Variable,parentTag,root,4,0.007997863,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(<mask>, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1657,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,233,8343,8349,IdentifierMutator-Variable,baseUri,parent,0,0.11647435,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag,<mask>);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1658,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,233,8343,8349,IdentifierMutator-Variable,baseUri,null,1,0.1077672,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag,<mask>);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1659,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,233,8343,8349,IdentifierMutator-Variable,baseUri,false,2,0.09475278,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag,<mask>);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1660,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,233,8343,8349,IdentifierMutator-Variable,baseUri,true,3,0.080419704,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag,<mask>);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1661,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,233,8343,8349,IdentifierMutator-Variable,baseUri,"""""",4,0.053219,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag,<mask>);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1662,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,233,8343,8349,FieldReferenceMutator,baseUri,parent,0,0.11647435,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag,<mask>);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1663,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,233,8343,8349,FieldReferenceMutator,baseUri,null,1,0.1077672,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag,<mask>);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1664,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,233,8343,8349,FieldReferenceMutator,baseUri,false,2,0.09475278,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag,<mask>);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1665,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,233,8343,8349,FieldReferenceMutator,baseUri,true,3,0.080419704,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag,<mask>);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1666,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,233,8343,8349,FieldReferenceMutator,baseUri,"""""",4,0.053219,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag,<mask>);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1667,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8458,8463,MethodCallMutator,equals,is,0,0.8331889,child.tag().<mask>(bodyTag),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().<mask>(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1668,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8458,8463,MethodCallMutator,equals,ends,1,0.026132666,child.tag().<mask>(bodyTag),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().<mask>(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1669,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8458,8463,MethodCallMutator,equals,equ,2,0.018210027,child.tag().<mask>(bodyTag),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().<mask>(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1670,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8458,8463,MethodCallMutator,equals,was,3,0.014619196,child.tag().<mask>(bodyTag),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().<mask>(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1671,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8458,8463,MethodCallMutator,equals,has,4,0.014026921,child.tag().<mask>(bodyTag),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().<mask>(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1672,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8452,8454,MethodCallMutator,tag,class,1,3.8409675E-4,child.<mask>(),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.<mask>().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1673,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8452,8454,MethodCallMutator,tag,type,2,2.2249794E-4,child.<mask>(),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.<mask>().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1674,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8452,8454,MethodCallMutator,tag,name,3,1.7473724E-4,child.<mask>(),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.<mask>().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1675,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8452,8454,MethodCallMutator,tag,tags,4,9.1763075E-5,child.<mask>(),"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.<mask>().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1676,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8446,8450,IdentifierMutator-Variable,child,parent,1,0.32682773,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (<mask>.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1677,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8446,8450,IdentifierMutator-Variable,child,this,2,0.019149506,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (<mask>.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1678,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8446,8450,IdentifierMutator-Variable,child,current,3,0.016397163,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (<mask>.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1679,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8446,8450,IdentifierMutator-Variable,child,head,4,0.013700409,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (<mask>.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1680,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8465,8471,IdentifierMutator-Variable,org.jsoup.parser.Parser.bodyTag,head,0,0.684872,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(<mask>)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1681,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8465,8471,IdentifierMutator-Variable,org.jsoup.parser.Parser.bodyTag,HEAD,1,0.2993274,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(<mask>)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1682,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8465,8471,IdentifierMutator-Variable,org.jsoup.parser.Parser.bodyTag,Head,2,0.005857478,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(<mask>)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1683,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8465,8471,IdentifierMutator-Variable,org.jsoup.parser.Parser.bodyTag,body,3,0.0022017914,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(<mask>)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1684,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8465,8471,IdentifierMutator-Variable,org.jsoup.parser.Parser.bodyTag,tag,4,4.378987E-4,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(<mask>)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1685,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8465,8471,FieldReferenceMutator,bodyTag,head,0,0.684872,org.jsoup.parser.Parser.<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(<mask>)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1686,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8465,8471,FieldReferenceMutator,bodyTag,HEAD,1,0.2993274,org.jsoup.parser.Parser.<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(<mask>)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1687,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8465,8471,FieldReferenceMutator,bodyTag,Head,2,0.005857478,org.jsoup.parser.Parser.<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(<mask>)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1688,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8465,8471,FieldReferenceMutator,bodyTag,body,3,0.0022017914,org.jsoup.parser.Parser.<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(<mask>)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1689,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,235,8465,8471,FieldReferenceMutator,bodyTag,tag,4,4.378987E-4,org.jsoup.parser.Parser.<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(<mask>)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1690,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,236,8520,8526,IdentifierMutator-Variable,org.jsoup.parser.Parser.headTag,child,0,0.54101026,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(<mask>, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1691,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,236,8520,8526,IdentifierMutator-Variable,org.jsoup.parser.Parser.headTag,parent,1,0.11645287,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(<mask>, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1692,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,236,8520,8526,IdentifierMutator-Variable,org.jsoup.parser.Parser.headTag,body,2,0.08848155,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(<mask>, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1693,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,236,8520,8526,IdentifierMutator-Variable,org.jsoup.parser.Parser.headTag,head,3,0.030380284,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(<mask>, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1694,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,236,8520,8526,IdentifierMutator-Variable,org.jsoup.parser.Parser.headTag,this,4,0.029607352,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(<mask>, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1695,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,236,8520,8526,FieldReferenceMutator,headTag,child,0,0.54101026,org.jsoup.parser.Parser.<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(<mask>, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1696,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,236,8520,8526,FieldReferenceMutator,headTag,parent,1,0.11645287,org.jsoup.parser.Parser.<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(<mask>, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1697,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,236,8520,8526,FieldReferenceMutator,headTag,body,2,0.08848155,org.jsoup.parser.Parser.<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(<mask>, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1698,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,236,8520,8526,FieldReferenceMutator,headTag,head,3,0.030380284,org.jsoup.parser.Parser.<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(<mask>, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1699,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,236,8520,8526,FieldReferenceMutator,headTag,this,4,0.029607352,org.jsoup.parser.Parser.<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(<mask>, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1700,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,236,8529,8535,IdentifierMutator-Variable,baseUri,body,0,0.17497769,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag,<mask>);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1701,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,236,8529,8535,IdentifierMutator-Variable,baseUri,true,1,0.07538555,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag,<mask>);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1702,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,236,8529,8535,IdentifierMutator-Variable,baseUri,null,2,0.063997924,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag,<mask>);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1703,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,236,8529,8535,IdentifierMutator-Variable,baseUri,false,3,0.059631236,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag,<mask>);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1704,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,236,8529,8535,IdentifierMutator-Variable,baseUri,url,4,0.05830518,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag,<mask>);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1705,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,236,8529,8535,FieldReferenceMutator,baseUri,body,0,0.17497769,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag,<mask>);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1706,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,236,8529,8535,FieldReferenceMutator,baseUri,true,1,0.07538555,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag,<mask>);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1707,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,236,8529,8535,FieldReferenceMutator,baseUri,null,2,0.063997924,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag,<mask>);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1708,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,236,8529,8535,FieldReferenceMutator,baseUri,false,3,0.059631236,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag,<mask>);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1709,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,236,8529,8535,FieldReferenceMutator,baseUri,url,4,0.05830518,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag,<mask>);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1710,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,237,8564,8574,MethodCallMutator,appendChild,append,0,0.7651951,implicit.<mask>(head)," child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.<mask>(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1711,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,237,8564,8574,MethodCallMutator,appendChild,add,1,0.09170697,implicit.<mask>(head)," child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.<mask>(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1712,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,237,8564,8574,MethodCallMutator,appendChild,push,2,0.029458262,implicit.<mask>(head)," child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.<mask>(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1713,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,237,8564,8574,MethodCallMutator,appendChild,element,3,0.010536092,implicit.<mask>(head)," child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.<mask>(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1714,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,237,8564,8574,MethodCallMutator,appendChild,child,4,0.009793128,implicit.<mask>(head)," child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.<mask>(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1715,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,237,8555,8562,IdentifierMutator-Variable,implicit,parent,1,0.17264087,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);<mask>.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1716,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,237,8555,8562,IdentifierMutator-Variable,implicit,body,2,0.06363162,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);<mask>.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1717,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,237,8555,8562,IdentifierMutator-Variable,implicit,child,3,0.020217275,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);<mask>.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1718,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,237,8555,8562,IdentifierMutator-Variable,implicit,root,4,0.008160233,<mask>,"Element addChildToParent(Element child, boolean isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);<mask>.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1719,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,237,8576,8579,IdentifierMutator-Variable,head,HEAD,2,1.3141325E-4,<mask>," isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(<mask>);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1720,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,237,8576,8579,IdentifierMutator-Variable,head,tail,3,1.2922545E-4,<mask>," isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(<mask>);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1721,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,237,8576,8579,IdentifierMutator-Variable,head,Head,4,1.2527875E-4,<mask>," isEmptyElement) {
        Element parent = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(<mask>);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1722,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,239,8618,8628,MethodCallMutator,appendChild,append,0,0.7544426,implicit.<mask>(child),"       Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.<mask>(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1723,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,239,8618,8628,MethodCallMutator,appendChild,push,1,0.06817013,implicit.<mask>(child),"       Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.<mask>(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1724,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,239,8618,8628,MethodCallMutator,appendChild,add,2,0.0568312,implicit.<mask>(child),"       Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.<mask>(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1725,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,239,8618,8628,MethodCallMutator,appendChild,remove,3,0.052872777,implicit.<mask>(child),"       Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.<mask>(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1726,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,239,8618,8628,MethodCallMutator,appendChild,insert,4,0.01036012,implicit.<mask>(child),"       Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.<mask>(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1727,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,239,8609,8616,IdentifierMutator-Variable,implicit,parent,1,0.074082434,<mask>," = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }<mask>.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1728,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,239,8609,8616,IdentifierMutator-Variable,implicit,explicit,2,0.0029096338,<mask>," = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }<mask>.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1729,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,239,8609,8616,IdentifierMutator-Variable,implicit,impl,3,0.0016605463,<mask>," = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }<mask>.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1730,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,239,8609,8616,IdentifierMutator-Variable,implicit,child,4,0.0013975309,<mask>," = popStackToSuitableContainer(child.tag());
        Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }<mask>.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1731,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,239,8630,8634,IdentifierMutator-Variable,child,parent,1,0.19757189,<mask>,"    Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(<mask>);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1732,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,239,8630,8634,IdentifierMutator-Variable,child,head,2,0.04293604,<mask>,"    Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(<mask>);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1733,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,239,8630,8634,IdentifierMutator-Variable,child,body,3,0.03875195,<mask>,"    Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(<mask>);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1734,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,239,8630,8634,IdentifierMutator-Variable,child,root,4,0.014298187,<mask>,"    Tag childTag = child.tag();
        boolean validAncestor = stackHasValidParent(childTag);

        if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(<mask>);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1735,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,242,8723,8738,MethodCallMutator,addChildToParent,nest,0,0.11737618,"<mask>(implicit, false)","    if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root =<mask>(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1736,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,242,8723,8738,MethodCallMutator,addChildToParent,insert,1,0.08964329,"<mask>(implicit, false)","    if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root =<mask>(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1737,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,242,8723,8738,MethodCallMutator,addChildToParent,create,2,0.07673677,"<mask>(implicit, false)","    if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root =<mask>(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1738,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,242,8723,8738,MethodCallMutator,addChildToParent,root,3,0.03790191,"<mask>(implicit, false)","    if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root =<mask>(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1739,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,242,8723,8738,MethodCallMutator,addChildToParent,parse,4,0.03330908,"<mask>(implicit, false)","    if (!validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root =<mask>(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1740,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,242,8740,8747,IdentifierMutator-Variable,implicit,child,0,0.498139,<mask>,"validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(<mask>, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1741,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,242,8740,8747,IdentifierMutator-Variable,implicit,parent,1,0.40852028,<mask>,"validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(<mask>, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1742,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,242,8740,8747,IdentifierMutator-Variable,implicit,this,2,0.01597388,<mask>,"validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(<mask>, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1743,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,242,8740,8747,IdentifierMutator-Variable,implicit,element,3,0.0065258695,<mask>,"validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(<mask>, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1744,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,242,8740,8747,IdentifierMutator-Variable,implicit,root,4,0.0052320748,<mask>,"validAncestor && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(<mask>, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1745,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,242,8750,8754,IdentifierMutator-Literal,false,child,0,0.61203426,<mask>,"or && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit,<mask>);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1746,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,242,8750,8754,IdentifierMutator-Literal,false,parent,1,0.24858655,<mask>,"or && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit,<mask>);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1747,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,242,8750,8754,IdentifierMutator-Literal,false,true,3,0.0071034734,<mask>,"or && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit,<mask>);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1748,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,242,8750,8754,IdentifierMutator-Literal,false,tag,4,0.0062641674,<mask>,"or && !relaxed) {
            // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit,<mask>);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1749,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,243,8774,8774,UnaryOperatorMutator,!,!!,2,0.0013136055,<mask>isEmptyElement,"     // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (<mask>isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1750,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,243,8774,8774,UnaryOperatorMutator,!,...,3,5.8684126E-4,<mask>isEmptyElement,"     // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (<mask>isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1751,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,243,8774,8774,UnaryOperatorMutator,!,(!,4,4.0203784E-4,<mask>isEmptyElement,"     // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (<mask>isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1752,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,243,8775,8788,IdentifierMutator-Variable,isEmptyElement,root,0,0.98130655,<mask>,"     // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!<mask>)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1753,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,243,8775,8788,IdentifierMutator-Variable,isEmptyElement,parent,1,0.0025755728,<mask>,"     // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!<mask>)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1754,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,243,8775,8788,IdentifierMutator-Variable,isEmptyElement,leaf,2,0.0015908873,<mask>,"     // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!<mask>)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1755,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,243,8775,8788,IdentifierMutator-Variable,isEmptyElement,root,3,0.0010822774,<mask>,"     // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!<mask>)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1756,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,243,8775,8788,IdentifierMutator-Variable,isEmptyElement,null,4,8.698003E-4,<mask>,"     // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!<mask>)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1757,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,244,8813,8819,MethodCallMutator,addLast,remove,0,0.39392835,stack.<mask>(child),"  Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.<mask>(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1758,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,244,8813,8819,MethodCallMutator,addLast,push,1,0.29096416,stack.<mask>(child),"  Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.<mask>(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1759,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,244,8813,8819,MethodCallMutator,addLast,add,2,0.17435212,stack.<mask>(child),"  Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.<mask>(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1760,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,244,8813,8819,MethodCallMutator,addLast,pop,3,0.09799239,stack.<mask>(child),"  Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.<mask>(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1761,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,244,8813,8819,MethodCallMutator,addLast,append,4,0.006256897,stack.<mask>(child),"  Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.<mask>(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1762,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,244,8807,8811,IdentifierMutator-Variable,stack,parent,2,0.0014032555,<mask>," // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)<mask>.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1763,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,244,8807,8811,IdentifierMutator-Variable,stack,root,3,0.0011572979,<mask>," // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)<mask>.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1764,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,244,8807,8811,IdentifierMutator-Variable,stack,tree,4,9.550918E-4,<mask>," // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)<mask>.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1765,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,244,8807,8811,FieldReferenceMutator,stack,parent,2,0.0014032555,<mask>," // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)<mask>.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1766,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,244,8807,8811,FieldReferenceMutator,stack,root,3,0.0011572979,<mask>," // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)<mask>.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1767,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,244,8807,8811,FieldReferenceMutator,stack,tree,4,9.550918E-4,<mask>," // create implicit parent around this child
            Tag parentTag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)<mask>.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1768,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,244,8821,8825,IdentifierMutator-Variable,child,root,0,0.96455085,<mask>,"Tag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(<mask>);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1769,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,244,8821,8825,IdentifierMutator-Variable,child,parent,1,0.016565243,<mask>,"Tag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(<mask>);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1770,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,244,8821,8825,IdentifierMutator-Variable,child,null,3,7.857826E-4,<mask>,"Tag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(<mask>);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1771,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,244,8821,8825,IdentifierMutator-Variable,child,root,4,3.9075484E-4,<mask>,"Tag = childTag.getImplicitParent();
            Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(<mask>);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1772,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,245,8848,8851,IdentifierMutator-Variable,root,parent,1,0.12390547,<mask>,"        Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return<mask>;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1773,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,245,8848,8851,IdentifierMutator-Variable,root,child,2,0.009172407,<mask>,"        Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return<mask>;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1774,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,245,8848,8851,IdentifierMutator-Variable,root,null,3,0.0051666335,<mask>,"        Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return<mask>;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1775,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,245,8848,8851,IdentifierMutator-Variable,root,node,4,7.9400593E-4,<mask>,"        Element implicit = new Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return<mask>;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1776,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,248,8880,8890,MethodCallMutator,appendChild,add,0,0.35307795,parent.<mask>(child),"            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.<mask>(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1777,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,248,8880,8890,MethodCallMutator,appendChild,append,1,0.35006177,parent.<mask>(child),"            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.<mask>(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1778,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,248,8880,8890,MethodCallMutator,appendChild,push,2,0.05577274,parent.<mask>(child),"            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.<mask>(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1779,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,248,8880,8890,MethodCallMutator,appendChild,after,3,0.045888867,parent.<mask>(child),"            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.<mask>(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1780,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,248,8880,8890,MethodCallMutator,appendChild,remove,4,0.040357757,parent.<mask>(child),"            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.<mask>(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1781,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,248,8873,8878,IdentifierMutator-Variable,parent,root,1,0.013816907,<mask>," Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }<mask>.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1782,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,248,8873,8878,IdentifierMutator-Variable,parent,implicit,2,0.0062951427,<mask>," Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }<mask>.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1783,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,248,8873,8878,IdentifierMutator-Variable,parent,child,3,0.0032337348,<mask>," Element(parentTag, baseUri);
            // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }<mask>.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1784,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,248,8892,8896,IdentifierMutator-Variable,child,root,1,0.120447405,<mask>,"         // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(<mask>);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1785,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,248,8892,8896,IdentifierMutator-Variable,child,parent,2,0.003296599,<mask>,"         // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(<mask>);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1786,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,248,8892,8896,IdentifierMutator-Variable,child,element,3,0.0032619045,<mask>,"         // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(<mask>);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1787,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,248,8892,8896,IdentifierMutator-Variable,child,this,4,0.0028738067,<mask>,"         // special case: make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(<mask>);

        if (!isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1788,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,250,8913,8913,UnaryOperatorMutator,!,...,2,4.88407E-4,<mask>isEmptyElement," make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (<mask>isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1789,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,250,8913,8913,UnaryOperatorMutator,!,(!,3,3.2487113E-4,<mask>isEmptyElement," make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (<mask>isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1790,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,250,8913,8913,UnaryOperatorMutator,!,!!,4,2.7633682E-4,<mask>isEmptyElement," make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (<mask>isEmptyElement)
            stack.addLast(child);
        return parent;
    }"
1791,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,250,8914,8927,IdentifierMutator-Variable,isEmptyElement,parent,0,0.1684048,<mask>," make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!<mask>)
            stack.addLast(child);
        return parent;
    }"
1792,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,250,8914,8927,IdentifierMutator-Variable,isEmptyElement,root,1,0.15986696,<mask>," make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!<mask>)
            stack.addLast(child);
        return parent;
    }"
1793,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,250,8914,8927,IdentifierMutator-Variable,isEmptyElement,empty,2,0.09846422,<mask>," make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!<mask>)
            stack.addLast(child);
        return parent;
    }"
1794,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,250,8914,8927,IdentifierMutator-Variable,isEmptyElement,stack,3,0.04839727,<mask>," make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!<mask>)
            stack.addLast(child);
        return parent;
    }"
1795,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,250,8914,8927,IdentifierMutator-Variable,isEmptyElement,depth,4,0.020673973,<mask>," make sure there's a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!<mask>)
            stack.addLast(child);
        return parent;
    }"
1796,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,251,8948,8954,MethodCallMutator,addLast,remove,0,0.38149923,stack.<mask>(child),"     if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.<mask>(child);
        return parent;
    }"
1797,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,251,8948,8954,MethodCallMutator,addLast,push,1,0.31284636,stack.<mask>(child),"     if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.<mask>(child);
        return parent;
    }"
1798,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,251,8948,8954,MethodCallMutator,addLast,pop,2,0.13759233,stack.<mask>(child),"     if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.<mask>(child);
        return parent;
    }"
1799,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,251,8948,8954,MethodCallMutator,addLast,add,3,0.12012469,stack.<mask>(child),"     if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.<mask>(child);
        return parent;
    }"
1800,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,251,8948,8954,MethodCallMutator,addLast,last,4,0.010922836,stack.<mask>(child),"     if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.<mask>(child);
        return parent;
    }"
1801,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,251,8942,8946,IdentifierMutator-Variable,stack,parent,1,0.007782494,<mask>," a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)<mask>.addLast(child);
        return parent;
    }"
1802,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,251,8942,8946,IdentifierMutator-Variable,stack,tree,3,0.0013441822,<mask>," a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)<mask>.addLast(child);
        return parent;
    }"
1803,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,251,8942,8946,IdentifierMutator-Variable,stack,root,4,7.9946447E-4,<mask>," a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)<mask>.addLast(child);
        return parent;
    }"
1804,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,251,8942,8946,FieldReferenceMutator,stack,parent,1,0.007782494,<mask>," a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)<mask>.addLast(child);
        return parent;
    }"
1805,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,251,8942,8946,FieldReferenceMutator,stack,tree,3,0.0013441822,<mask>," a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)<mask>.addLast(child);
        return parent;
    }"
1806,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,251,8942,8946,FieldReferenceMutator,stack,root,4,7.9946447E-4,<mask>," a head before putting in body
            if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)<mask>.addLast(child);
        return parent;
    }"
1807,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,251,8956,8960,IdentifierMutator-Variable,child,parent,0,0.8989695,<mask>,"  if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(<mask>);
        return parent;
    }"
1808,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,251,8956,8960,IdentifierMutator-Variable,child,root,2,0.019793205,<mask>,"  if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(<mask>);
        return parent;
    }"
1809,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,251,8956,8960,IdentifierMutator-Variable,child,this,3,0.0010855006,<mask>,"  if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(<mask>);
        return parent;
    }"
1810,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,251,8956,8960,IdentifierMutator-Variable,child,tree,4,8.191812E-4,<mask>,"  if (child.tag().equals(bodyTag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(<mask>);
        return parent;
    }"
1811,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,252,8979,8984,IdentifierMutator-Variable,parent,root,0,0.8769527,<mask>,"Tag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return<mask>;
    }"
1812,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,252,8979,8984,IdentifierMutator-Variable,parent,child,2,0.029721128,<mask>,"Tag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return<mask>;
    }"
1813,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,252,8979,8984,IdentifierMutator-Variable,parent,null,3,0.010223579,<mask>,"Tag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return<mask>;
    }"
1814,Parser.java,addChildToParent,"Element addChildToParent(Element child, boolean isEmptyElement)",225,252,8979,8984,IdentifierMutator-Variable,parent,false,4,0.002767677,<mask>,"Tag)) {
                Element head = new Element(headTag, baseUri);
                implicit.appendChild(head);
            }
            implicit.appendChild(child);

            // recurse to ensure somewhere to put parent
            Element root = addChildToParent(implicit, false);
            if (!isEmptyElement)
                stack.addLast(child);
            return root;
        }

        parent.appendChild(child);

        if (!isEmptyElement)
            stack.addLast(child);
        return<mask>;
    }"
1815,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9079,9082,BinaryOperatorMutator,&&,||,2,0.041856103,(stack.size() == 1) <mask> childTag.equals(org.jsoup.parser.Parser.htmlTag),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1<mask>childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1816,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9079,9082,BinaryOperatorMutator,&&,||,3,0.014598928,(stack.size() == 1) <mask> childTag.equals(org.jsoup.parser.Parser.htmlTag),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1<mask>childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1817,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9079,9082,BinaryOperatorMutator,&&,&,4,0.01265738,(stack.size() == 1) <mask> childTag.equals(org.jsoup.parser.Parser.htmlTag),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1<mask>childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1818,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9074,9077,BinaryOperatorMutator,==,-,0,0.24127026,stack.size() <mask> 1,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size()<mask>1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1819,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9074,9077,BinaryOperatorMutator,==,>,1,0.21977295,stack.size() <mask> 1,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size()<mask>1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1820,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9074,9077,BinaryOperatorMutator,==,>,4,0.06236361,stack.size() <mask> 1,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size()<mask>1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1821,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9068,9071,MethodCallMutator,size,length,1,2.2650386E-4,stack.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.<mask>() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1822,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9068,9071,MethodCallMutator,size,count,2,1.6690425E-4,stack.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.<mask>() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1823,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9068,9071,MethodCallMutator,size,position,3,9.277279E-5,stack.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.<mask>() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1824,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9068,9071,MethodCallMutator,size,index,4,7.545123E-5,stack.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.<mask>() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1825,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9062,9066,IdentifierMutator-Variable,stack,Stack,1,3.2618787E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (<mask>.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1826,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9062,9066,IdentifierMutator-Variable,stack,tree,2,1.9111551E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (<mask>.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1827,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9062,9066,IdentifierMutator-Variable,stack,list,3,8.23671E-5,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (<mask>.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1828,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9062,9066,IdentifierMutator-Variable,stack,queue,4,4.7086203E-5,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (<mask>.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1829,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9062,9066,FieldReferenceMutator,stack,Stack,1,3.2618787E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (<mask>.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1830,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9062,9066,FieldReferenceMutator,stack,tree,2,1.9111551E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (<mask>.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1831,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9062,9066,FieldReferenceMutator,stack,list,3,8.23671E-5,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (<mask>.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1832,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9062,9066,FieldReferenceMutator,stack,queue,4,4.7086203E-5,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (<mask>.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1833,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9078,9078,IdentifierMutator-Literal,1,0,1,0.10201323,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() ==<mask> && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1834,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9078,9078,IdentifierMutator-Literal,1,2,2,0.02956388,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() ==<mask> && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1835,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9078,9078,IdentifierMutator-Literal,1,3,3,0.008432489,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() ==<mask> && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1836,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9092,9097,MethodCallMutator,equals,is,0,0.8756396,childTag.<mask>(htmlTag),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.<mask>(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1837,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9092,9097,MethodCallMutator,equals,requires,1,0.025259228,childTag.<mask>(htmlTag),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.<mask>(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1838,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9092,9097,MethodCallMutator,equals,includes,2,0.013028477,childTag.<mask>(htmlTag),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.<mask>(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1839,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9092,9097,MethodCallMutator,equals,tag,3,0.005838098,childTag.<mask>(htmlTag),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.<mask>(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1840,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9092,9097,MethodCallMutator,equals,ends,4,0.0047633178,childTag.<mask>(htmlTag),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.<mask>(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1841,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9083,9090,IdentifierMutator-Variable,childTag,tag,0,0.61460364,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 &&<mask>.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1842,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9083,9090,IdentifierMutator-Variable,childTag,root,1,0.27356905,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 &&<mask>.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1843,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9083,9090,IdentifierMutator-Variable,childTag,parent,2,0.028821265,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 &&<mask>.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1844,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9083,9090,IdentifierMutator-Variable,childTag,head,3,0.013985171,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 &&<mask>.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1845,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9083,9090,IdentifierMutator-Variable,childTag,element,4,0.010556772,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 &&<mask>.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1846,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9099,9105,IdentifierMutator-Variable,org.jsoup.parser.Parser.htmlTag,root,0,0.9024989,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(<mask>))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1847,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9099,9105,IdentifierMutator-Variable,org.jsoup.parser.Parser.htmlTag,html,1,0.03012521,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(<mask>))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1848,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9099,9105,IdentifierMutator-Variable,org.jsoup.parser.Parser.htmlTag,null,2,0.015668929,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(<mask>))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1849,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9099,9105,IdentifierMutator-Variable,org.jsoup.parser.Parser.htmlTag,this,3,0.015384837,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(<mask>))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1850,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9099,9105,IdentifierMutator-Variable,org.jsoup.parser.Parser.htmlTag,head,4,0.004038631,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(<mask>))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1851,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9099,9105,FieldReferenceMutator,htmlTag,root,0,0.9024989,org.jsoup.parser.Parser.<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(<mask>))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1852,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9099,9105,FieldReferenceMutator,htmlTag,html,1,0.03012521,org.jsoup.parser.Parser.<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(<mask>))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1853,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9099,9105,FieldReferenceMutator,htmlTag,null,2,0.015668929,org.jsoup.parser.Parser.<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(<mask>))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1854,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9099,9105,FieldReferenceMutator,htmlTag,this,3,0.015384837,org.jsoup.parser.Parser.<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(<mask>))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1855,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,256,9099,9105,FieldReferenceMutator,htmlTag,head,4,0.004038631,org.jsoup.parser.Parser.<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(<mask>))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1856,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,257,9128,9131,IdentifierMutator-Literal,true,false,1,0.08601139,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return<mask>; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1857,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,257,9128,9131,IdentifierMutator-Literal,true,TRUE,2,3.324793E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return<mask>; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1858,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,257,9128,9131,IdentifierMutator-Literal,true,null,3,2.0187633E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return<mask>; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1859,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,257,9128,9131,IdentifierMutator-Literal,true,1,4,1.9983765E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return<mask>; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1860,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,259,9187,9208,MethodCallMutator,requiresSpecificParent,empty,0,0.45168942,childTag.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.<mask>())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1861,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,259,9187,9208,MethodCallMutator,requiresSpecificParent,tag,1,0.105836295,childTag.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.<mask>())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1862,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,259,9187,9208,MethodCallMutator,requiresSpecificParent,optional,2,0.036998935,childTag.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.<mask>())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1863,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,259,9187,9208,MethodCallMutator,requiresSpecificParent,html,3,0.022544036,childTag.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.<mask>())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1864,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,259,9187,9208,MethodCallMutator,requiresSpecificParent,tags,4,0.020048289,childTag.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.<mask>())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1865,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,259,9178,9185,IdentifierMutator-Variable,childTag,element,0,0.14878547,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (<mask>.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1866,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,259,9178,9185,IdentifierMutator-Variable,childTag,tag,1,0.08400073,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (<mask>.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1867,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,259,9178,9185,IdentifierMutator-Variable,childTag,tree,2,0.060565684,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (<mask>.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1868,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,259,9178,9185,IdentifierMutator-Variable,childTag,this,3,0.05852028,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (<mask>.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1869,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,259,9178,9185,IdentifierMutator-Variable,childTag,parent,4,0.03925038,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (<mask>.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1870,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9254,9266,MethodCallMutator,isValidParent,is,0,0.18228038,stack.getLast().tag().<mask>(childTag),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().<mask>(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1871,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9254,9266,MethodCallMutator,isValidParent,equals,1,0.16720895,stack.getLast().tag().<mask>(childTag),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().<mask>(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1872,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9254,9266,MethodCallMutator,isValidParent,equal,2,0.1181303,stack.getLast().tag().<mask>(childTag),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().<mask>(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1873,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9254,9266,MethodCallMutator,isValidParent,match,3,0.05412135,stack.getLast().tag().<mask>(childTag),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().<mask>(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1874,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9254,9266,MethodCallMutator,isValidParent,includes,4,0.03600023,stack.getLast().tag().<mask>(childTag),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().<mask>(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1875,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9248,9250,MethodCallMutator,tag,parent,1,0.14134063,stack.getLast().<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().<mask>().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1876,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9248,9250,MethodCallMutator,tag,element,2,0.004746323,stack.getLast().<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().<mask>().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1877,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9248,9250,MethodCallMutator,tag,class,3,0.002911708,stack.getLast().<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().<mask>().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1878,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9248,9250,MethodCallMutator,tag,child,4,0.0018200823,stack.getLast().<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().<mask>().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1879,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9238,9244,MethodCallMutator,getLast,pop,0,0.4100794,stack.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.<mask>().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1880,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9238,9244,MethodCallMutator,getLast,last,1,0.40692616,stack.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.<mask>().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1881,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9238,9244,MethodCallMutator,getLast,first,2,0.079633646,stack.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.<mask>().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1882,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9238,9244,MethodCallMutator,getLast,top,3,0.03809098,stack.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.<mask>().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1883,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9238,9244,MethodCallMutator,getLast,get,4,0.03239659,stack.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.<mask>().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1884,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9232,9236,IdentifierMutator-Variable,stack,parent,2,0.0030844181,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return<mask>.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1885,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9232,9236,IdentifierMutator-Variable,stack,tree,3,0.0019475791,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return<mask>.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1886,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9232,9236,IdentifierMutator-Variable,stack,list,4,0.0017784514,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return<mask>.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1887,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9232,9236,FieldReferenceMutator,stack,parent,2,0.0030844181,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return<mask>.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1888,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9232,9236,FieldReferenceMutator,stack,tree,3,0.0019475791,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return<mask>.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1889,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9232,9236,FieldReferenceMutator,stack,list,4,0.0017784514,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return<mask>.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1890,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9268,9275,IdentifierMutator-Variable,childTag,parent,0,0.16500358,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(<mask>);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1891,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9268,9275,IdentifierMutator-Variable,childTag,root,1,0.1512706,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(<mask>);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1892,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9268,9275,IdentifierMutator-Variable,childTag,tag,2,0.111994654,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(<mask>);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1893,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9268,9275,IdentifierMutator-Variable,childTag,this,3,0.08973468,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(<mask>);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1894,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,260,9268,9275,IdentifierMutator-Variable,childTag,element,4,0.069311045,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(<mask>);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1895,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9373,9374,BinaryOperatorMutator,-,)-,2,0.0027390544,stack.size() <mask> 1,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size()<mask>1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1896,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9373,9374,BinaryOperatorMutator,-,+,3,4.615298E-5,stack.size() <mask> 1,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size()<mask>1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1897,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9373,9374,BinaryOperatorMutator,-,]-,4,2.4600795E-5,stack.size() <mask> 1,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size()<mask>1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1898,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9367,9370,MethodCallMutator,size,index,1,6.671264E-5,stack.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.<mask>() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1899,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9367,9370,MethodCallMutator,size,count,2,6.0452556E-5,stack.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.<mask>() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1900,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9367,9370,MethodCallMutator,size,position,3,4.9558468E-5,stack.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.<mask>() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1901,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9367,9370,MethodCallMutator,size,length,4,3.3128177E-5,stack.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.<mask>() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1902,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9361,9365,IdentifierMutator-Variable,stack,list,2,1.9167551E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i =<mask>.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1903,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9361,9365,IdentifierMutator-Variable,stack,queue,3,5.9807724E-5,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i =<mask>.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1904,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9361,9365,IdentifierMutator-Variable,stack,level,4,4.7697024E-5,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i =<mask>.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1905,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9361,9365,FieldReferenceMutator,stack,list,2,1.9167551E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i =<mask>.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1906,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9361,9365,FieldReferenceMutator,stack,queue,3,5.9807724E-5,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i =<mask>.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1907,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9361,9365,FieldReferenceMutator,stack,level,4,4.7697024E-5,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i =<mask>.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1908,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9375,9375,IdentifierMutator-Literal,1,2,1,0.009958091,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -<mask>; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1909,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9375,9375,IdentifierMutator-Literal,1,3,3,5.45139E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -<mask>; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1910,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9375,9375,IdentifierMutator-Literal,1,4,4,1.4096091E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -<mask>; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1911,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9379,9382,BinaryOperatorMutator,>=,>,1,0.119148254,i <mask> 0,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i<mask>0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1912,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9379,9382,BinaryOperatorMutator,>=,>,2,0.11357458,i <mask> 0,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i<mask>0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1913,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9379,9382,BinaryOperatorMutator,>=,==,3,0.0068998593,i <mask> 0,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i<mask>0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1914,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9379,9382,BinaryOperatorMutator,>=,!=,4,0.00403911,i <mask> 0,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i<mask>0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1915,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9378,9378,IdentifierMutator-Variable,i,I,2,2.2401531E-5,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1;<mask> >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1916,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9378,9378,IdentifierMutator-Variable,i,it,3,1.1050289E-5,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1;<mask> >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1917,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9378,9378,IdentifierMutator-Variable,i,index,4,7.396278E-6,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1;<mask> >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1918,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9383,9383,IdentifierMutator-Literal,0,1,1,0.008554166,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >=<mask>; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1919,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9383,9383,IdentifierMutator-Literal,0,2,3,2.511257E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >=<mask>; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1920,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9383,9383,IdentifierMutator-Literal,0,index,4,1.1657098E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >=<mask>; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1921,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9387,9388,UnaryOperatorMutator,--,++,2,5.867734E-4,i<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i<mask>) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1922,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9387,9388,UnaryOperatorMutator,--,-=,3,2.2620867E-5,i<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i<mask>) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1923,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9387,9388,UnaryOperatorMutator,--,++;,4,1.8274613E-5,i<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i<mask>) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1924,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9386,9386,IdentifierMutator-Variable,i,I,2,9.087331E-7,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0;<mask>--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1925,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9386,9386,IdentifierMutator-Variable,i,j,3,4.5902573E-7,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0;<mask>--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1926,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,263,9386,9386,IdentifierMutator-Variable,i,ii,4,4.331321E-7,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0;<mask>--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1927,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,264,9424,9426,MethodCallMutator,get,item,1,0.07683267,stack.<mask>(i),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.<mask>(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1928,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,264,9424,9426,MethodCallMutator,get,element,2,0.011250397,stack.<mask>(i),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.<mask>(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1929,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,264,9424,9426,MethodCallMutator,get,remove,3,0.0052108276,stack.<mask>(i),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.<mask>(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1930,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,264,9424,9426,MethodCallMutator,get,atom,4,0.0014623516,stack.<mask>(i),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.<mask>(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1931,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,264,9418,9422,IdentifierMutator-Variable,stack,list,1,0.0010073163,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el =<mask>.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1932,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,264,9418,9422,IdentifierMutator-Variable,stack,tree,2,5.2218774E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el =<mask>.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1933,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,264,9418,9422,IdentifierMutator-Variable,stack,element,4,2.8353895E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el =<mask>.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1934,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,264,9418,9422,FieldReferenceMutator,stack,list,1,0.0010073163,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el =<mask>.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1935,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,264,9418,9422,FieldReferenceMutator,stack,tree,2,5.2218774E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el =<mask>.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1936,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,264,9418,9422,FieldReferenceMutator,stack,element,4,2.8353895E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el =<mask>.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1937,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,264,9428,9428,IdentifierMutator-Variable,i,0,1,2.4342109E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(<mask>);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1938,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,264,9428,9428,IdentifierMutator-Variable,i,I,2,4.391965E-5,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(<mask>);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1939,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,264,9428,9428,IdentifierMutator-Variable,i,1,4,1.8949691E-5,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(<mask>);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1940,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,265,9461,9463,MethodCallMutator,tag,parent,0,0.7948158,el.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.<mask>();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1941,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,265,9461,9463,MethodCallMutator,tag,get,2,0.0093243215,el.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.<mask>();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1942,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,265,9461,9463,MethodCallMutator,tag,text,3,0.006485359,el.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.<mask>();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1943,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,265,9461,9463,MethodCallMutator,tag,content,4,0.004637371,el.<mask>(),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.<mask>();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1944,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,265,9458,9459,IdentifierMutator-Variable,el,parent,1,0.0038134193,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 =<mask>.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1945,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,265,9458,9459,IdentifierMutator-Variable,el,element,2,9.828797E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 =<mask>.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1946,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,265,9458,9459,IdentifierMutator-Variable,el,child,3,9.554628E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 =<mask>.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1947,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,265,9458,9459,IdentifierMutator-Variable,el,ele,4,5.3883094E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 =<mask>.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1948,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,266,9492,9506,MethodCallMutator,isValidAncestor,is,0,0.50884295,parent2.<mask>(childTag),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.<mask>(childTag)) {
                return true;
            }
        }
        return false;
    }"
1949,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,266,9492,9506,MethodCallMutator,isValidAncestor,includes,1,0.05563381,parent2.<mask>(childTag),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.<mask>(childTag)) {
                return true;
            }
        }
        return false;
    }"
1950,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,266,9492,9506,MethodCallMutator,isValidAncestor,has,2,0.027434511,parent2.<mask>(childTag),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.<mask>(childTag)) {
                return true;
            }
        }
        return false;
    }"
1951,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,266,9492,9506,MethodCallMutator,isValidAncestor,tag,3,0.026897825,parent2.<mask>(childTag),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.<mask>(childTag)) {
                return true;
            }
        }
        return false;
    }"
1952,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,266,9492,9506,MethodCallMutator,isValidAncestor,match,4,0.021957092,parent2.<mask>(childTag),"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.<mask>(childTag)) {
                return true;
            }
        }
        return false;
    }"
1953,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,266,9484,9490,IdentifierMutator-Variable,parent2,parent,0,0.42997617,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (<mask>.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1954,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,266,9484,9490,IdentifierMutator-Variable,parent2,2,1,0.33280656,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (<mask>.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1955,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,266,9484,9490,IdentifierMutator-Variable,parent2,1,2,0.018694598,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (<mask>.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1956,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,266,9484,9490,IdentifierMutator-Variable,parent2,tag,3,0.016973902,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (<mask>.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1957,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,266,9484,9490,IdentifierMutator-Variable,parent2,this,4,0.015453838,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (<mask>.isValidAncestor(childTag)) {
                return true;
            }
        }
        return false;
    }"
1958,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,266,9508,9515,IdentifierMutator-Variable,childTag,el,0,0.27388927,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(<mask>)) {
                return true;
            }
        }
        return false;
    }"
1959,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,266,9508,9515,IdentifierMutator-Variable,childTag,parent,1,0.09585195,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(<mask>)) {
                return true;
            }
        }
        return false;
    }"
1960,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,266,9508,9515,IdentifierMutator-Variable,childTag,tag,2,0.075890824,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(<mask>)) {
                return true;
            }
        }
        return false;
    }"
1961,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,266,9508,9515,IdentifierMutator-Variable,childTag,element,3,0.064265475,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(<mask>)) {
                return true;
            }
        }
        return false;
    }"
1962,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,266,9508,9515,IdentifierMutator-Variable,childTag,root,4,0.046130084,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(<mask>)) {
                return true;
            }
        }
        return false;
    }"
1963,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,267,9544,9547,IdentifierMutator-Literal,true,false,1,0.016475702,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return<mask>;
            }
        }
        return false;
    }"
1964,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,267,9544,9547,IdentifierMutator-Literal,true,True,2,2.5803476E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return<mask>;
            }
        }
        return false;
    }"
1965,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,267,9544,9547,IdentifierMutator-Literal,true,i,3,2.432878E-4,<mask>,"boolean stackHasValidParent(Tag childTag) {
        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return<mask>;
            }
        }
        return false;
    }"
1966,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,270,9589,9593,IdentifierMutator-Literal,false,true,1,0.041304246,<mask>,"        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return<mask>;
    }"
1967,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,270,9589,9593,IdentifierMutator-Literal,false,null,2,0.0015060676,<mask>,"        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return<mask>;
    }"
1968,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,270,9589,9593,IdentifierMutator-Literal,false,False,3,2.2347449E-4,<mask>,"        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return<mask>;
    }"
1969,Parser.java,stackHasValidParent,boolean stackHasValidParent(Tag childTag),255,270,9589,9593,IdentifierMutator-Literal,false,undefined,4,1.8426408E-4,<mask>,"        if (stack.size() == 1 && childTag.equals(htmlTag))
            return true; // root is valid for html node

        if (childTag.requiresSpecificParent())
            return stack.getLast().tag().isValidParent(childTag);

        // otherwise, look up the stack for valid ancestors
        for (int i = stack.size() -1; i >= 0; i--) {
            Element el = stack.get(i);
            Tag parent2 = el.tag();
            if (parent2.isValidAncestor(childTag)) {
                return true;
            }
        }
        return<mask>;
    }"
1970,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,274,9677,9677,UnaryOperatorMutator,!,...,1,0.009197558,<mask>stack.isEmpty(),"Element popStackToSuitableContainer(Tag tag) {
        while (<mask>stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1971,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,274,9677,9677,UnaryOperatorMutator,!,++,3,0.0028397923,<mask>stack.isEmpty(),"Element popStackToSuitableContainer(Tag tag) {
        while (<mask>stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1972,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,274,9677,9677,UnaryOperatorMutator,!,--,4,0.0024450254,<mask>stack.isEmpty(),"Element popStackToSuitableContainer(Tag tag) {
        while (<mask>stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1973,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,274,9684,9690,MethodCallMutator,isEmpty,empty,0,0.9745618,stack.<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.<mask>()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1974,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,274,9684,9690,MethodCallMutator,isEmpty,last,1,0.007684307,stack.<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.<mask>()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1975,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,274,9684,9690,MethodCallMutator,isEmpty,Empty,2,0.004890875,stack.<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.<mask>()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1976,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,274,9684,9690,MethodCallMutator,isEmpty,pop,3,0.0019986955,stack.<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.<mask>()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1977,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,274,9684,9690,MethodCallMutator,isEmpty,size,4,0.001107344,stack.<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.<mask>()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1978,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,274,9678,9682,IdentifierMutator-Variable,stack,Stack,2,0.003867521,<mask>,"Element popStackToSuitableContainer(Tag tag) {
        while (!<mask>.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1979,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,274,9678,9682,IdentifierMutator-Variable,stack,queue,3,0.001017104,<mask>,"Element popStackToSuitableContainer(Tag tag) {
        while (!<mask>.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1980,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,274,9678,9682,IdentifierMutator-Variable,stack,level,4,4.6848154E-4,<mask>,"Element popStackToSuitableContainer(Tag tag) {
        while (!<mask>.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1981,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,274,9678,9682,FieldReferenceMutator,stack,Stack,2,0.003867521,<mask>,"Element popStackToSuitableContainer(Tag tag) {
        while (!<mask>.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1982,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,274,9678,9682,FieldReferenceMutator,stack,queue,3,0.001017104,<mask>,"Element popStackToSuitableContainer(Tag tag) {
        while (!<mask>.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1983,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,274,9678,9682,FieldReferenceMutator,stack,level,4,4.6848154E-4,<mask>,"Element popStackToSuitableContainer(Tag tag) {
        while (!<mask>.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1984,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,275,9726,9735,MethodCallMutator,canContain,is,0,0.596515,last().tag().<mask>(tag),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().<mask>(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1985,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,275,9726,9735,MethodCallMutator,canContain,equals,1,0.05077321,last().tag().<mask>(tag),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().<mask>(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1986,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,275,9726,9735,MethodCallMutator,canContain,match,2,0.02399601,last().tag().<mask>(tag),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().<mask>(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1987,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,275,9726,9735,MethodCallMutator,canContain,was,3,0.022950847,last().tag().<mask>(tag),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().<mask>(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1988,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,275,9726,9735,MethodCallMutator,canContain,includes,4,0.021466728,last().tag().<mask>(tag),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().<mask>(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1989,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,275,9720,9722,MethodCallMutator,tag,children,0,0.31424707,last().<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().<mask>().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1990,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,275,9720,9722,MethodCallMutator,tag,container,1,0.23753981,last().<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().<mask>().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1991,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,275,9720,9722,MethodCallMutator,tag,tags,2,0.08305242,last().<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().<mask>().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1992,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,275,9720,9722,MethodCallMutator,tag,parent,3,0.04442306,last().<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().<mask>().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1993,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,275,9720,9722,MethodCallMutator,tag,parents,4,0.024745865,last().<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().<mask>().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1994,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,275,9713,9716,MethodCallMutator,last,current,1,0.10114571,<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (<mask>().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1995,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,275,9713,9716,MethodCallMutator,last,first,2,0.09507506,<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (<mask>().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1996,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,275,9713,9716,MethodCallMutator,last,next,3,0.01133012,<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (<mask>().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1997,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,275,9713,9716,MethodCallMutator,last,pop,4,0.01120407,<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (<mask>().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1998,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,275,9737,9739,IdentifierMutator-Variable,tag,Tag,1,7.151018E-4,<mask>,"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(<mask>))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
1999,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,275,9737,9739,IdentifierMutator-Variable,tag,TAG,3,1.4644074E-4,<mask>,"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(<mask>))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
2000,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,275,9737,9739,IdentifierMutator-Variable,tag,this,4,3.7713107E-5,<mask>,"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(<mask>))
                return last();
            else
                stack.removeLast();
        }
        return null;
    }"
2001,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,276,9766,9769,MethodCallMutator,last,first,1,0.07011129,<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return<mask>();
            else
                stack.removeLast();
        }
        return null;
    }"
2002,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,276,9766,9769,MethodCallMutator,last,element,2,0.017716246,<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return<mask>();
            else
                stack.removeLast();
        }
        return null;
    }"
2003,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,276,9766,9769,MethodCallMutator,last,next,3,0.008906045,<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return<mask>();
            else
                stack.removeLast();
        }
        return null;
    }"
2004,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,276,9766,9769,MethodCallMutator,last,pop,4,0.008127659,<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return<mask>();
            else
                stack.removeLast();
        }
        return null;
    }"
2005,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,278,9813,9822,MethodCallMutator,removeLast,pop,0,0.9476202,stack.<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.<mask>();
        }
        return null;
    }"
2006,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,278,9813,9822,MethodCallMutator,removeLast,remove,1,0.02728338,stack.<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.<mask>();
        }
        return null;
    }"
2007,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,278,9813,9822,MethodCallMutator,removeLast,clear,2,0.012318311,stack.<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.<mask>();
        }
        return null;
    }"
2008,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,278,9813,9822,MethodCallMutator,removeLast,push,3,0.0038949156,stack.<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.<mask>();
        }
        return null;
    }"
2009,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,278,9813,9822,MethodCallMutator,removeLast,empty,4,0.0024250504,stack.<mask>(),"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.<mask>();
        }
        return null;
    }"
2010,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,278,9807,9811,IdentifierMutator-Variable,stack,parent,2,0.0031448985,<mask>,"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else<mask>.removeLast();
        }
        return null;
    }"
2011,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,278,9807,9811,IdentifierMutator-Variable,stack,chain,3,0.0022621395,<mask>,"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else<mask>.removeLast();
        }
        return null;
    }"
2012,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,278,9807,9811,IdentifierMutator-Variable,stack,list,4,0.0021463612,<mask>,"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else<mask>.removeLast();
        }
        return null;
    }"
2013,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,278,9807,9811,FieldReferenceMutator,stack,parent,2,0.0031448985,<mask>,"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else<mask>.removeLast();
        }
        return null;
    }"
2014,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,278,9807,9811,FieldReferenceMutator,stack,chain,3,0.0022621395,<mask>,"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else<mask>.removeLast();
        }
        return null;
    }"
2015,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,278,9807,9811,FieldReferenceMutator,stack,list,4,0.0021463612,<mask>,"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else<mask>.removeLast();
        }
        return null;
    }"
2016,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,280,9852,9855,IdentifierMutator-Literal,null,tag,1,0.27652892,<mask>,"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return<mask>;
    }"
2017,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,280,9852,9855,IdentifierMutator-Literal,null,last,2,0.057261765,<mask>,"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return<mask>;
    }"
2018,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,280,9852,9855,IdentifierMutator-Literal,null,root,3,0.0130053405,<mask>,"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return<mask>;
    }"
2019,Parser.java,popStackToSuitableContainer,Element popStackToSuitableContainer(Tag tag),273,280,9852,9855,IdentifierMutator-Literal,null,first,4,0.010505432,<mask>,"Element popStackToSuitableContainer(Tag tag) {
        while (!stack.isEmpty()) {
            if (last().tag().canContain(tag))
                return last();
            else
                stack.removeLast();
        }
        return<mask>;
    }"
2020,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,285,10029,10029,IdentifierMutator-Literal,0,1,1,0.08928339,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter =<mask>;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2021,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,285,10029,10029,IdentifierMutator-Literal,0,2,2,0.0016726992,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter =<mask>;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2022,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,285,10029,10029,IdentifierMutator-Literal,0,5,4,3.1816732E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter =<mask>;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2023,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,286,10060,10063,IdentifierMutator-Literal,null,tag,1,0.0044217613,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose =<mask>;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2024,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,286,10060,10063,IdentifierMutator-Literal,null,this,2,8.9155097E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose =<mask>;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2025,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,286,10060,10063,IdentifierMutator-Literal,null,root,3,8.392497E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose =<mask>;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2026,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,286,10060,10063,IdentifierMutator-Literal,null,element,4,1.6172449E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose =<mask>;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2027,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10099,10100,BinaryOperatorMutator,-,)-,2,6.42813E-4,stack.size() <mask> 1,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size()<mask>1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2028,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10099,10100,BinaryOperatorMutator,-,+,3,4.1575936E-4,stack.size() <mask> 1,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size()<mask>1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2029,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10099,10100,BinaryOperatorMutator,-,-$,4,2.3002704E-5,stack.size() <mask> 1,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size()<mask>1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2030,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10093,10096,MethodCallMutator,size,length,1,2.0837295E-4,stack.<mask>(),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.<mask>() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2031,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10093,10096,MethodCallMutator,size,position,2,1.0116177E-4,stack.<mask>(),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.<mask>() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2032,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10093,10096,MethodCallMutator,size,rows,3,5.439716E-5,stack.<mask>(),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.<mask>() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2033,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10093,10096,MethodCallMutator,size,count,4,5.0910527E-5,stack.<mask>(),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.<mask>() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2034,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10087,10091,IdentifierMutator-Variable,stack,list,2,3.6765714E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i =<mask>.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2035,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10087,10091,IdentifierMutator-Variable,stack,queue,3,2.638334E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i =<mask>.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2036,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10087,10091,IdentifierMutator-Variable,stack,index,4,9.6258584E-5,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i =<mask>.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2037,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10087,10091,FieldReferenceMutator,stack,list,2,3.6765714E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i =<mask>.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2038,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10087,10091,FieldReferenceMutator,stack,queue,3,2.638334E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i =<mask>.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2039,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10087,10091,FieldReferenceMutator,stack,index,4,9.6258584E-5,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i =<mask>.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2040,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10101,10101,IdentifierMutator-Literal,1,2,1,0.008933843,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -<mask>; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2041,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10101,10101,IdentifierMutator-Literal,1,3,3,5.9788494E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -<mask>; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2042,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10101,10101,IdentifierMutator-Literal,1,4,4,2.3393134E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -<mask>; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2043,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10105,10107,BinaryOperatorMutator,>,>=,0,0.5752348,i <mask> 0,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i<mask>0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2044,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10105,10107,BinaryOperatorMutator,>,==,3,0.018664055,i <mask> 0,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i<mask>0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2045,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10105,10107,BinaryOperatorMutator,>,!=,4,0.0037047297,i <mask> 0,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i<mask>0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2046,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10104,10104,IdentifierMutator-Variable,i,counter,1,0.0015052937,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1;<mask> > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2047,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10104,10104,IdentifierMutator-Variable,i,I,3,6.814599E-5,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1;<mask> > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2048,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10104,10104,IdentifierMutator-Variable,i,index,4,5.8201593E-5,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1;<mask> > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2049,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10108,10108,IdentifierMutator-Literal,0,1,1,0.006045469,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i ><mask>; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2050,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10108,10108,IdentifierMutator-Literal,0,index,3,9.011233E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i ><mask>; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2051,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10108,10108,IdentifierMutator-Literal,0,i,4,4.591562E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i ><mask>; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2052,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10112,10113,UnaryOperatorMutator,--,++,2,3.9190034E-4,i<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i<mask>) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2053,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10112,10113,UnaryOperatorMutator,--,++;,3,1.6270653E-5,i<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i<mask>) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2054,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10112,10113,UnaryOperatorMutator,--,...,4,1.0840112E-5,i<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i<mask>) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2055,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10111,10111,IdentifierMutator-Variable,i,I,2,4.2279653E-6,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0;<mask>--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2056,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10111,10111,IdentifierMutator-Variable,i,I,3,3.3148071E-6,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0;<mask>--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2057,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,287,10111,10111,IdentifierMutator-Variable,i,++,4,2.6579476E-6,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0;<mask>--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2058,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,288,10137,10139,UnaryOperatorMutator,++,++;,0,0.9500106,counter<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter<mask>
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2059,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,288,10137,10139,UnaryOperatorMutator,++,;,3,0.0020638425,counter<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter<mask>
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2060,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,288,10137,10139,UnaryOperatorMutator,++,--,4,9.0374885E-4,counter<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter<mask>
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2061,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,288,10130,10136,IdentifierMutator-Variable,counter,Counter,2,0.0027590343,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {<mask>++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2062,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,288,10130,10136,IdentifierMutator-Variable,counter,i,3,2.3846653E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {<mask>++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2063,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,288,10130,10136,IdentifierMutator-Variable,counter,index,4,2.2000789E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {<mask>++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2064,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,289,10172,10174,MethodCallMutator,get,item,1,0.20522141,stack.<mask>(i),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.<mask>(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2065,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,289,10172,10174,MethodCallMutator,get,element,2,0.017957889,stack.<mask>(i),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.<mask>(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2066,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,289,10172,10174,MethodCallMutator,get,remove,3,0.006160544,stack.<mask>(i),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.<mask>(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2067,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,289,10172,10174,MethodCallMutator,get,pop,4,0.0013750807,stack.<mask>(i),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.<mask>(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2068,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,289,10166,10170,IdentifierMutator-Variable,stack,list,1,5.114012E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el =<mask>.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2069,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,289,10166,10170,IdentifierMutator-Variable,stack,queue,3,2.8841422E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el =<mask>.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2070,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,289,10166,10170,IdentifierMutator-Variable,stack,element,4,1.5957683E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el =<mask>.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2071,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,289,10166,10170,FieldReferenceMutator,stack,list,1,5.114012E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el =<mask>.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2072,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,289,10166,10170,FieldReferenceMutator,stack,queue,3,2.8841422E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el =<mask>.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2073,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,289,10166,10170,FieldReferenceMutator,stack,element,4,1.5957683E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el =<mask>.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2074,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,289,10176,10176,IdentifierMutator-Variable,i,0,1,0.0011318406,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(<mask>);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2075,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,289,10176,10176,IdentifierMutator-Variable,i,index,2,1.6910878E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(<mask>);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2076,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,289,10176,10176,IdentifierMutator-Variable,i,1,3,1.132585E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(<mask>);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2077,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,289,10176,10176,IdentifierMutator-Variable,i,I,4,9.582104E-5,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(<mask>);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2078,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,290,10207,10209,MethodCallMutator,tag,name,1,0.032979418,el.<mask>(),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.<mask>();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2079,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,290,10207,10209,MethodCallMutator,tag,get,2,0.032019056,el.<mask>(),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.<mask>();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2080,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,290,10207,10209,MethodCallMutator,tag,tags,3,0.005378857,el.<mask>(),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.<mask>();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2081,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,290,10207,10209,MethodCallMutator,tag,content,4,0.004012183,el.<mask>(),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.<mask>();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2082,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,290,10204,10205,IdentifierMutator-Variable,el,element,1,0.0013426226,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag =<mask>.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2083,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,290,10204,10205,IdentifierMutator-Variable,el,ele,2,6.442846E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag =<mask>.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2084,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,290,10204,10205,IdentifierMutator-Variable,el,tag,3,4.422482E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag =<mask>.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2085,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10251,10254,BinaryOperatorMutator,||,|,1,0.07682752,elTag.equals(org.jsoup.parser.Parser.bodyTag) <mask> elTag.equals(org.jsoup.parser.Parser.htmlTag),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag)<mask>elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2086,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10251,10254,BinaryOperatorMutator,||,&&,3,0.011607365,elTag.equals(org.jsoup.parser.Parser.bodyTag) <mask> elTag.equals(org.jsoup.parser.Parser.htmlTag),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag)<mask>elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2087,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10251,10254,BinaryOperatorMutator,||,or,4,0.007784066,elTag.equals(org.jsoup.parser.Parser.bodyTag) <mask> elTag.equals(org.jsoup.parser.Parser.htmlTag),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag)<mask>elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2088,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10236,10241,MethodCallMutator,equals,is,0,0.4276279,elTag.<mask>(bodyTag),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.<mask>(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2089,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10236,10241,MethodCallMutator,equals,includes,1,0.15873605,elTag.<mask>(bodyTag),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.<mask>(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2090,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10236,10241,MethodCallMutator,equals,equ,3,0.046421733,elTag.<mask>(bodyTag),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.<mask>(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2091,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10236,10241,MethodCallMutator,equals,tag,4,0.0370663,elTag.<mask>(bodyTag),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.<mask>(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2092,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10230,10234,IdentifierMutator-Variable,elTag,tag,0,0.9921783,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (<mask>.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2093,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10230,10234,IdentifierMutator-Variable,elTag,el,1,0.0041993004,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (<mask>.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2094,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10230,10234,IdentifierMutator-Variable,elTag,Tag,2,0.0010067215,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (<mask>.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2095,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10230,10234,IdentifierMutator-Variable,elTag,element,3,5.473607E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (<mask>.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2096,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10230,10234,IdentifierMutator-Variable,elTag,xml,4,2.520385E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (<mask>.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2097,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10243,10249,IdentifierMutator-Variable,org.jsoup.parser.Parser.bodyTag,tag,0,0.7343901,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(<mask>) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2098,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10243,10249,IdentifierMutator-Variable,org.jsoup.parser.Parser.bodyTag,body,1,0.13824888,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(<mask>) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2099,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10243,10249,IdentifierMutator-Variable,org.jsoup.parser.Parser.bodyTag,html,2,0.043345734,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(<mask>) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2100,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10243,10249,IdentifierMutator-Variable,org.jsoup.parser.Parser.bodyTag,xml,3,0.012066052,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(<mask>) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2101,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10243,10249,IdentifierMutator-Variable,org.jsoup.parser.Parser.bodyTag,head,4,0.010733037,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(<mask>) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2102,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10243,10249,FieldReferenceMutator,bodyTag,tag,0,0.7343901,org.jsoup.parser.Parser.<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(<mask>) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2103,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10243,10249,FieldReferenceMutator,bodyTag,body,1,0.13824888,org.jsoup.parser.Parser.<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(<mask>) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2104,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10243,10249,FieldReferenceMutator,bodyTag,html,2,0.043345734,org.jsoup.parser.Parser.<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(<mask>) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2105,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10243,10249,FieldReferenceMutator,bodyTag,xml,3,0.012066052,org.jsoup.parser.Parser.<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(<mask>) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2106,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10243,10249,FieldReferenceMutator,bodyTag,head,4,0.010733037,org.jsoup.parser.Parser.<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(<mask>) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2107,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10261,10266,MethodCallMutator,equals,equ,0,0.30886063,elTag.<mask>(htmlTag),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.<mask>(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2108,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10261,10266,MethodCallMutator,equals,is,1,0.27185723,elTag.<mask>(htmlTag),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.<mask>(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2109,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10261,10266,MethodCallMutator,equals,equal,3,0.055733282,elTag.<mask>(htmlTag),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.<mask>(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2110,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10261,10266,MethodCallMutator,equals,includes,4,0.042644255,elTag.<mask>(htmlTag),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.<mask>(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2111,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10255,10259,IdentifierMutator-Variable,elTag,tag,0,0.6219707,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) ||<mask>.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2112,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10255,10259,IdentifierMutator-Variable,elTag,el,1,0.36049673,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) ||<mask>.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2113,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10255,10259,IdentifierMutator-Variable,elTag,element,2,0.0020788356,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) ||<mask>.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2114,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10255,10259,IdentifierMutator-Variable,elTag,html,3,0.0011500068,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) ||<mask>.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2115,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10255,10259,IdentifierMutator-Variable,elTag,Tag,4,0.0010022677,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) ||<mask>.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2116,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10268,10274,IdentifierMutator-Variable,org.jsoup.parser.Parser.htmlTag,tag,0,0.9864109,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(<mask>)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2117,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10268,10274,IdentifierMutator-Variable,org.jsoup.parser.Parser.htmlTag,Tag,1,0.0018186708,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(<mask>)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2118,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10268,10274,IdentifierMutator-Variable,org.jsoup.parser.Parser.htmlTag,html,2,9.0536405E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(<mask>)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2119,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10268,10274,IdentifierMutator-Variable,org.jsoup.parser.Parser.htmlTag,body,3,8.3380676E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(<mask>)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2120,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10268,10274,IdentifierMutator-Variable,org.jsoup.parser.Parser.htmlTag,xml,4,5.9865625E-4,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(<mask>)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2121,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10268,10274,FieldReferenceMutator,htmlTag,tag,0,0.9864109,org.jsoup.parser.Parser.<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(<mask>)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2122,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10268,10274,FieldReferenceMutator,htmlTag,Tag,1,0.0018186708,org.jsoup.parser.Parser.<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(<mask>)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2123,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10268,10274,FieldReferenceMutator,htmlTag,html,2,9.0536405E-4,org.jsoup.parser.Parser.<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(<mask>)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2124,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10268,10274,FieldReferenceMutator,htmlTag,body,3,8.3380676E-4,org.jsoup.parser.Parser.<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(<mask>)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2125,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,291,10268,10274,FieldReferenceMutator,htmlTag,xml,4,5.9865625E-4,org.jsoup.parser.Parser.<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(<mask>)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2126,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,293,10371,10376,MethodCallMutator,equals,is,0,0.24443635,elTag.<mask>(tag),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.<mask>(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2127,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,293,10371,10376,MethodCallMutator,equals,ends,1,0.09622991,elTag.<mask>(tag),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.<mask>(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2128,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,293,10371,10376,MethodCallMutator,equals,tag,2,0.0950738,elTag.<mask>(tag),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.<mask>(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2129,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,293,10371,10376,MethodCallMutator,equals,includes,3,0.060317192,elTag.<mask>(tag),"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.<mask>(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2130,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,293,10365,10369,IdentifierMutator-Variable,elTag,el,0,0.6829758,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (<mask>.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2131,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,293,10365,10369,IdentifierMutator-Variable,elTag,tag,1,0.27189347,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (<mask>.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2132,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,293,10365,10369,IdentifierMutator-Variable,elTag,elt,2,0.0059264163,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (<mask>.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2133,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,293,10365,10369,IdentifierMutator-Variable,elTag,element,3,0.0051428154,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (<mask>.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2134,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,293,10365,10369,IdentifierMutator-Variable,elTag,El,4,0.0035076975,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (<mask>.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2135,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,293,10378,10380,IdentifierMutator-Variable,tag,Tag,1,0.0054843915,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(<mask>)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2136,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,293,10378,10380,IdentifierMutator-Variable,tag,el,2,0.0036258085,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(<mask>)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2137,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,293,10378,10380,IdentifierMutator-Variable,tag,element,3,0.0026498588,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(<mask>)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2138,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,293,10378,10380,IdentifierMutator-Variable,tag,xml,4,0.0023534999,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(<mask>)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2139,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,294,10411,10411,AssignmentMutator,elToClose=el,|,0,0.5828161,elToClose <mask>= el,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose<mask>= el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2140,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,294,10411,10411,AssignmentMutator,elToClose=el,!,1,0.115429126,elToClose <mask>= el,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose<mask>= el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2141,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,294,10411,10411,AssignmentMutator,elToClose=el,.,2,0.11122901,elToClose <mask>= el,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose<mask>= el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2142,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,294,10411,10411,AssignmentMutator,elToClose=el,&,3,0.023778453,elToClose <mask>= el,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose<mask>= el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2143,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,294,10411,10411,AssignmentMutator,elToClose=el,||,4,0.02189571,elToClose <mask>= el,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose<mask>= el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2144,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,294,10402,10410,IdentifierMutator-Variable,elToClose,tag,0,0.3765133,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {<mask> = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2145,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,294,10402,10410,IdentifierMutator-Variable,elToClose,element,1,0.053231876,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {<mask> = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2146,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,294,10402,10410,IdentifierMutator-Variable,elToClose,root,2,0.05064972,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {<mask> = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2147,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,294,10402,10410,IdentifierMutator-Variable,elToClose,prev,3,0.0394664,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {<mask> = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2148,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,294,10402,10410,IdentifierMutator-Variable,elToClose,parent,4,0.036236342,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {<mask> = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2149,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,294,10414,10415,IdentifierMutator-Variable,el,element,1,0.0030358755,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose =<mask>;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2150,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,294,10414,10415,IdentifierMutator-Variable,el,tag,2,0.0028277212,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose =<mask>;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2151,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,294,10414,10415,IdentifierMutator-Variable,el,null,3,0.0024354174,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose =<mask>;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2152,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,294,10414,10415,IdentifierMutator-Variable,el,ele,4,0.0023327223,<mask>,"Element popStackToClose(Tag tag) {
        // first check to see if stack contains this tag; if so pop to there, otherwise ignore
        int counter = 0;
        Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose =<mask>;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2153,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,298,10486,10489,BinaryOperatorMutator,!=,==,0,0.80910724,elToClose <mask> null,"    Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose<mask>null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2154,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,298,10486,10489,BinaryOperatorMutator,!=,==,1,0.08723986,elToClose <mask> null,"    Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose<mask>null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2155,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,298,10486,10489,BinaryOperatorMutator,!=,=,2,0.062379986,elToClose <mask> null,"    Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose<mask>null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2156,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,298,10486,10489,BinaryOperatorMutator,!=,===,4,0.0011253032,elToClose <mask> null,"    Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose<mask>null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2157,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,298,10477,10485,IdentifierMutator-Variable,elToClose,stack,0,0.91176826,<mask>,"       Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (<mask> != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2158,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,298,10477,10485,IdentifierMutator-Variable,elToClose,counter,1,0.012356087,<mask>,"       Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (<mask> != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2159,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,298,10477,10485,IdentifierMutator-Variable,elToClose,parent,2,0.00532492,<mask>,"       Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (<mask> != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2160,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,298,10477,10485,IdentifierMutator-Variable,elToClose,scope,3,0.0030845646,<mask>,"       Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (<mask> != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2161,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,298,10477,10485,IdentifierMutator-Variable,elToClose,element,4,0.0027543795,<mask>,"       Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (<mask> != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2162,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,298,10490,10493,IdentifierMutator-Literal,null,this,2,1.3257237E-4,<mask>,"   Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose !=<mask>) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2163,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,298,10490,10493,IdentifierMutator-Literal,null,NULL,3,1.1631029E-4,<mask>,"   Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose !=<mask>) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2164,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,298,10490,10493,IdentifierMutator-Literal,null,nil,4,1.1368913E-4,<mask>,"   Element elToClose = null;
        for (int i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose !=<mask>) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2165,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,299,10523,10523,IdentifierMutator-Literal,0,1,1,0.081642196,<mask>," i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i =<mask>; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2166,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,299,10523,10523,IdentifierMutator-Literal,0,2,3,0.0012567949,<mask>," i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i =<mask>; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2167,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,299,10523,10523,IdentifierMutator-Literal,0,start,4,0.0010454819,<mask>," i = stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i =<mask>; i < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2168,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,299,10527,10529,BinaryOperatorMutator,<,==,2,7.840418E-4,i <mask> counter,".size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i<mask>counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2169,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,299,10527,10529,BinaryOperatorMutator,<,++,3,5.8569E-4,i <mask> counter,".size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i<mask>counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2170,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,299,10527,10529,BinaryOperatorMutator,<,</,4,4.2744857E-4,i <mask> counter,".size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i<mask>counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2171,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,299,10526,10526,IdentifierMutator-Variable,i,I,2,5.880683E-5,<mask>," stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0;<mask> < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2172,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,299,10526,10526,IdentifierMutator-Variable,i,j,3,3.9310053E-5,<mask>," stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0;<mask> < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2173,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,299,10526,10526,IdentifierMutator-Variable,i,I,4,3.292544E-5,<mask>," stack.size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0;<mask> < counter; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2174,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,299,10530,10536,IdentifierMutator-Variable,counter,count,1,0.09887817,<mask>,"size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i <<mask>; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2175,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,299,10530,10536,IdentifierMutator-Variable,counter,stack,2,0.027844183,<mask>,"size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i <<mask>; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2176,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,299,10530,10536,IdentifierMutator-Variable,counter,size,3,0.027511181,<mask>,"size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i <<mask>; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2177,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,299,10530,10536,IdentifierMutator-Variable,counter,n,4,0.020556659,<mask>,"size() -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i <<mask>; i++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2178,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,299,10540,10541,UnaryOperatorMutator,++,++),2,0.005498588,i<mask>,"1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i<mask>) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2179,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,299,10540,10541,UnaryOperatorMutator,++,--,3,0.0020669596,i<mask>,"1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i<mask>) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2180,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,299,10540,10541,UnaryOperatorMutator,++,++;,4,7.469601E-4,i<mask>,"1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i<mask>) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2181,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,299,10539,10539,IdentifierMutator-Variable,i,++,2,1.6962318E-5,<mask>," -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter;<mask>++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2182,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,299,10539,10539,IdentifierMutator-Variable,i,I,3,1.5914227E-5,<mask>," -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter;<mask>++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2183,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,299,10539,10539,IdentifierMutator-Variable,i,j,4,1.5012625E-5,<mask>," -1; i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter;<mask>++) {
                stack.removeLast();
            }
        }
        return elToClose;
    }"
2184,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,300,10568,10577,MethodCallMutator,removeLast,pop,0,0.8532189,stack.<mask>(),"   counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.<mask>();
            }
        }
        return elToClose;
    }"
2185,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,300,10568,10577,MethodCallMutator,removeLast,remove,1,0.046674464,stack.<mask>(),"   counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.<mask>();
            }
        }
        return elToClose;
    }"
2186,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,300,10568,10577,MethodCallMutator,removeLast,clear,2,0.02282394,stack.<mask>(),"   counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.<mask>();
            }
        }
        return elToClose;
    }"
2187,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,300,10568,10577,MethodCallMutator,removeLast,close,3,0.013806633,stack.<mask>(),"   counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.<mask>();
            }
        }
        return elToClose;
    }"
2188,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,300,10568,10577,MethodCallMutator,removeLast,push,4,0.0054927166,stack.<mask>(),"   counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.<mask>();
            }
        }
        return elToClose;
    }"
2189,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,300,10562,10566,IdentifierMutator-Variable,stack,list,2,0.015822874,<mask>," i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {<mask>.removeLast();
            }
        }
        return elToClose;
    }"
2190,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,300,10562,10566,IdentifierMutator-Variable,stack,element,3,0.0049639163,<mask>," i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {<mask>.removeLast();
            }
        }
        return elToClose;
    }"
2191,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,300,10562,10566,IdentifierMutator-Variable,stack,el,4,0.0042045484,<mask>," i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {<mask>.removeLast();
            }
        }
        return elToClose;
    }"
2192,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,300,10562,10566,FieldReferenceMutator,stack,list,2,0.015822874,<mask>," i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {<mask>.removeLast();
            }
        }
        return elToClose;
    }"
2193,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,300,10562,10566,FieldReferenceMutator,stack,element,3,0.0049639163,<mask>," i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {<mask>.removeLast();
            }
        }
        return elToClose;
    }"
2194,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,300,10562,10566,FieldReferenceMutator,stack,el,4,0.0042045484,<mask>," i > 0; i--) {
            counter++;
            Element el = stack.get(i);
            Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {<mask>.removeLast();
            }
        }
        return elToClose;
    }"
2195,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,303,10621,10629,IdentifierMutator-Variable,elToClose,false,0,0.30407345,<mask>,"    Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return<mask>;
    }"
2196,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,303,10621,10629,IdentifierMutator-Variable,elToClose,null,1,0.2047034,<mask>,"    Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return<mask>;
    }"
2197,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,303,10621,10629,IdentifierMutator-Variable,elToClose,el,2,0.14228874,<mask>,"    Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return<mask>;
    }"
2198,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,303,10621,10629,IdentifierMutator-Variable,elToClose,true,3,0.11844568,<mask>,"    Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return<mask>;
    }"
2199,Parser.java,popStackToClose,Element popStackToClose(Tag tag),283,303,10621,10629,IdentifierMutator-Variable,elToClose,this,4,0.025429182,<mask>,"    Tag elTag = el.tag();
            if (elTag.equals(bodyTag) || elTag.equals(htmlTag)) { // once in body, don't close past body
                break;
            } else if (elTag.equals(tag)) {
                elToClose = el;
                break;
            }
        }
        if (elToClose != null) {
            for (int i = 0; i < counter; i++) {
                stack.removeLast();
            }
        }
        return<mask>;
    }"
2200,Parser.java,last,Element last(),306,307,10689,10695,MethodCallMutator,getLast,last,0,0.52779454,stack.<mask>(),"Element last() {
        return stack.<mask>();
    }"
2201,Parser.java,last,Element last(),306,307,10689,10695,MethodCallMutator,getLast,pop,1,0.44998857,stack.<mask>(),"Element last() {
        return stack.<mask>();
    }"
2202,Parser.java,last,Element last(),306,307,10689,10695,MethodCallMutator,getLast,first,2,0.0046450347,stack.<mask>(),"Element last() {
        return stack.<mask>();
    }"
2203,Parser.java,last,Element last(),306,307,10689,10695,MethodCallMutator,getLast,top,3,0.0026708196,stack.<mask>(),"Element last() {
        return stack.<mask>();
    }"
2204,Parser.java,last,Element last(),306,307,10689,10695,MethodCallMutator,getLast,Last,4,0.0024902327,stack.<mask>(),"Element last() {
        return stack.<mask>();
    }"
2205,Parser.java,last,Element last(),306,307,10683,10687,IdentifierMutator-Variable,stack,list,0,0.25943133,<mask>,"Element last() {
        return<mask>.getLast();
    }"
2206,Parser.java,last,Element last(),306,307,10683,10687,IdentifierMutator-Variable,stack,elements,1,0.13242877,<mask>,"Element last() {
        return<mask>.getLast();
    }"
2207,Parser.java,last,Element last(),306,307,10683,10687,IdentifierMutator-Variable,stack,root,3,0.024927566,<mask>,"Element last() {
        return<mask>.getLast();
    }"
2208,Parser.java,last,Element last(),306,307,10683,10687,IdentifierMutator-Variable,stack,super,4,0.022091255,<mask>,"Element last() {
        return<mask>.getLast();
    }"
2209,Parser.java,last,Element last(),306,307,10683,10687,FieldReferenceMutator,stack,list,0,0.25943133,<mask>,"Element last() {
        return<mask>.getLast();
    }"
2210,Parser.java,last,Element last(),306,307,10683,10687,FieldReferenceMutator,stack,elements,1,0.13242877,<mask>,"Element last() {
        return<mask>.getLast();
    }"
2211,Parser.java,last,Element last(),306,307,10683,10687,FieldReferenceMutator,stack,root,3,0.024927566,<mask>,"Element last() {
        return<mask>.getLast();
    }"
2212,Parser.java,last,Element last(),306,307,10683,10687,FieldReferenceMutator,stack,super,4,0.022091255,<mask>,"Element last() {
        return<mask>.getLast();
    }"

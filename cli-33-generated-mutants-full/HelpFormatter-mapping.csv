id,classname,method_name,method_sig,method_def_line,mut_location,mut_start,mut_end,mut_operator,orig_token,pred_token,pred_pos,pred_score,masked_expr,masked_seq
0,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4949,4949,AssignmentMutator,this.defaultWidth=width,*,0,0.5539088,this.defaultWidth <mask>= width,"void setWidth(int width)
    {
        this.defaultWidth<mask>= width;
    }"
1,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4949,4949,AssignmentMutator,this.defaultWidth=width,|,1,0.10392741,this.defaultWidth <mask>= width,"void setWidth(int width)
    {
        this.defaultWidth<mask>= width;
    }"
2,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4949,4949,AssignmentMutator,this.defaultWidth=width,/,2,0.049079612,this.defaultWidth <mask>= width,"void setWidth(int width)
    {
        this.defaultWidth<mask>= width;
    }"
3,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4949,4949,AssignmentMutator,this.defaultWidth=width,,3,0.030767355,this.defaultWidth <mask>= width,"void setWidth(int width)
    {
        this.defaultWidth<mask>= width;
    }"
4,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4949,4949,AssignmentMutator,this.defaultWidth=width,^,4,0.026615806,this.defaultWidth <mask>= width,"void setWidth(int width)
    {
        this.defaultWidth<mask>= width;
    }"
5,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4932,4948,IdentifierMutator-Variable,this.defaultWidth,width,0,0.98146284,<mask>,"void setWidth(int width)
    {<mask> = width;
    }"
6,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4932,4948,IdentifierMutator-Variable,this.defaultWidth,width,1,0.0038212386,<mask>,"void setWidth(int width)
    {<mask> = width;
    }"
7,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4932,4948,IdentifierMutator-Variable,this.defaultWidth,Width,2,0.0036408238,<mask>,"void setWidth(int width)
    {<mask> = width;
    }"
8,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4932,4948,IdentifierMutator-Variable,this.defaultWidth,w,3,0.0026923541,<mask>,"void setWidth(int width)
    {<mask> = width;
    }"
9,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4932,4948,IdentifierMutator-Variable,this.defaultWidth,Width,4,0.0025274192,<mask>,"void setWidth(int width)
    {<mask> = width;
    }"
10,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4932,4935,IdentifierMutator-ThisAccess,this,m,1,0.020001862,<mask>,"void setWidth(int width)
    {<mask>.defaultWidth = width;
    }"
11,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4932,4935,IdentifierMutator-ThisAccess,this,style,2,0.0124433385,<mask>,"void setWidth(int width)
    {<mask>.defaultWidth = width;
    }"
12,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4932,4935,IdentifierMutator-ThisAccess,this,super,3,0.008202432,<mask>,"void setWidth(int width)
    {<mask>.defaultWidth = width;
    }"
13,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4932,4935,IdentifierMutator-ThisAccess,this,view,4,0.005342252,<mask>,"void setWidth(int width)
    {<mask>.defaultWidth = width;
    }"
14,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4937,4948,FieldReferenceMutator,defaultWidth,width,0,0.99448353,this.<mask>,"void setWidth(int width)
    {
        this.<mask> = width;
    }"
15,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4937,4948,FieldReferenceMutator,defaultWidth,w,1,0.0013961616,this.<mask>,"void setWidth(int width)
    {
        this.<mask> = width;
    }"
16,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4937,4948,FieldReferenceMutator,defaultWidth,weight,2,6.984694E-4,this.<mask>,"void setWidth(int width)
    {
        this.<mask> = width;
    }"
17,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4937,4948,FieldReferenceMutator,defaultWidth,Width,3,6.705313E-4,this.<mask>,"void setWidth(int width)
    {
        this.<mask> = width;
    }"
18,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4937,4948,FieldReferenceMutator,defaultWidth,size,4,6.61203E-4,this.<mask>,"void setWidth(int width)
    {
        this.<mask> = width;
    }"
19,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4952,4956,IdentifierMutator-Variable,width,Width,2,9.6282296E-5,<mask>,"void setWidth(int width)
    {
        this.defaultWidth =<mask>;
    }"
20,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4952,4956,IdentifierMutator-Variable,width,height,3,7.438792E-5,<mask>,"void setWidth(int width)
    {
        this.defaultWidth =<mask>;
    }"
21,HelpFormatter.java,setWidth,void setWidth(int width),152,154,4952,4956,IdentifierMutator-Variable,width,0,4,6.8493566E-5,<mask>,"void setWidth(int width)
    {
        this.defaultWidth =<mask>;
    }"
22,HelpFormatter.java,getWidth,int getWidth(),162,164,5091,5102,IdentifierMutator-Variable,defaultWidth,width,0,0.84409416,<mask>,"int getWidth()
    {
        return<mask>;
    }"
23,HelpFormatter.java,getWidth,int getWidth(),162,164,5091,5102,IdentifierMutator-Variable,defaultWidth,w,1,0.107002325,<mask>,"int getWidth()
    {
        return<mask>;
    }"
24,HelpFormatter.java,getWidth,int getWidth(),162,164,5091,5102,IdentifierMutator-Variable,defaultWidth,0,2,0.0041045104,<mask>,"int getWidth()
    {
        return<mask>;
    }"
25,HelpFormatter.java,getWidth,int getWidth(),162,164,5091,5102,IdentifierMutator-Variable,defaultWidth,x,3,0.0031579386,<mask>,"int getWidth()
    {
        return<mask>;
    }"
26,HelpFormatter.java,getWidth,int getWidth(),162,164,5091,5102,IdentifierMutator-Variable,defaultWidth,1,4,0.0026563006,<mask>,"int getWidth()
    {
        return<mask>;
    }"
27,HelpFormatter.java,getWidth,int getWidth(),162,164,5091,5102,FieldReferenceMutator,defaultWidth,width,0,0.84409416,<mask>,"int getWidth()
    {
        return<mask>;
    }"
28,HelpFormatter.java,getWidth,int getWidth(),162,164,5091,5102,FieldReferenceMutator,defaultWidth,w,1,0.107002325,<mask>,"int getWidth()
    {
        return<mask>;
    }"
29,HelpFormatter.java,getWidth,int getWidth(),162,164,5091,5102,FieldReferenceMutator,defaultWidth,0,2,0.0041045104,<mask>,"int getWidth()
    {
        return<mask>;
    }"
30,HelpFormatter.java,getWidth,int getWidth(),162,164,5091,5102,FieldReferenceMutator,defaultWidth,x,3,0.0031579386,<mask>,"int getWidth()
    {
        return<mask>;
    }"
31,HelpFormatter.java,getWidth,int getWidth(),162,164,5091,5102,FieldReferenceMutator,defaultWidth,1,4,0.0026563006,<mask>,"int getWidth()
    {
        return<mask>;
    }"
32,HelpFormatter.java,setLeftPadding,void setLeftPadding(int padding),172,174,5296,5296,AssignmentMutator,this.defaultLeftPad=padding,|,0,0.64789164,this.defaultLeftPad <mask>= padding,"void setLeftPadding(int padding)
    {
        this.defaultLeftPad<mask>= padding;
    }"
33,HelpFormatter.java,setLeftPadding,void setLeftPadding(int padding),172,174,5296,5296,AssignmentMutator,this.defaultLeftPad=padding,*,1,0.18560106,this.defaultLeftPad <mask>= padding,"void setLeftPadding(int padding)
    {
        this.defaultLeftPad<mask>= padding;
    }"
34,HelpFormatter.java,setLeftPadding,void setLeftPadding(int padding),172,174,5296,5296,AssignmentMutator,this.defaultLeftPad=padding,^,2,0.014884897,this.defaultLeftPad <mask>= padding,"void setLeftPadding(int padding)
    {
        this.defaultLeftPad<mask>= padding;
    }"
35,HelpFormatter.java,setLeftPadding,void setLeftPadding(int padding),172,174,5296,5296,AssignmentMutator,this.defaultLeftPad=padding,&,3,0.0109019205,this.defaultLeftPad <mask>= padding,"void setLeftPadding(int padding)
    {
        this.defaultLeftPad<mask>= padding;
    }"
36,HelpFormatter.java,setLeftPadding,void setLeftPadding(int padding),172,174,5296,5296,AssignmentMutator,this.defaultLeftPad=padding,,4,0.008520136,this.defaultLeftPad <mask>= padding,"void setLeftPadding(int padding)
    {
        this.defaultLeftPad<mask>= padding;
    }"
37,HelpFormatter.java,setLeftPadding,void setLeftPadding(int padding),172,174,5277,5295,IdentifierMutator-Variable,this.defaultLeftPad,padding,0,0.9836293,<mask>,"void setLeftPadding(int padding)
    {<mask> = padding;
    }"
38,HelpFormatter.java,setLeftPadding,void setLeftPadding(int padding),172,174,5277,5295,IdentifierMutator-Variable,this.defaultLeftPad,left,1,0.005639524,<mask>,"void setLeftPadding(int padding)
    {<mask> = padding;
    }"
39,HelpFormatter.java,setLeftPadding,void setLeftPadding(int padding),172,174,5277,5295,IdentifierMutator-Variable,this.defaultLeftPad,padding,2,0.0024183549,<mask>,"void setLeftPadding(int padding)
    {<mask> = padding;
    }"
40,HelpFormatter.java,setLeftPadding,void setLeftPadding(int padding),172,174,5277,5295,IdentifierMutator-Variable,this.defaultLeftPad,pad,3,0.0023259067,<mask>,"void setLeftPadding(int padding)
    {<mask> = padding;
    }"
41,HelpFormatter.java,setLeftPadding,void setLeftPadding(int padding),172,174,5277,5295,IdentifierMutator-Variable,this.defaultLeftPad,width,4,0.001369644,<mask>,"void setLeftPadding(int padding)
    {<mask> = padding;
    }"
42,HelpFormatter.java,setLeftPadding,void setLeftPadding(int padding),172,174,5277,5280,IdentifierMutator-ThisAccess,this,style,1,0.016257185,<mask>,"void setLeftPadding(int padding)
    {<mask>.defaultLeftPad = padding;
    }"
43,HelpFormatter.java,setLeftPadding,void setLeftPadding(int padding),172,174,5277,5280,IdentifierMutator-ThisAccess,this,m,2,0.0061859214,<mask>,"void setLeftPadding(int padding)
    {<mask>.defaultLeftPad = padding;
    }"
44,HelpFormatter.java,setLeftPadding,void setLeftPadding(int padding),172,174,5277,5280,IdentifierMutator-ThisAccess,this,super,4,0.004871972,<mask>,"void setLeftPadding(int padding)
    {<mask>.defaultLeftPad = padding;
    }"
45,HelpFormatter.java,setLeftPadding,void setLeftPadding(int padding),172,174,5282,5295,FieldReferenceMutator,defaultLeftPad,padding,0,0.987815,this.<mask>,"void setLeftPadding(int padding)
    {
        this.<mask> = padding;
    }"
46,HelpFormatter.java,setLeftPadding,void setLeftPadding(int padding),172,174,5282,5295,FieldReferenceMutator,defaultLeftPad,left,1,0.003835663,this.<mask>,"void setLeftPadding(int padding)
    {
        this.<mask> = padding;
    }"
47,HelpFormatter.java,setLeftPadding,void setLeftPadding(int padding),172,174,5282,5295,FieldReferenceMutator,defaultLeftPad,pad,2,0.0022005236,this.<mask>,"void setLeftPadding(int padding)
    {
        this.<mask> = padding;
    }"
48,HelpFormatter.java,setLeftPadding,void setLeftPadding(int padding),172,174,5282,5295,FieldReferenceMutator,defaultLeftPad,width,3,0.0017688316,this.<mask>,"void setLeftPadding(int padding)
    {
        this.<mask> = padding;
    }"
49,HelpFormatter.java,setLeftPadding,void setLeftPadding(int padding),172,174,5282,5295,FieldReferenceMutator,defaultLeftPad,margin,4,6.8886613E-4,this.<mask>,"void setLeftPadding(int padding)
    {
        this.<mask> = padding;
    }"
50,HelpFormatter.java,setLeftPadding,void setLeftPadding(int padding),172,174,5299,5305,IdentifierMutator-Variable,padding,pad,1,7.349127E-4,<mask>,"void setLeftPadding(int padding)
    {
        this.defaultLeftPad =<mask>;
    }"
51,HelpFormatter.java,setLeftPadding,void setLeftPadding(int padding),172,174,5299,5305,IdentifierMutator-Variable,padding,0,3,1.4319713E-4,<mask>,"void setLeftPadding(int padding)
    {
        this.defaultLeftPad =<mask>;
    }"
52,HelpFormatter.java,setLeftPadding,void setLeftPadding(int padding),172,174,5299,5305,IdentifierMutator-Variable,padding,null,4,2.8102582E-5,<mask>,"void setLeftPadding(int padding)
    {
        this.defaultLeftPad =<mask>;
    }"
53,HelpFormatter.java,getLeftPadding,int getLeftPadding(),182,184,5458,5471,IdentifierMutator-Variable,defaultLeftPad,padding,0,0.4854109,<mask>,"int getLeftPadding()
    {
        return<mask>;
    }"
54,HelpFormatter.java,getLeftPadding,int getLeftPadding(),182,184,5458,5471,IdentifierMutator-Variable,defaultLeftPad,0,1,0.22284046,<mask>,"int getLeftPadding()
    {
        return<mask>;
    }"
55,HelpFormatter.java,getLeftPadding,int getLeftPadding(),182,184,5458,5471,IdentifierMutator-Variable,defaultLeftPad,left,2,0.045001425,<mask>,"int getLeftPadding()
    {
        return<mask>;
    }"
56,HelpFormatter.java,getLeftPadding,int getLeftPadding(),182,184,5458,5471,IdentifierMutator-Variable,defaultLeftPad,1,3,0.027370755,<mask>,"int getLeftPadding()
    {
        return<mask>;
    }"
57,HelpFormatter.java,getLeftPadding,int getLeftPadding(),182,184,5458,5471,IdentifierMutator-Variable,defaultLeftPad,width,4,0.022932302,<mask>,"int getLeftPadding()
    {
        return<mask>;
    }"
58,HelpFormatter.java,getLeftPadding,int getLeftPadding(),182,184,5458,5471,FieldReferenceMutator,defaultLeftPad,padding,0,0.4854109,<mask>,"int getLeftPadding()
    {
        return<mask>;
    }"
59,HelpFormatter.java,getLeftPadding,int getLeftPadding(),182,184,5458,5471,FieldReferenceMutator,defaultLeftPad,0,1,0.22284046,<mask>,"int getLeftPadding()
    {
        return<mask>;
    }"
60,HelpFormatter.java,getLeftPadding,int getLeftPadding(),182,184,5458,5471,FieldReferenceMutator,defaultLeftPad,left,2,0.045001425,<mask>,"int getLeftPadding()
    {
        return<mask>;
    }"
61,HelpFormatter.java,getLeftPadding,int getLeftPadding(),182,184,5458,5471,FieldReferenceMutator,defaultLeftPad,1,3,0.027370755,<mask>,"int getLeftPadding()
    {
        return<mask>;
    }"
62,HelpFormatter.java,getLeftPadding,int getLeftPadding(),182,184,5458,5471,FieldReferenceMutator,defaultLeftPad,width,4,0.022932302,<mask>,"int getLeftPadding()
    {
        return<mask>;
    }"
63,HelpFormatter.java,setDescPadding,void setDescPadding(int padding),192,194,5665,5665,AssignmentMutator,this.defaultDescPad=padding,|,0,0.8537328,this.defaultDescPad <mask>= padding,"void setDescPadding(int padding)
    {
        this.defaultDescPad<mask>= padding;
    }"
64,HelpFormatter.java,setDescPadding,void setDescPadding(int padding),192,194,5665,5665,AssignmentMutator,this.defaultDescPad=padding,*,1,0.08086522,this.defaultDescPad <mask>= padding,"void setDescPadding(int padding)
    {
        this.defaultDescPad<mask>= padding;
    }"
65,HelpFormatter.java,setDescPadding,void setDescPadding(int padding),192,194,5665,5665,AssignmentMutator,this.defaultDescPad=padding,^,2,0.0066132173,this.defaultDescPad <mask>= padding,"void setDescPadding(int padding)
    {
        this.defaultDescPad<mask>= padding;
    }"
66,HelpFormatter.java,setDescPadding,void setDescPadding(int padding),192,194,5665,5665,AssignmentMutator,this.defaultDescPad=padding,>>>,3,0.004621602,this.defaultDescPad <mask>= padding,"void setDescPadding(int padding)
    {
        this.defaultDescPad<mask>= padding;
    }"
67,HelpFormatter.java,setDescPadding,void setDescPadding(int padding),192,194,5665,5665,AssignmentMutator,this.defaultDescPad=padding,&,4,0.0038086371,this.defaultDescPad <mask>= padding,"void setDescPadding(int padding)
    {
        this.defaultDescPad<mask>= padding;
    }"
68,HelpFormatter.java,setDescPadding,void setDescPadding(int padding),192,194,5646,5664,IdentifierMutator-Variable,this.defaultDescPad,padding,0,0.98916,<mask>,"void setDescPadding(int padding)
    {<mask> = padding;
    }"
69,HelpFormatter.java,setDescPadding,void setDescPadding(int padding),192,194,5646,5664,IdentifierMutator-Variable,this.defaultDescPad,pad,1,0.0029073704,<mask>,"void setDescPadding(int padding)
    {<mask> = padding;
    }"
70,HelpFormatter.java,setDescPadding,void setDescPadding(int padding),192,194,5646,5664,IdentifierMutator-Variable,this.defaultDescPad,width,2,0.0016552055,<mask>,"void setDescPadding(int padding)
    {<mask> = padding;
    }"
71,HelpFormatter.java,setDescPadding,void setDescPadding(int padding),192,194,5646,5664,IdentifierMutator-Variable,this.defaultDescPad,padding,3,9.3265803E-4,<mask>,"void setDescPadding(int padding)
    {<mask> = padding;
    }"
72,HelpFormatter.java,setDescPadding,void setDescPadding(int padding),192,194,5646,5664,IdentifierMutator-Variable,this.defaultDescPad,height,4,3.6258512E-4,<mask>,"void setDescPadding(int padding)
    {<mask> = padding;
    }"
73,HelpFormatter.java,setDescPadding,void setDescPadding(int padding),192,194,5646,5649,IdentifierMutator-ThisAccess,this,super,1,0.0091264285,<mask>,"void setDescPadding(int padding)
    {<mask>.defaultDescPad = padding;
    }"
74,HelpFormatter.java,setDescPadding,void setDescPadding(int padding),192,194,5646,5649,IdentifierMutator-ThisAccess,this,config,2,0.007401028,<mask>,"void setDescPadding(int padding)
    {<mask>.defaultDescPad = padding;
    }"
75,HelpFormatter.java,setDescPadding,void setDescPadding(int padding),192,194,5646,5649,IdentifierMutator-ThisAccess,this,m,3,0.0067887544,<mask>,"void setDescPadding(int padding)
    {<mask>.defaultDescPad = padding;
    }"
76,HelpFormatter.java,setDescPadding,void setDescPadding(int padding),192,194,5651,5664,FieldReferenceMutator,defaultDescPad,padding,0,0.98630875,this.<mask>,"void setDescPadding(int padding)
    {
        this.<mask> = padding;
    }"
77,HelpFormatter.java,setDescPadding,void setDescPadding(int padding),192,194,5651,5664,FieldReferenceMutator,defaultDescPad,pad,1,0.006451533,this.<mask>,"void setDescPadding(int padding)
    {
        this.<mask> = padding;
    }"
78,HelpFormatter.java,setDescPadding,void setDescPadding(int padding),192,194,5651,5664,FieldReferenceMutator,defaultDescPad,width,2,0.0017650836,this.<mask>,"void setDescPadding(int padding)
    {
        this.<mask> = padding;
    }"
79,HelpFormatter.java,setDescPadding,void setDescPadding(int padding),192,194,5651,5664,FieldReferenceMutator,defaultDescPad,padding,3,0.0016579371,this.<mask>,"void setDescPadding(int padding)
    {
        this.<mask> = padding;
    }"
80,HelpFormatter.java,setDescPadding,void setDescPadding(int padding),192,194,5651,5664,FieldReferenceMutator,defaultDescPad,adding,4,0.0012676254,this.<mask>,"void setDescPadding(int padding)
    {
        this.<mask> = padding;
    }"
81,HelpFormatter.java,setDescPadding,void setDescPadding(int padding),192,194,5668,5674,IdentifierMutator-Variable,padding,pad,1,0.0017622986,<mask>,"void setDescPadding(int padding)
    {
        this.defaultDescPad =<mask>;
    }"
82,HelpFormatter.java,setDescPadding,void setDescPadding(int padding),192,194,5668,5674,IdentifierMutator-Variable,padding,0,2,1.5956815E-4,<mask>,"void setDescPadding(int padding)
    {
        this.defaultDescPad =<mask>;
    }"
83,HelpFormatter.java,setDescPadding,void setDescPadding(int padding),192,194,5668,5674,IdentifierMutator-Variable,padding,null,4,2.081035E-5,<mask>,"void setDescPadding(int padding)
    {
        this.defaultDescPad =<mask>;
    }"
84,HelpFormatter.java,getDescPadding,int getDescPadding(),202,204,5827,5840,IdentifierMutator-Variable,defaultDescPad,padding,0,0.645228,<mask>,"int getDescPadding()
    {
        return<mask>;
    }"
85,HelpFormatter.java,getDescPadding,int getDescPadding(),202,204,5827,5840,IdentifierMutator-Variable,defaultDescPad,0,1,0.14805017,<mask>,"int getDescPadding()
    {
        return<mask>;
    }"
86,HelpFormatter.java,getDescPadding,int getDescPadding(),202,204,5827,5840,IdentifierMutator-Variable,defaultDescPad,1,2,0.027323423,<mask>,"int getDescPadding()
    {
        return<mask>;
    }"
87,HelpFormatter.java,getDescPadding,int getDescPadding(),202,204,5827,5840,IdentifierMutator-Variable,defaultDescPad,pad,3,0.015822921,<mask>,"int getDescPadding()
    {
        return<mask>;
    }"
88,HelpFormatter.java,getDescPadding,int getDescPadding(),202,204,5827,5840,IdentifierMutator-Variable,defaultDescPad,width,4,0.007354911,<mask>,"int getDescPadding()
    {
        return<mask>;
    }"
89,HelpFormatter.java,getDescPadding,int getDescPadding(),202,204,5827,5840,FieldReferenceMutator,defaultDescPad,padding,0,0.645228,<mask>,"int getDescPadding()
    {
        return<mask>;
    }"
90,HelpFormatter.java,getDescPadding,int getDescPadding(),202,204,5827,5840,FieldReferenceMutator,defaultDescPad,0,1,0.14805017,<mask>,"int getDescPadding()
    {
        return<mask>;
    }"
91,HelpFormatter.java,getDescPadding,int getDescPadding(),202,204,5827,5840,FieldReferenceMutator,defaultDescPad,1,2,0.027323423,<mask>,"int getDescPadding()
    {
        return<mask>;
    }"
92,HelpFormatter.java,getDescPadding,int getDescPadding(),202,204,5827,5840,FieldReferenceMutator,defaultDescPad,pad,3,0.015822921,<mask>,"int getDescPadding()
    {
        return<mask>;
    }"
93,HelpFormatter.java,getDescPadding,int getDescPadding(),202,204,5827,5840,FieldReferenceMutator,defaultDescPad,width,4,0.007354911,<mask>,"int getDescPadding()
    {
        return<mask>;
    }"
94,HelpFormatter.java,setSyntaxPrefix,void setSyntaxPrefix(String prefix),212,214,6043,6043,AssignmentMutator,this.defaultSyntaxPrefix=prefix,es,0,0.3332265,this.defaultSyntaxPrefix <mask>= prefix,"void setSyntaxPrefix(String prefix)
    {
        this.defaultSyntaxPrefix<mask>= prefix;
    }"
95,HelpFormatter.java,setSyntaxPrefix,void setSyntaxPrefix(String prefix),212,214,6043,6043,AssignmentMutator,this.defaultSyntaxPrefix=prefix,|,1,0.10033337,this.defaultSyntaxPrefix <mask>= prefix,"void setSyntaxPrefix(String prefix)
    {
        this.defaultSyntaxPrefix<mask>= prefix;
    }"
96,HelpFormatter.java,setSyntaxPrefix,void setSyntaxPrefix(String prefix),212,214,6043,6043,AssignmentMutator,this.defaultSyntaxPrefix=prefix,[],2,0.05286693,this.defaultSyntaxPrefix <mask>= prefix,"void setSyntaxPrefix(String prefix)
    {
        this.defaultSyntaxPrefix<mask>= prefix;
    }"
97,HelpFormatter.java,setSyntaxPrefix,void setSyntaxPrefix(String prefix),212,214,6043,6043,AssignmentMutator,this.defaultSyntaxPrefix=prefix,_,3,0.051288392,this.defaultSyntaxPrefix <mask>= prefix,"void setSyntaxPrefix(String prefix)
    {
        this.defaultSyntaxPrefix<mask>= prefix;
    }"
98,HelpFormatter.java,setSyntaxPrefix,void setSyntaxPrefix(String prefix),212,214,6043,6043,AssignmentMutator,this.defaultSyntaxPrefix=prefix,,4,0.050478414,this.defaultSyntaxPrefix <mask>= prefix,"void setSyntaxPrefix(String prefix)
    {
        this.defaultSyntaxPrefix<mask>= prefix;
    }"
99,HelpFormatter.java,setSyntaxPrefix,void setSyntaxPrefix(String prefix),212,214,6019,6042,IdentifierMutator-Variable,this.defaultSyntaxPrefix,prefix,0,0.91657346,<mask>,"void setSyntaxPrefix(String prefix)
    {<mask> = prefix;
    }"
100,HelpFormatter.java,setSyntaxPrefix,void setSyntaxPrefix(String prefix),212,214,6019,6042,IdentifierMutator-Variable,this.defaultSyntaxPrefix,namespace,1,0.011574226,<mask>,"void setSyntaxPrefix(String prefix)
    {<mask> = prefix;
    }"
101,HelpFormatter.java,setSyntaxPrefix,void setSyntaxPrefix(String prefix),212,214,6019,6042,IdentifierMutator-Variable,this.defaultSyntaxPrefix,suffix,2,0.011349592,<mask>,"void setSyntaxPrefix(String prefix)
    {<mask> = prefix;
    }"
102,HelpFormatter.java,setSyntaxPrefix,void setSyntaxPrefix(String prefix),212,214,6019,6042,IdentifierMutator-Variable,this.defaultSyntaxPrefix,syntax,3,0.010767099,<mask>,"void setSyntaxPrefix(String prefix)
    {<mask> = prefix;
    }"
103,HelpFormatter.java,setSyntaxPrefix,void setSyntaxPrefix(String prefix),212,214,6019,6042,IdentifierMutator-Variable,this.defaultSyntaxPrefix,name,4,0.009105992,<mask>,"void setSyntaxPrefix(String prefix)
    {<mask> = prefix;
    }"
104,HelpFormatter.java,setSyntaxPrefix,void setSyntaxPrefix(String prefix),212,214,6019,6022,IdentifierMutator-ThisAccess,this,config,2,0.009159238,<mask>,"void setSyntaxPrefix(String prefix)
    {<mask>.defaultSyntaxPrefix = prefix;
    }"
105,HelpFormatter.java,setSyntaxPrefix,void setSyntaxPrefix(String prefix),212,214,6019,6022,IdentifierMutator-ThisAccess,this,super,3,0.006128713,<mask>,"void setSyntaxPrefix(String prefix)
    {<mask>.defaultSyntaxPrefix = prefix;
    }"
106,HelpFormatter.java,setSyntaxPrefix,void setSyntaxPrefix(String prefix),212,214,6019,6022,IdentifierMutator-ThisAccess,this,configuration,4,0.0027425746,<mask>,"void setSyntaxPrefix(String prefix)
    {<mask>.defaultSyntaxPrefix = prefix;
    }"
107,HelpFormatter.java,setSyntaxPrefix,void setSyntaxPrefix(String prefix),212,214,6024,6042,FieldReferenceMutator,defaultSyntaxPrefix,prefix,0,0.99248236,this.<mask>,"void setSyntaxPrefix(String prefix)
    {
        this.<mask> = prefix;
    }"
108,HelpFormatter.java,setSyntaxPrefix,void setSyntaxPrefix(String prefix),212,214,6024,6042,FieldReferenceMutator,defaultSyntaxPrefix,name,1,0.0015850575,this.<mask>,"void setSyntaxPrefix(String prefix)
    {
        this.<mask> = prefix;
    }"
109,HelpFormatter.java,setSyntaxPrefix,void setSyntaxPrefix(String prefix),212,214,6024,6042,FieldReferenceMutator,defaultSyntaxPrefix,prefix,2,0.001092208,this.<mask>,"void setSyntaxPrefix(String prefix)
    {
        this.<mask> = prefix;
    }"
110,HelpFormatter.java,setSyntaxPrefix,void setSyntaxPrefix(String prefix),212,214,6024,6042,FieldReferenceMutator,defaultSyntaxPrefix,ix,3,7.642072E-4,this.<mask>,"void setSyntaxPrefix(String prefix)
    {
        this.<mask> = prefix;
    }"
111,HelpFormatter.java,setSyntaxPrefix,void setSyntaxPrefix(String prefix),212,214,6024,6042,FieldReferenceMutator,defaultSyntaxPrefix,fix,4,4.4034142E-4,this.<mask>,"void setSyntaxPrefix(String prefix)
    {
        this.<mask> = prefix;
    }"
112,HelpFormatter.java,setSyntaxPrefix,void setSyntaxPrefix(String prefix),212,214,6046,6051,IdentifierMutator-Variable,prefix,null,1,4.8173405E-4,<mask>,"void setSyntaxPrefix(String prefix)
    {
        this.defaultSyntaxPrefix =<mask>;
    }"
113,HelpFormatter.java,setSyntaxPrefix,void setSyntaxPrefix(String prefix),212,214,6046,6051,IdentifierMutator-Variable,prefix,"""""",2,3.1192857E-4,<mask>,"void setSyntaxPrefix(String prefix)
    {
        this.defaultSyntaxPrefix =<mask>;
    }"
114,HelpFormatter.java,setSyntaxPrefix,void setSyntaxPrefix(String prefix),212,214,6046,6051,IdentifierMutator-Variable,prefix,name,4,5.220033E-5,<mask>,"void setSyntaxPrefix(String prefix)
    {
        this.defaultSyntaxPrefix =<mask>;
    }"
115,HelpFormatter.java,getSyntaxPrefix,String getSyntaxPrefix(),222,224,6210,6228,IdentifierMutator-Variable,defaultSyntaxPrefix,prefix,0,0.6125741,<mask>,"String getSyntaxPrefix()
    {
        return<mask>;
    }"
116,HelpFormatter.java,getSyntaxPrefix,String getSyntaxPrefix(),222,224,6210,6228,IdentifierMutator-Variable,defaultSyntaxPrefix,"""""",1,0.16600221,<mask>,"String getSyntaxPrefix()
    {
        return<mask>;
    }"
117,HelpFormatter.java,getSyntaxPrefix,String getSyntaxPrefix(),222,224,6210,6228,IdentifierMutator-Variable,defaultSyntaxPrefix,null,2,0.06788998,<mask>,"String getSyntaxPrefix()
    {
        return<mask>;
    }"
118,HelpFormatter.java,getSyntaxPrefix,String getSyntaxPrefix(),222,224,6210,6228,IdentifierMutator-Variable,defaultSyntaxPrefix,"''",3,0.022353327,<mask>,"String getSyntaxPrefix()
    {
        return<mask>;
    }"
119,HelpFormatter.java,getSyntaxPrefix,String getSyntaxPrefix(),222,224,6210,6228,IdentifierMutator-Variable,defaultSyntaxPrefix,suffix,4,0.010043469,<mask>,"String getSyntaxPrefix()
    {
        return<mask>;
    }"
120,HelpFormatter.java,getSyntaxPrefix,String getSyntaxPrefix(),222,224,6210,6228,FieldReferenceMutator,defaultSyntaxPrefix,prefix,0,0.6125741,<mask>,"String getSyntaxPrefix()
    {
        return<mask>;
    }"
121,HelpFormatter.java,getSyntaxPrefix,String getSyntaxPrefix(),222,224,6210,6228,FieldReferenceMutator,defaultSyntaxPrefix,"""""",1,0.16600221,<mask>,"String getSyntaxPrefix()
    {
        return<mask>;
    }"
122,HelpFormatter.java,getSyntaxPrefix,String getSyntaxPrefix(),222,224,6210,6228,FieldReferenceMutator,defaultSyntaxPrefix,null,2,0.06788998,<mask>,"String getSyntaxPrefix()
    {
        return<mask>;
    }"
123,HelpFormatter.java,getSyntaxPrefix,String getSyntaxPrefix(),222,224,6210,6228,FieldReferenceMutator,defaultSyntaxPrefix,"''",3,0.022353327,<mask>,"String getSyntaxPrefix()
    {
        return<mask>;
    }"
124,HelpFormatter.java,getSyntaxPrefix,String getSyntaxPrefix(),222,224,6210,6228,FieldReferenceMutator,defaultSyntaxPrefix,suffix,4,0.010043469,<mask>,"String getSyntaxPrefix()
    {
        return<mask>;
    }"
125,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6413,6413,AssignmentMutator,this.defaultNewLine=newline,|,0,0.6020859,this.defaultNewLine <mask>= newline,"void setNewLine(String newline)
    {
        this.defaultNewLine<mask>= newline;
    }"
126,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6413,6413,AssignmentMutator,this.defaultNewLine=newline,String,1,0.04977556,this.defaultNewLine <mask>= newline,"void setNewLine(String newline)
    {
        this.defaultNewLine<mask>= newline;
    }"
127,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6413,6413,AssignmentMutator,this.defaultNewLine=newline,,2,0.039037514,this.defaultNewLine <mask>= newline,"void setNewLine(String newline)
    {
        this.defaultNewLine<mask>= newline;
    }"
128,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6413,6413,AssignmentMutator,this.defaultNewLine=newline,Value,3,0.029221358,this.defaultNewLine <mask>= newline,"void setNewLine(String newline)
    {
        this.defaultNewLine<mask>= newline;
    }"
129,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6413,6413,AssignmentMutator,this.defaultNewLine=newline,,4,0.023182005,this.defaultNewLine <mask>= newline,"void setNewLine(String newline)
    {
        this.defaultNewLine<mask>= newline;
    }"
130,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6394,6412,IdentifierMutator-Variable,this.defaultNewLine,line,0,0.5029524,<mask>,"void setNewLine(String newline)
    {<mask> = newline;
    }"
131,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6394,6412,IdentifierMutator-Variable,this.defaultNewLine,indent,1,0.03565424,<mask>,"void setNewLine(String newline)
    {<mask> = newline;
    }"
132,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6394,6412,IdentifierMutator-Variable,this.defaultNewLine,text,2,0.029701868,<mask>,"void setNewLine(String newline)
    {<mask> = newline;
    }"
133,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6394,6412,IdentifierMutator-Variable,this.defaultNewLine,line,3,0.019522982,<mask>,"void setNewLine(String newline)
    {<mask> = newline;
    }"
134,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6394,6412,IdentifierMutator-Variable,this.defaultNewLine,Line,4,0.015766377,<mask>,"void setNewLine(String newline)
    {<mask> = newline;
    }"
135,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6394,6397,IdentifierMutator-ThisAccess,this,super,1,0.026399111,<mask>,"void setNewLine(String newline)
    {<mask>.defaultNewLine = newline;
    }"
136,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6394,6397,IdentifierMutator-ThisAccess,this,m,2,0.012446437,<mask>,"void setNewLine(String newline)
    {<mask>.defaultNewLine = newline;
    }"
137,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6394,6397,IdentifierMutator-ThisAccess,this,config,3,0.007944537,<mask>,"void setNewLine(String newline)
    {<mask>.defaultNewLine = newline;
    }"
138,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6399,6412,FieldReferenceMutator,defaultNewLine,line,0,0.67322284,this.<mask>,"void setNewLine(String newline)
    {
        this.<mask> = newline;
    }"
139,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6399,6412,FieldReferenceMutator,defaultNewLine,break,1,0.02878888,this.<mask>,"void setNewLine(String newline)
    {
        this.<mask> = newline;
    }"
140,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6399,6412,FieldReferenceMutator,defaultNewLine,name,2,0.019057743,this.<mask>,"void setNewLine(String newline)
    {
        this.<mask> = newline;
    }"
141,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6399,6412,FieldReferenceMutator,defaultNewLine,nl,3,0.012179033,this.<mask>,"void setNewLine(String newline)
    {
        this.<mask> = newline;
    }"
142,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6399,6412,FieldReferenceMutator,defaultNewLine,next,4,0.011882947,this.<mask>,"void setNewLine(String newline)
    {
        this.<mask> = newline;
    }"
143,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6416,6422,IdentifierMutator-Variable,newline,line,0,0.26924655,<mask>,"void setNewLine(String newline)
    {
        this.defaultNewLine =<mask>;
    }"
144,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6416,6422,IdentifierMutator-Variable,newline,null,1,0.17409247,<mask>,"void setNewLine(String newline)
    {
        this.defaultNewLine =<mask>;
    }"
145,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6416,6422,IdentifierMutator-Variable,newline,new,2,0.10491838,<mask>,"void setNewLine(String newline)
    {
        this.defaultNewLine =<mask>;
    }"
146,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6416,6422,IdentifierMutator-Variable,newline,"""""",3,0.07851986,<mask>,"void setNewLine(String newline)
    {
        this.defaultNewLine =<mask>;
    }"
147,HelpFormatter.java,setNewLine,void setNewLine(String newline),232,234,6416,6422,IdentifierMutator-Variable,newline,true,4,0.07813389,<mask>,"void setNewLine(String newline)
    {
        this.defaultNewLine =<mask>;
    }"
148,HelpFormatter.java,getNewLine,String getNewLine(),242,244,6566,6579,IdentifierMutator-Variable,defaultNewLine,null,0,0.18305865,<mask>,"String getNewLine()
    {
        return<mask>;
    }"
149,HelpFormatter.java,getNewLine,String getNewLine(),242,244,6566,6579,IdentifierMutator-Variable,defaultNewLine,"""""",1,0.16061944,<mask>,"String getNewLine()
    {
        return<mask>;
    }"
150,HelpFormatter.java,getNewLine,String getNewLine(),242,244,6566,6579,IdentifierMutator-Variable,defaultNewLine,line,2,0.14516446,<mask>,"String getNewLine()
    {
        return<mask>;
    }"
151,HelpFormatter.java,getNewLine,String getNewLine(),242,244,6566,6579,IdentifierMutator-Variable,defaultNewLine,true,3,0.067418635,<mask>,"String getNewLine()
    {
        return<mask>;
    }"
152,HelpFormatter.java,getNewLine,String getNewLine(),242,244,6566,6579,IdentifierMutator-Variable,defaultNewLine,false,4,0.0550141,<mask>,"String getNewLine()
    {
        return<mask>;
    }"
153,HelpFormatter.java,getNewLine,String getNewLine(),242,244,6566,6579,FieldReferenceMutator,defaultNewLine,null,0,0.18305865,<mask>,"String getNewLine()
    {
        return<mask>;
    }"
154,HelpFormatter.java,getNewLine,String getNewLine(),242,244,6566,6579,FieldReferenceMutator,defaultNewLine,"""""",1,0.16061944,<mask>,"String getNewLine()
    {
        return<mask>;
    }"
155,HelpFormatter.java,getNewLine,String getNewLine(),242,244,6566,6579,FieldReferenceMutator,defaultNewLine,line,2,0.14516446,<mask>,"String getNewLine()
    {
        return<mask>;
    }"
156,HelpFormatter.java,getNewLine,String getNewLine(),242,244,6566,6579,FieldReferenceMutator,defaultNewLine,true,3,0.067418635,<mask>,"String getNewLine()
    {
        return<mask>;
    }"
157,HelpFormatter.java,getNewLine,String getNewLine(),242,244,6566,6579,FieldReferenceMutator,defaultNewLine,false,4,0.0550141,<mask>,"String getNewLine()
    {
        return<mask>;
    }"
158,HelpFormatter.java,setOptPrefix,void setOptPrefix(String prefix),252,254,6770,6770,AssignmentMutator,this.defaultOptPrefix=prefix,|,0,0.49683443,this.defaultOptPrefix <mask>= prefix,"void setOptPrefix(String prefix)
    {
        this.defaultOptPrefix<mask>= prefix;
    }"
159,HelpFormatter.java,setOptPrefix,void setOptPrefix(String prefix),252,254,6770,6770,AssignmentMutator,this.defaultOptPrefix=prefix,es,1,0.08626873,this.defaultOptPrefix <mask>= prefix,"void setOptPrefix(String prefix)
    {
        this.defaultOptPrefix<mask>= prefix;
    }"
160,HelpFormatter.java,setOptPrefix,void setOptPrefix(String prefix),252,254,6770,6770,AssignmentMutator,this.defaultOptPrefix=prefix,[],2,0.035530273,this.defaultOptPrefix <mask>= prefix,"void setOptPrefix(String prefix)
    {
        this.defaultOptPrefix<mask>= prefix;
    }"
161,HelpFormatter.java,setOptPrefix,void setOptPrefix(String prefix),252,254,6770,6770,AssignmentMutator,this.defaultOptPrefix=prefix,,3,0.030135378,this.defaultOptPrefix <mask>= prefix,"void setOptPrefix(String prefix)
    {
        this.defaultOptPrefix<mask>= prefix;
    }"
162,HelpFormatter.java,setOptPrefix,void setOptPrefix(String prefix),252,254,6770,6770,AssignmentMutator,this.defaultOptPrefix=prefix,_,4,0.027705517,this.defaultOptPrefix <mask>= prefix,"void setOptPrefix(String prefix)
    {
        this.defaultOptPrefix<mask>= prefix;
    }"
163,HelpFormatter.java,setOptPrefix,void setOptPrefix(String prefix),252,254,6749,6769,IdentifierMutator-Variable,this.defaultOptPrefix,prefix,0,0.9504726,<mask>,"void setOptPrefix(String prefix)
    {<mask> = prefix;
    }"
164,HelpFormatter.java,setOptPrefix,void setOptPrefix(String prefix),252,254,6749,6769,IdentifierMutator-Variable,this.defaultOptPrefix,suffix,1,0.01014839,<mask>,"void setOptPrefix(String prefix)
    {<mask> = prefix;
    }"
165,HelpFormatter.java,setOptPrefix,void setOptPrefix(String prefix),252,254,6749,6769,IdentifierMutator-Variable,this.defaultOptPrefix,name,2,0.00534011,<mask>,"void setOptPrefix(String prefix)
    {<mask> = prefix;
    }"
166,HelpFormatter.java,setOptPrefix,void setOptPrefix(String prefix),252,254,6749,6769,IdentifierMutator-Variable,this.defaultOptPrefix,option,3,0.0039858767,<mask>,"void setOptPrefix(String prefix)
    {<mask> = prefix;
    }"
167,HelpFormatter.java,setOptPrefix,void setOptPrefix(String prefix),252,254,6749,6769,IdentifierMutator-Variable,this.defaultOptPrefix,prefix,4,0.0026463182,<mask>,"void setOptPrefix(String prefix)
    {<mask> = prefix;
    }"
168,HelpFormatter.java,setOptPrefix,void setOptPrefix(String prefix),252,254,6749,6752,IdentifierMutator-ThisAccess,this,config,2,0.008966185,<mask>,"void setOptPrefix(String prefix)
    {<mask>.defaultOptPrefix = prefix;
    }"
169,HelpFormatter.java,setOptPrefix,void setOptPrefix(String prefix),252,254,6749,6752,IdentifierMutator-ThisAccess,this,options,3,0.008016079,<mask>,"void setOptPrefix(String prefix)
    {<mask>.defaultOptPrefix = prefix;
    }"
170,HelpFormatter.java,setOptPrefix,void setOptPrefix(String prefix),252,254,6749,6752,IdentifierMutator-ThisAccess,this,m,4,0.0044272793,<mask>,"void setOptPrefix(String prefix)
    {<mask>.defaultOptPrefix = prefix;
    }"
171,HelpFormatter.java,setOptPrefix,void setOptPrefix(String prefix),252,254,6754,6769,FieldReferenceMutator,defaultOptPrefix,prefix,0,0.9959728,this.<mask>,"void setOptPrefix(String prefix)
    {
        this.<mask> = prefix;
    }"
172,HelpFormatter.java,setOptPrefix,void setOptPrefix(String prefix),252,254,6754,6769,FieldReferenceMutator,defaultOptPrefix,prefix,1,6.903393E-4,this.<mask>,"void setOptPrefix(String prefix)
    {
        this.<mask> = prefix;
    }"
173,HelpFormatter.java,setOptPrefix,void setOptPrefix(String prefix),252,254,6754,6769,FieldReferenceMutator,defaultOptPrefix,name,2,6.7738607E-4,this.<mask>,"void setOptPrefix(String prefix)
    {
        this.<mask> = prefix;
    }"
174,HelpFormatter.java,setOptPrefix,void setOptPrefix(String prefix),252,254,6754,6769,FieldReferenceMutator,defaultOptPrefix,fix,3,2.524919E-4,this.<mask>,"void setOptPrefix(String prefix)
    {
        this.<mask> = prefix;
    }"
175,HelpFormatter.java,setOptPrefix,void setOptPrefix(String prefix),252,254,6754,6769,FieldReferenceMutator,defaultOptPrefix,ix,4,2.2764475E-4,this.<mask>,"void setOptPrefix(String prefix)
    {
        this.<mask> = prefix;
    }"
176,HelpFormatter.java,setOptPrefix,void setOptPrefix(String prefix),252,254,6773,6778,IdentifierMutator-Variable,prefix,null,1,8.107309E-4,<mask>,"void setOptPrefix(String prefix)
    {
        this.defaultOptPrefix =<mask>;
    }"
177,HelpFormatter.java,setOptPrefix,void setOptPrefix(String prefix),252,254,6773,6778,IdentifierMutator-Variable,prefix,"""""",2,5.6659814E-4,<mask>,"void setOptPrefix(String prefix)
    {
        this.defaultOptPrefix =<mask>;
    }"
178,HelpFormatter.java,setOptPrefix,void setOptPrefix(String prefix),252,254,6773,6778,IdentifierMutator-Variable,prefix,name,4,1.0576541E-4,<mask>,"void setOptPrefix(String prefix)
    {
        this.defaultOptPrefix =<mask>;
    }"
179,HelpFormatter.java,getOptPrefix,String getOptPrefix(),262,264,6928,6943,IdentifierMutator-Variable,defaultOptPrefix,prefix,0,0.7807587,<mask>,"String getOptPrefix()
    {
        return<mask>;
    }"
180,HelpFormatter.java,getOptPrefix,String getOptPrefix(),262,264,6928,6943,IdentifierMutator-Variable,defaultOptPrefix,"""""",1,0.08524953,<mask>,"String getOptPrefix()
    {
        return<mask>;
    }"
181,HelpFormatter.java,getOptPrefix,String getOptPrefix(),262,264,6928,6943,IdentifierMutator-Variable,defaultOptPrefix,null,2,0.03183383,<mask>,"String getOptPrefix()
    {
        return<mask>;
    }"
182,HelpFormatter.java,getOptPrefix,String getOptPrefix(),262,264,6928,6943,IdentifierMutator-Variable,defaultOptPrefix,"''",3,0.013527519,<mask>,"String getOptPrefix()
    {
        return<mask>;
    }"
183,HelpFormatter.java,getOptPrefix,String getOptPrefix(),262,264,6928,6943,IdentifierMutator-Variable,defaultOptPrefix,suffix,4,0.008105106,<mask>,"String getOptPrefix()
    {
        return<mask>;
    }"
184,HelpFormatter.java,getOptPrefix,String getOptPrefix(),262,264,6928,6943,FieldReferenceMutator,defaultOptPrefix,prefix,0,0.7807587,<mask>,"String getOptPrefix()
    {
        return<mask>;
    }"
185,HelpFormatter.java,getOptPrefix,String getOptPrefix(),262,264,6928,6943,FieldReferenceMutator,defaultOptPrefix,"""""",1,0.08524953,<mask>,"String getOptPrefix()
    {
        return<mask>;
    }"
186,HelpFormatter.java,getOptPrefix,String getOptPrefix(),262,264,6928,6943,FieldReferenceMutator,defaultOptPrefix,null,2,0.03183383,<mask>,"String getOptPrefix()
    {
        return<mask>;
    }"
187,HelpFormatter.java,getOptPrefix,String getOptPrefix(),262,264,6928,6943,FieldReferenceMutator,defaultOptPrefix,"''",3,0.013527519,<mask>,"String getOptPrefix()
    {
        return<mask>;
    }"
188,HelpFormatter.java,getOptPrefix,String getOptPrefix(),262,264,6928,6943,FieldReferenceMutator,defaultOptPrefix,suffix,4,0.008105106,<mask>,"String getOptPrefix()
    {
        return<mask>;
    }"
189,HelpFormatter.java,setLongOptPrefix,void setLongOptPrefix(String prefix),272,274,7150,7150,AssignmentMutator,this.defaultLongOptPrefix=prefix,|,0,0.18192525,this.defaultLongOptPrefix <mask>= prefix,"void setLongOptPrefix(String prefix)
    {
        this.defaultLongOptPrefix<mask>= prefix;
    }"
190,HelpFormatter.java,setLongOptPrefix,void setLongOptPrefix(String prefix),272,274,7150,7150,AssignmentMutator,this.defaultLongOptPrefix=prefix,es,1,0.13914348,this.defaultLongOptPrefix <mask>= prefix,"void setLongOptPrefix(String prefix)
    {
        this.defaultLongOptPrefix<mask>= prefix;
    }"
191,HelpFormatter.java,setLongOptPrefix,void setLongOptPrefix(String prefix),272,274,7150,7150,AssignmentMutator,this.defaultLongOptPrefix=prefix,_,2,0.107456245,this.defaultLongOptPrefix <mask>= prefix,"void setLongOptPrefix(String prefix)
    {
        this.defaultLongOptPrefix<mask>= prefix;
    }"
192,HelpFormatter.java,setLongOptPrefix,void setLongOptPrefix(String prefix),272,274,7150,7150,AssignmentMutator,this.defaultLongOptPrefix=prefix,,3,0.050074935,this.defaultLongOptPrefix <mask>= prefix,"void setLongOptPrefix(String prefix)
    {
        this.defaultLongOptPrefix<mask>= prefix;
    }"
193,HelpFormatter.java,setLongOptPrefix,void setLongOptPrefix(String prefix),272,274,7150,7150,AssignmentMutator,this.defaultLongOptPrefix=prefix,,4,0.049779728,this.defaultLongOptPrefix <mask>= prefix,"void setLongOptPrefix(String prefix)
    {
        this.defaultLongOptPrefix<mask>= prefix;
    }"
194,HelpFormatter.java,setLongOptPrefix,void setLongOptPrefix(String prefix),272,274,7125,7149,IdentifierMutator-Variable,this.defaultLongOptPrefix,prefix,0,0.8857237,<mask>,"void setLongOptPrefix(String prefix)
    {<mask> = prefix;
    }"
195,HelpFormatter.java,setLongOptPrefix,void setLongOptPrefix(String prefix),272,274,7125,7149,IdentifierMutator-Variable,this.defaultLongOptPrefix,suffix,1,0.05536845,<mask>,"void setLongOptPrefix(String prefix)
    {<mask> = prefix;
    }"
196,HelpFormatter.java,setLongOptPrefix,void setLongOptPrefix(String prefix),272,274,7125,7149,IdentifierMutator-Variable,this.defaultLongOptPrefix,name,2,0.0042972197,<mask>,"void setLongOptPrefix(String prefix)
    {<mask> = prefix;
    }"
197,HelpFormatter.java,setLongOptPrefix,void setLongOptPrefix(String prefix),272,274,7125,7149,IdentifierMutator-Variable,this.defaultLongOptPrefix,option,3,0.0018993423,<mask>,"void setLongOptPrefix(String prefix)
    {<mask> = prefix;
    }"
198,HelpFormatter.java,setLongOptPrefix,void setLongOptPrefix(String prefix),272,274,7125,7149,IdentifierMutator-Variable,this.defaultLongOptPrefix,max,4,0.001864966,<mask>,"void setLongOptPrefix(String prefix)
    {<mask> = prefix;
    }"
199,HelpFormatter.java,setLongOptPrefix,void setLongOptPrefix(String prefix),272,274,7125,7128,IdentifierMutator-ThisAccess,this,config,2,0.0075760134,<mask>,"void setLongOptPrefix(String prefix)
    {<mask>.defaultLongOptPrefix = prefix;
    }"
200,HelpFormatter.java,setLongOptPrefix,void setLongOptPrefix(String prefix),272,274,7125,7128,IdentifierMutator-ThisAccess,this,options,3,0.006426908,<mask>,"void setLongOptPrefix(String prefix)
    {<mask>.defaultLongOptPrefix = prefix;
    }"
201,HelpFormatter.java,setLongOptPrefix,void setLongOptPrefix(String prefix),272,274,7125,7128,IdentifierMutator-ThisAccess,this,m,4,0.0043766643,<mask>,"void setLongOptPrefix(String prefix)
    {<mask>.defaultLongOptPrefix = prefix;
    }"
202,HelpFormatter.java,setLongOptPrefix,void setLongOptPrefix(String prefix),272,274,7130,7149,FieldReferenceMutator,defaultLongOptPrefix,prefix,0,0.99429625,this.<mask>,"void setLongOptPrefix(String prefix)
    {
        this.<mask> = prefix;
    }"
203,HelpFormatter.java,setLongOptPrefix,void setLongOptPrefix(String prefix),272,274,7130,7149,FieldReferenceMutator,defaultLongOptPrefix,prefix,1,0.0012835031,this.<mask>,"void setLongOptPrefix(String prefix)
    {
        this.<mask> = prefix;
    }"
204,HelpFormatter.java,setLongOptPrefix,void setLongOptPrefix(String prefix),272,274,7130,7149,FieldReferenceMutator,defaultLongOptPrefix,ix,2,5.7508715E-4,this.<mask>,"void setLongOptPrefix(String prefix)
    {
        this.<mask> = prefix;
    }"
205,HelpFormatter.java,setLongOptPrefix,void setLongOptPrefix(String prefix),272,274,7130,7149,FieldReferenceMutator,defaultLongOptPrefix,name,3,4.4662476E-4,this.<mask>,"void setLongOptPrefix(String prefix)
    {
        this.<mask> = prefix;
    }"
206,HelpFormatter.java,setLongOptPrefix,void setLongOptPrefix(String prefix),272,274,7130,7149,FieldReferenceMutator,defaultLongOptPrefix,fix,4,3.0303345E-4,this.<mask>,"void setLongOptPrefix(String prefix)
    {
        this.<mask> = prefix;
    }"
207,HelpFormatter.java,setLongOptPrefix,void setLongOptPrefix(String prefix),272,274,7153,7158,IdentifierMutator-Variable,prefix,null,1,8.077388E-4,<mask>,"void setLongOptPrefix(String prefix)
    {
        this.defaultLongOptPrefix =<mask>;
    }"
208,HelpFormatter.java,setLongOptPrefix,void setLongOptPrefix(String prefix),272,274,7153,7158,IdentifierMutator-Variable,prefix,"""""",2,6.3164777E-4,<mask>,"void setLongOptPrefix(String prefix)
    {
        this.defaultLongOptPrefix =<mask>;
    }"
209,HelpFormatter.java,setLongOptPrefix,void setLongOptPrefix(String prefix),272,274,7153,7158,IdentifierMutator-Variable,prefix,"''",4,8.766688E-5,<mask>,"void setLongOptPrefix(String prefix)
    {
        this.defaultLongOptPrefix =<mask>;
    }"
210,HelpFormatter.java,getLongOptPrefix,String getLongOptPrefix(),282,284,7320,7339,IdentifierMutator-Variable,defaultLongOptPrefix,prefix,0,0.7124236,<mask>,"String getLongOptPrefix()
    {
        return<mask>;
    }"
211,HelpFormatter.java,getLongOptPrefix,String getLongOptPrefix(),282,284,7320,7339,IdentifierMutator-Variable,defaultLongOptPrefix,"""""",1,0.075769395,<mask>,"String getLongOptPrefix()
    {
        return<mask>;
    }"
212,HelpFormatter.java,getLongOptPrefix,String getLongOptPrefix(),282,284,7320,7339,IdentifierMutator-Variable,defaultLongOptPrefix,null,2,0.036556546,<mask>,"String getLongOptPrefix()
    {
        return<mask>;
    }"
213,HelpFormatter.java,getLongOptPrefix,String getLongOptPrefix(),282,284,7320,7339,IdentifierMutator-Variable,defaultLongOptPrefix,suffix,3,0.018697416,<mask>,"String getLongOptPrefix()
    {
        return<mask>;
    }"
214,HelpFormatter.java,getLongOptPrefix,String getLongOptPrefix(),282,284,7320,7339,IdentifierMutator-Variable,defaultLongOptPrefix,name,4,0.011763625,<mask>,"String getLongOptPrefix()
    {
        return<mask>;
    }"
215,HelpFormatter.java,getLongOptPrefix,String getLongOptPrefix(),282,284,7320,7339,FieldReferenceMutator,defaultLongOptPrefix,prefix,0,0.7124236,<mask>,"String getLongOptPrefix()
    {
        return<mask>;
    }"
216,HelpFormatter.java,getLongOptPrefix,String getLongOptPrefix(),282,284,7320,7339,FieldReferenceMutator,defaultLongOptPrefix,"""""",1,0.075769395,<mask>,"String getLongOptPrefix()
    {
        return<mask>;
    }"
217,HelpFormatter.java,getLongOptPrefix,String getLongOptPrefix(),282,284,7320,7339,FieldReferenceMutator,defaultLongOptPrefix,null,2,0.036556546,<mask>,"String getLongOptPrefix()
    {
        return<mask>;
    }"
218,HelpFormatter.java,getLongOptPrefix,String getLongOptPrefix(),282,284,7320,7339,FieldReferenceMutator,defaultLongOptPrefix,suffix,3,0.018697416,<mask>,"String getLongOptPrefix()
    {
        return<mask>;
    }"
219,HelpFormatter.java,getLongOptPrefix,String getLongOptPrefix(),282,284,7320,7339,FieldReferenceMutator,defaultLongOptPrefix,name,4,0.011763625,<mask>,"String getLongOptPrefix()
    {
        return<mask>;
    }"
220,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7732,7732,AssignmentMutator,this.longOptSeparator=longOptSeparator,|,0,0.9257818,this.longOptSeparator <mask>= longOptSeparator,"void setLongOptSeparator(String longOptSeparator)
    {
        this.longOptSeparator<mask>= longOptSeparator;
    }"
221,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7732,7732,AssignmentMutator,this.longOptSeparator=longOptSeparator,*,1,0.024536004,this.longOptSeparator <mask>= longOptSeparator,"void setLongOptSeparator(String longOptSeparator)
    {
        this.longOptSeparator<mask>= longOptSeparator;
    }"
222,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7732,7732,AssignmentMutator,this.longOptSeparator=longOptSeparator,^,2,0.01835903,this.longOptSeparator <mask>= longOptSeparator,"void setLongOptSeparator(String longOptSeparator)
    {
        this.longOptSeparator<mask>= longOptSeparator;
    }"
223,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7732,7732,AssignmentMutator,this.longOptSeparator=longOptSeparator,&,3,0.006378114,this.longOptSeparator <mask>= longOptSeparator,"void setLongOptSeparator(String longOptSeparator)
    {
        this.longOptSeparator<mask>= longOptSeparator;
    }"
224,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7732,7732,AssignmentMutator,this.longOptSeparator=longOptSeparator,,4,0.0040633734,this.longOptSeparator <mask>= longOptSeparator,"void setLongOptSeparator(String longOptSeparator)
    {
        this.longOptSeparator<mask>= longOptSeparator;
    }"
225,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7711,7731,IdentifierMutator-Variable,this.longOptSeparator,sep,0,0.39271683,<mask>,"void setLongOptSeparator(String longOptSeparator)
    {<mask> = longOptSeparator;
    }"
226,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7711,7731,IdentifierMutator-Variable,this.longOptSeparator,prefix,1,0.04772786,<mask>,"void setLongOptSeparator(String longOptSeparator)
    {<mask> = longOptSeparator;
    }"
227,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7711,7731,IdentifierMutator-Variable,this.longOptSeparator,string,2,0.036812674,<mask>,"void setLongOptSeparator(String longOptSeparator)
    {<mask> = longOptSeparator;
    }"
228,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7711,7731,IdentifierMutator-Variable,this.longOptSeparator,s,3,0.026226288,<mask>,"void setLongOptSeparator(String longOptSeparator)
    {<mask> = longOptSeparator;
    }"
229,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7711,7731,IdentifierMutator-Variable,this.longOptSeparator,suffix,4,0.023804367,<mask>,"void setLongOptSeparator(String longOptSeparator)
    {<mask> = longOptSeparator;
    }"
230,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7711,7714,IdentifierMutator-ThisAccess,this,config,2,0.0048225354,<mask>,"void setLongOptSeparator(String longOptSeparator)
    {<mask>.longOptSeparator = longOptSeparator;
    }"
231,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7711,7714,IdentifierMutator-ThisAccess,this,options,3,0.0022335413,<mask>,"void setLongOptSeparator(String longOptSeparator)
    {<mask>.longOptSeparator = longOptSeparator;
    }"
232,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7711,7714,IdentifierMutator-ThisAccess,this,m,4,0.0019512811,<mask>,"void setLongOptSeparator(String longOptSeparator)
    {<mask>.longOptSeparator = longOptSeparator;
    }"
233,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7716,7731,FieldReferenceMutator,longOptSeparator,long,0,0.18403456,this.<mask>,"void setLongOptSeparator(String longOptSeparator)
    {
        this.<mask> = longOptSeparator;
    }"
234,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7716,7731,FieldReferenceMutator,longOptSeparator,short,1,0.050196026,this.<mask>,"void setLongOptSeparator(String longOptSeparator)
    {
        this.<mask> = longOptSeparator;
    }"
235,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7716,7731,FieldReferenceMutator,longOptSeparator,value,2,0.042894173,this.<mask>,"void setLongOptSeparator(String longOptSeparator)
    {
        this.<mask> = longOptSeparator;
    }"
236,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7716,7731,FieldReferenceMutator,longOptSeparator,label,3,0.04045121,this.<mask>,"void setLongOptSeparator(String longOptSeparator)
    {
        this.<mask> = longOptSeparator;
    }"
237,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7716,7731,FieldReferenceMutator,longOptSeparator,string,4,0.040104352,this.<mask>,"void setLongOptSeparator(String longOptSeparator)
    {
        this.<mask> = longOptSeparator;
    }"
238,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7735,7750,IdentifierMutator-Variable,longOptSeparator,s,0,0.4612456,<mask>,"void setLongOptSeparator(String longOptSeparator)
    {
        this.longOptSeparator =<mask>;
    }"
239,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7735,7750,IdentifierMutator-Variable,longOptSeparator,v,1,0.1342529,<mask>,"void setLongOptSeparator(String longOptSeparator)
    {
        this.longOptSeparator =<mask>;
    }"
240,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7735,7750,IdentifierMutator-Variable,longOptSeparator,val,2,0.11271415,<mask>,"void setLongOptSeparator(String longOptSeparator)
    {
        this.longOptSeparator =<mask>;
    }"
241,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7735,7750,IdentifierMutator-Variable,longOptSeparator,value,3,0.0770477,<mask>,"void setLongOptSeparator(String longOptSeparator)
    {
        this.longOptSeparator =<mask>;
    }"
242,HelpFormatter.java,setLongOptSeparator,void setLongOptSeparator(String longOptSeparator),295,297,7735,7750,IdentifierMutator-Variable,longOptSeparator,null,4,0.020863088,<mask>,"void setLongOptSeparator(String longOptSeparator)
    {
        this.longOptSeparator =<mask>;
    }"
243,HelpFormatter.java,getLongOptSeparator,String getLongOptSeparator(),306,308,7968,7983,IdentifierMutator-Variable,longOptSeparator,null,0,0.2832953,<mask>,"String getLongOptSeparator()
    {
        return<mask>;
    }"
244,HelpFormatter.java,getLongOptSeparator,String getLongOptSeparator(),306,308,7968,7983,IdentifierMutator-Variable,longOptSeparator,"""""",1,0.15393056,<mask>,"String getLongOptSeparator()
    {
        return<mask>;
    }"
245,HelpFormatter.java,getLongOptSeparator,String getLongOptSeparator(),306,308,7968,7983,IdentifierMutator-Variable,longOptSeparator,s,2,0.07030009,<mask>,"String getLongOptSeparator()
    {
        return<mask>;
    }"
246,HelpFormatter.java,getLongOptSeparator,String getLongOptSeparator(),306,308,7968,7983,IdentifierMutator-Variable,longOptSeparator,sep,3,0.054798707,<mask>,"String getLongOptSeparator()
    {
        return<mask>;
    }"
247,HelpFormatter.java,getLongOptSeparator,String getLongOptSeparator(),306,308,7968,7983,IdentifierMutator-Variable,longOptSeparator,str,4,0.026532201,<mask>,"String getLongOptSeparator()
    {
        return<mask>;
    }"
248,HelpFormatter.java,getLongOptSeparator,String getLongOptSeparator(),306,308,7968,7983,FieldReferenceMutator,longOptSeparator,null,0,0.2832953,<mask>,"String getLongOptSeparator()
    {
        return<mask>;
    }"
249,HelpFormatter.java,getLongOptSeparator,String getLongOptSeparator(),306,308,7968,7983,FieldReferenceMutator,longOptSeparator,"""""",1,0.15393056,<mask>,"String getLongOptSeparator()
    {
        return<mask>;
    }"
250,HelpFormatter.java,getLongOptSeparator,String getLongOptSeparator(),306,308,7968,7983,FieldReferenceMutator,longOptSeparator,s,2,0.07030009,<mask>,"String getLongOptSeparator()
    {
        return<mask>;
    }"
251,HelpFormatter.java,getLongOptSeparator,String getLongOptSeparator(),306,308,7968,7983,FieldReferenceMutator,longOptSeparator,sep,3,0.054798707,<mask>,"String getLongOptSeparator()
    {
        return<mask>;
    }"
252,HelpFormatter.java,getLongOptSeparator,String getLongOptSeparator(),306,308,7968,7983,FieldReferenceMutator,longOptSeparator,str,4,0.026532201,<mask>,"String getLongOptSeparator()
    {
        return<mask>;
    }"
253,HelpFormatter.java,setArgName,void setArgName(String name),316,318,8162,8162,AssignmentMutator,this.defaultArgName=name,|,0,0.63016284,this.defaultArgName <mask>= name,"void setArgName(String name)
    {
        this.defaultArgName<mask>= name;
    }"
254,HelpFormatter.java,setArgName,void setArgName(String name),316,318,8162,8162,AssignmentMutator,this.defaultArgName=name,Name,1,0.051413782,this.defaultArgName <mask>= name,"void setArgName(String name)
    {
        this.defaultArgName<mask>= name;
    }"
255,HelpFormatter.java,setArgName,void setArgName(String name),316,318,8162,8162,AssignmentMutator,this.defaultArgName=name,,2,0.04710984,this.defaultArgName <mask>= name,"void setArgName(String name)
    {
        this.defaultArgName<mask>= name;
    }"
256,HelpFormatter.java,setArgName,void setArgName(String name),316,318,8162,8162,AssignmentMutator,this.defaultArgName=name,Value,3,0.037917666,this.defaultArgName <mask>= name,"void setArgName(String name)
    {
        this.defaultArgName<mask>= name;
    }"
257,HelpFormatter.java,setArgName,void setArgName(String name),316,318,8162,8162,AssignmentMutator,this.defaultArgName=name,,4,0.02798944,this.defaultArgName <mask>= name,"void setArgName(String name)
    {
        this.defaultArgName<mask>= name;
    }"
258,HelpFormatter.java,setArgName,void setArgName(String name),316,318,8143,8161,IdentifierMutator-Variable,this.defaultArgName,name,0,0.5045544,<mask>,"void setArgName(String name)
    {<mask> = name;
    }"
259,HelpFormatter.java,setArgName,void setArgName(String name),316,318,8143,8161,IdentifierMutator-Variable,this.defaultArgName,arg,1,0.3357014,<mask>,"void setArgName(String name)
    {<mask> = name;
    }"
260,HelpFormatter.java,setArgName,void setArgName(String name),316,318,8143,8161,IdentifierMutator-Variable,this.defaultArgName,argument,2,0.05140362,<mask>,"void setArgName(String name)
    {<mask> = name;
    }"
261,HelpFormatter.java,setArgName,void setArgName(String name),316,318,8143,8161,IdentifierMutator-Variable,this.defaultArgName,args,3,0.016918913,<mask>,"void setArgName(String name)
    {<mask> = name;
    }"
262,HelpFormatter.java,setArgName,void setArgName(String name),316,318,8143,8161,IdentifierMutator-Variable,this.defaultArgName,value,4,0.008351031,<mask>,"void setArgName(String name)
    {<mask> = name;
    }"
263,HelpFormatter.java,setArgName,void setArgName(String name),316,318,8143,8146,IdentifierMutator-ThisAccess,this,config,2,0.007957027,<mask>,"void setArgName(String name)
    {<mask>.defaultArgName = name;
    }"
264,HelpFormatter.java,setArgName,void setArgName(String name),316,318,8143,8146,IdentifierMutator-ThisAccess,this,super,3,0.00771351,<mask>,"void setArgName(String name)
    {<mask>.defaultArgName = name;
    }"
265,HelpFormatter.java,setArgName,void setArgName(String name),316,318,8143,8146,IdentifierMutator-ThisAccess,this,System,4,0.005201904,<mask>,"void setArgName(String name)
    {<mask>.defaultArgName = name;
    }"
266,HelpFormatter.java,setArgName,void setArgName(String name),316,318,8148,8161,FieldReferenceMutator,defaultArgName,name,0,0.94634515,this.<mask>,"void setArgName(String name)
    {
        this.<mask> = name;
    }"
267,HelpFormatter.java,setArgName,void setArgName(String name),316,318,8148,8161,FieldReferenceMutator,defaultArgName,arg,1,0.02638099,this.<mask>,"void setArgName(String name)
    {
        this.<mask> = name;
    }"
268,HelpFormatter.java,setArgName,void setArgName(String name),316,318,8148,8161,FieldReferenceMutator,defaultArgName,Name,2,0.0048943195,this.<mask>,"void setArgName(String name)
    {
        this.<mask> = name;
    }"
269,HelpFormatter.java,setArgName,void setArgName(String name),316,318,8148,8161,FieldReferenceMutator,defaultArgName,args,3,0.0035015873,this.<mask>,"void setArgName(String name)
    {
        this.<mask> = name;
    }"
270,HelpFormatter.java,setArgName,void setArgName(String name),316,318,8148,8161,FieldReferenceMutator,defaultArgName,argument,4,0.0032691152,this.<mask>,"void setArgName(String name)
    {
        this.<mask> = name;
    }"
271,HelpFormatter.java,setArgName,void setArgName(String name),316,318,8165,8168,IdentifierMutator-Variable,name,null,1,1.2690992E-4,<mask>,"void setArgName(String name)
    {
        this.defaultArgName =<mask>;
    }"
272,HelpFormatter.java,setArgName,void setArgName(String name),316,318,8165,8168,IdentifierMutator-Variable,name,true,2,3.524756E-5,<mask>,"void setArgName(String name)
    {
        this.defaultArgName =<mask>;
    }"
273,HelpFormatter.java,setArgName,void setArgName(String name),316,318,8165,8168,IdentifierMutator-Variable,name,default,4,2.3071361E-5,<mask>,"void setArgName(String name)
    {
        this.defaultArgName =<mask>;
    }"
274,HelpFormatter.java,getArgName,String getArgName(),326,328,8312,8325,IdentifierMutator-Variable,defaultArgName,arg,0,0.50090253,<mask>,"String getArgName()
    {
        return<mask>;
    }"
275,HelpFormatter.java,getArgName,String getArgName(),326,328,8312,8325,IdentifierMutator-Variable,defaultArgName,name,1,0.25005972,<mask>,"String getArgName()
    {
        return<mask>;
    }"
276,HelpFormatter.java,getArgName,String getArgName(),326,328,8312,8325,IdentifierMutator-Variable,defaultArgName,null,2,0.0736887,<mask>,"String getArgName()
    {
        return<mask>;
    }"
277,HelpFormatter.java,getArgName,String getArgName(),326,328,8312,8325,IdentifierMutator-Variable,defaultArgName,argument,3,0.013292818,<mask>,"String getArgName()
    {
        return<mask>;
    }"
278,HelpFormatter.java,getArgName,String getArgName(),326,328,8312,8325,IdentifierMutator-Variable,defaultArgName,"""""",4,0.01321289,<mask>,"String getArgName()
    {
        return<mask>;
    }"
279,HelpFormatter.java,getArgName,String getArgName(),326,328,8312,8325,FieldReferenceMutator,defaultArgName,arg,0,0.50090253,<mask>,"String getArgName()
    {
        return<mask>;
    }"
280,HelpFormatter.java,getArgName,String getArgName(),326,328,8312,8325,FieldReferenceMutator,defaultArgName,name,1,0.25005972,<mask>,"String getArgName()
    {
        return<mask>;
    }"
281,HelpFormatter.java,getArgName,String getArgName(),326,328,8312,8325,FieldReferenceMutator,defaultArgName,null,2,0.0736887,<mask>,"String getArgName()
    {
        return<mask>;
    }"
282,HelpFormatter.java,getArgName,String getArgName(),326,328,8312,8325,FieldReferenceMutator,defaultArgName,argument,3,0.013292818,<mask>,"String getArgName()
    {
        return<mask>;
    }"
283,HelpFormatter.java,getArgName,String getArgName(),326,328,8312,8325,FieldReferenceMutator,defaultArgName,"""""",4,0.01321289,<mask>,"String getArgName()
    {
        return<mask>;
    }"
284,HelpFormatter.java,getOptionComparator,Comparator getOptionComparator(),337,339,8588,8603,IdentifierMutator-Variable,optionComparator,null,0,0.38313538,<mask>,"Comparator getOptionComparator()
    {
        return<mask>;
    }"
285,HelpFormatter.java,getOptionComparator,Comparator getOptionComparator(),337,339,8588,8603,IdentifierMutator-Variable,optionComparator,this,1,0.043670867,<mask>,"Comparator getOptionComparator()
    {
        return<mask>;
    }"
286,HelpFormatter.java,getOptionComparator,Comparator getOptionComparator(),337,339,8588,8603,IdentifierMutator-Variable,optionComparator,c,2,0.03366979,<mask>,"Comparator getOptionComparator()
    {
        return<mask>;
    }"
287,HelpFormatter.java,getOptionComparator,Comparator getOptionComparator(),337,339,8588,8603,IdentifierMutator-Variable,optionComparator,result,3,0.025554162,<mask>,"Comparator getOptionComparator()
    {
        return<mask>;
    }"
288,HelpFormatter.java,getOptionComparator,Comparator getOptionComparator(),337,339,8588,8603,IdentifierMutator-Variable,optionComparator,true,4,0.024066795,<mask>,"Comparator getOptionComparator()
    {
        return<mask>;
    }"
289,HelpFormatter.java,getOptionComparator,Comparator getOptionComparator(),337,339,8588,8603,FieldReferenceMutator,optionComparator,null,0,0.38313538,<mask>,"Comparator getOptionComparator()
    {
        return<mask>;
    }"
290,HelpFormatter.java,getOptionComparator,Comparator getOptionComparator(),337,339,8588,8603,FieldReferenceMutator,optionComparator,this,1,0.043670867,<mask>,"Comparator getOptionComparator()
    {
        return<mask>;
    }"
291,HelpFormatter.java,getOptionComparator,Comparator getOptionComparator(),337,339,8588,8603,FieldReferenceMutator,optionComparator,c,2,0.03366979,<mask>,"Comparator getOptionComparator()
    {
        return<mask>;
    }"
292,HelpFormatter.java,getOptionComparator,Comparator getOptionComparator(),337,339,8588,8603,FieldReferenceMutator,optionComparator,result,3,0.025554162,<mask>,"Comparator getOptionComparator()
    {
        return<mask>;
    }"
293,HelpFormatter.java,getOptionComparator,Comparator getOptionComparator(),337,339,8588,8603,FieldReferenceMutator,optionComparator,true,4,0.024066795,<mask>,"Comparator getOptionComparator()
    {
        return<mask>;
    }"
294,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,350,8902,8905,BinaryOperatorMutator,==,!=,2,0.060195167,comparator <mask> null,"void setOptionComparator(Comparator comparator)
    {
        if (comparator<mask>null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
295,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,350,8902,8905,BinaryOperatorMutator,==,=,3,0.058411077,comparator <mask> null,"void setOptionComparator(Comparator comparator)
    {
        if (comparator<mask>null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
296,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,350,8902,8905,BinaryOperatorMutator,==,===,4,0.0016085926,comparator <mask> null,"void setOptionComparator(Comparator comparator)
    {
        if (comparator<mask>null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
297,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,350,8892,8901,IdentifierMutator-Variable,comparator,this,0,0.8656756,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (<mask> == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
298,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,350,8892,8901,IdentifierMutator-Variable,comparator,parent,1,0.010554705,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (<mask> == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
299,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,350,8892,8901,IdentifierMutator-Variable,comparator,sort,2,0.008353616,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (<mask> == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
300,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,350,8892,8901,IdentifierMutator-Variable,comparator,null,3,0.00597562,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (<mask> == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
301,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,350,8892,8901,IdentifierMutator-Variable,comparator,iterator,4,0.0045216517,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (<mask> == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
302,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,350,8906,8909,IdentifierMutator-Literal,null,this,1,0.012643251,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator ==<mask>)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
303,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,350,8906,8909,IdentifierMutator-Literal,null,NULL,3,1.2839487E-4,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator ==<mask>)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
304,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,350,8906,8909,IdentifierMutator-Literal,null,0,4,7.675931E-5,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator ==<mask>)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
305,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,352,8955,8955,AssignmentMutator,this.optionComparator=neworg.apache.commons.cli.HelpFormatter.OptionComparator(),|,0,0.554245,this.optionComparator <mask>= new org.apache.commons.cli.HelpFormatter.OptionComparator(),"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator<mask>= new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
306,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,352,8955,8955,AssignmentMutator,this.optionComparator=neworg.apache.commons.cli.HelpFormatter.OptionComparator(),,1,0.0876463,this.optionComparator <mask>= new org.apache.commons.cli.HelpFormatter.OptionComparator(),"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator<mask>= new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
307,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,352,8955,8955,AssignmentMutator,this.optionComparator=neworg.apache.commons.cli.HelpFormatter.OptionComparator(),,2,0.056424778,this.optionComparator <mask>= new org.apache.commons.cli.HelpFormatter.OptionComparator(),"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator<mask>= new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
308,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,352,8955,8955,AssignmentMutator,this.optionComparator=neworg.apache.commons.cli.HelpFormatter.OptionComparator(),=,3,0.029478725,this.optionComparator <mask>= new org.apache.commons.cli.HelpFormatter.OptionComparator(),"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator<mask>= new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
309,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,352,8955,8955,AssignmentMutator,this.optionComparator=neworg.apache.commons.cli.HelpFormatter.OptionComparator(),.,4,0.016737739,this.optionComparator <mask>= new org.apache.commons.cli.HelpFormatter.OptionComparator(),"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator<mask>= new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
310,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,352,8934,8954,IdentifierMutator-Variable,this.optionComparator,this,0,0.45915753,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {<mask> = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
311,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,352,8934,8954,IdentifierMutator-Variable,this.optionComparator,c,1,0.052359555,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {<mask> = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
312,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,352,8934,8954,IdentifierMutator-Variable,this.optionComparator,comp,2,0.045664158,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {<mask> = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
313,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,352,8934,8954,IdentifierMutator-Variable,this.optionComparator,sort,3,0.023690544,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {<mask> = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
314,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,352,8934,8954,IdentifierMutator-Variable,this.optionComparator,compar,4,0.016953165,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {<mask> = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
315,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,352,8934,8937,IdentifierMutator-ThisAccess,this,super,2,3.4011196E-4,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {<mask>.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
316,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,352,8934,8937,IdentifierMutator-ThisAccess,this,This,3,3.258115E-5,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {<mask>.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
317,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,352,8934,8937,IdentifierMutator-ThisAccess,this,config,4,3.0007148E-5,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {<mask>.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
318,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,352,8939,8954,FieldReferenceMutator,optionComparator,sort,0,0.33861515,this.<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.<mask> = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
319,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,352,8939,8954,FieldReferenceMutator,optionComparator,cmp,1,0.18822737,this.<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.<mask> = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
320,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,352,8939,8954,FieldReferenceMutator,optionComparator,option,2,0.074220896,this.<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.<mask> = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
321,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,352,8939,8954,FieldReferenceMutator,optionComparator,options,3,0.043896202,this.<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.<mask> = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
322,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,352,8939,8954,FieldReferenceMutator,optionComparator,parser,4,0.024003245,this.<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.<mask> = new OptionComparator();
        }
        else
        {
            this.optionComparator = comparator;
        }
    }"
323,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9048,9048,AssignmentMutator,this.optionComparator=comparator,|,0,0.93418944,this.optionComparator <mask>= comparator,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator<mask>= comparator;
        }
    }"
324,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9048,9048,AssignmentMutator,this.optionComparator=comparator,||,1,0.014776337,this.optionComparator <mask>= comparator,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator<mask>= comparator;
        }
    }"
325,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9048,9048,AssignmentMutator,this.optionComparator=comparator,&,2,0.014477138,this.optionComparator <mask>= comparator,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator<mask>= comparator;
        }
    }"
326,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9048,9048,AssignmentMutator,this.optionComparator=comparator,*,3,0.008079055,this.optionComparator <mask>= comparator,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator<mask>= comparator;
        }
    }"
327,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9048,9048,AssignmentMutator,this.optionComparator=comparator,!,4,0.007951085,this.optionComparator <mask>= comparator,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator<mask>= comparator;
        }
    }"
328,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9027,9047,IdentifierMutator-Variable,this.optionComparator,this,0,0.06922803,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {<mask> = comparator;
        }
    }"
329,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9027,9047,IdentifierMutator-Variable,this.optionComparator,sort,1,0.042721756,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {<mask> = comparator;
        }
    }"
330,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9027,9047,IdentifierMutator-Variable,this.optionComparator,super,2,0.037609205,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {<mask> = comparator;
        }
    }"
331,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9027,9047,IdentifierMutator-Variable,this.optionComparator,ordering,3,0.03157582,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {<mask> = comparator;
        }
    }"
332,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9027,9047,IdentifierMutator-Variable,this.optionComparator,operator,4,0.020523828,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {<mask> = comparator;
        }
    }"
333,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9027,9030,IdentifierMutator-ThisAccess,this,super,2,0.0015041017,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {<mask>.optionComparator = comparator;
        }
    }"
334,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9027,9030,IdentifierMutator-ThisAccess,this,builder,3,4.5797653E-5,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {<mask>.optionComparator = comparator;
        }
    }"
335,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9027,9030,IdentifierMutator-ThisAccess,this,This,4,4.513211E-5,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {<mask>.optionComparator = comparator;
        }
    }"
336,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9032,9047,FieldReferenceMutator,optionComparator,option,0,0.28750122,this.<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.<mask> = comparator;
        }
    }"
337,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9032,9047,FieldReferenceMutator,optionComparator,sort,1,0.17952392,this.<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.<mask> = comparator;
        }
    }"
338,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9032,9047,FieldReferenceMutator,optionComparator,cmp,2,0.117665514,this.<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.<mask> = comparator;
        }
    }"
339,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9032,9047,FieldReferenceMutator,optionComparator,default,3,0.030472923,this.<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.<mask> = comparator;
        }
    }"
340,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9032,9047,FieldReferenceMutator,optionComparator,options,4,0.022573255,this.<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.<mask> = comparator;
        }
    }"
341,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9051,9060,IdentifierMutator-Variable,comparator,null,0,0.8450685,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator =<mask>;
        }
    }"
342,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9051,9060,IdentifierMutator-Variable,comparator,comp,1,0.015901862,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator =<mask>;
        }
    }"
343,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9051,9060,IdentifierMutator-Variable,comparator,c,2,0.011820631,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator =<mask>;
        }
    }"
344,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9051,9060,IdentifierMutator-Variable,comparator,component,3,0.010843539,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator =<mask>;
        }
    }"
345,HelpFormatter.java,setOptionComparator,void setOptionComparator(Comparator comparator),348,356,9051,9060,IdentifierMutator-Variable,comparator,comparison,4,0.010659575,<mask>,"void setOptionComparator(Comparator comparator)
    {
        if (comparator == null)
        {
            this.optionComparator = new OptionComparator();
        }
        else
        {
            this.optionComparator =<mask>;
        }
    }"
346,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9438,9446,MethodCallMutator,printHelp,print,0,0.6803628,"<mask>(defaultWidth, cmdLineSyntax, null, options, null, false)","void printHelp(String cmdLineSyntax, Options options)
    {<mask>(defaultWidth, cmdLineSyntax, null, options, null, false);
    }"
347,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9438,9446,MethodCallMutator,printHelp,usage,1,0.06014505,"<mask>(defaultWidth, cmdLineSyntax, null, options, null, false)","void printHelp(String cmdLineSyntax, Options options)
    {<mask>(defaultWidth, cmdLineSyntax, null, options, null, false);
    }"
348,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9438,9446,MethodCallMutator,printHelp,help,2,0.034088578,"<mask>(defaultWidth, cmdLineSyntax, null, options, null, false)","void printHelp(String cmdLineSyntax, Options options)
    {<mask>(defaultWidth, cmdLineSyntax, null, options, null, false);
    }"
349,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9438,9446,MethodCallMutator,printHelp,println,3,0.033518694,"<mask>(defaultWidth, cmdLineSyntax, null, options, null, false)","void printHelp(String cmdLineSyntax, Options options)
    {<mask>(defaultWidth, cmdLineSyntax, null, options, null, false);
    }"
350,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9438,9446,MethodCallMutator,printHelp,show,4,0.018881312,"<mask>(defaultWidth, cmdLineSyntax, null, options, null, false)","void printHelp(String cmdLineSyntax, Options options)
    {<mask>(defaultWidth, cmdLineSyntax, null, options, null, false);
    }"
351,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9448,9459,IdentifierMutator-Variable,defaultWidth,null,0,0.17430483,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(<mask>, cmdLineSyntax, null, options, null, false);
    }"
352,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9448,9459,IdentifierMutator-Variable,defaultWidth,this,1,0.075916395,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(<mask>, cmdLineSyntax, null, options, null, false);
    }"
353,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9448,9459,IdentifierMutator-Variable,defaultWidth,command,2,0.04701482,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(<mask>, cmdLineSyntax, null, options, null, false);
    }"
354,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9448,9459,IdentifierMutator-Variable,defaultWidth,console,3,0.034314997,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(<mask>, cmdLineSyntax, null, options, null, false);
    }"
355,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9448,9459,IdentifierMutator-Variable,defaultWidth,cli,4,0.030224914,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(<mask>, cmdLineSyntax, null, options, null, false);
    }"
356,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9448,9459,FieldReferenceMutator,defaultWidth,null,0,0.17430483,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(<mask>, cmdLineSyntax, null, options, null, false);
    }"
357,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9448,9459,FieldReferenceMutator,defaultWidth,this,1,0.075916395,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(<mask>, cmdLineSyntax, null, options, null, false);
    }"
358,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9448,9459,FieldReferenceMutator,defaultWidth,command,2,0.04701482,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(<mask>, cmdLineSyntax, null, options, null, false);
    }"
359,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9448,9459,FieldReferenceMutator,defaultWidth,console,3,0.034314997,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(<mask>, cmdLineSyntax, null, options, null, false);
    }"
360,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9448,9459,FieldReferenceMutator,defaultWidth,cli,4,0.030224914,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(<mask>, cmdLineSyntax, null, options, null, false);
    }"
361,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9462,9474,IdentifierMutator-Variable,cmdLineSyntax,syntax,0,0.3308933,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(defaultWidth,<mask>, null, options, null, false);
    }"
362,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9462,9474,IdentifierMutator-Variable,cmdLineSyntax,null,1,0.21945824,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(defaultWidth,<mask>, null, options, null, false);
    }"
363,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9462,9474,IdentifierMutator-Variable,cmdLineSyntax,0,2,0.05627453,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(defaultWidth,<mask>, null, options, null, false);
    }"
364,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9462,9474,IdentifierMutator-Variable,cmdLineSyntax,true,3,0.05135678,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(defaultWidth,<mask>, null, options, null, false);
    }"
365,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9462,9474,IdentifierMutator-Variable,cmdLineSyntax,false,4,0.042520314,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(defaultWidth,<mask>, null, options, null, false);
    }"
366,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9477,9480,IdentifierMutator-Literal,null,true,1,0.11235844,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(defaultWidth, cmdLineSyntax,<mask>, options, null, false);
    }"
367,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9477,9480,IdentifierMutator-Literal,null,false,2,0.087034695,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(defaultWidth, cmdLineSyntax,<mask>, options, null, false);
    }"
368,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9477,9480,IdentifierMutator-Literal,null,"""""",3,0.070271224,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(defaultWidth, cmdLineSyntax,<mask>, options, null, false);
    }"
369,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9477,9480,IdentifierMutator-Literal,null,0,4,0.04658738,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(defaultWidth, cmdLineSyntax,<mask>, options, null, false);
    }"
370,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9483,9489,IdentifierMutator-Variable,options,null,1,0.22500189,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(defaultWidth, cmdLineSyntax, null,<mask>, null, false);
    }"
371,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9483,9489,IdentifierMutator-Variable,options,false,2,0.009418677,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(defaultWidth, cmdLineSyntax, null,<mask>, null, false);
    }"
372,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9483,9489,IdentifierMutator-Variable,options,0,3,0.008775681,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(defaultWidth, cmdLineSyntax, null,<mask>, null, false);
    }"
373,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9483,9489,IdentifierMutator-Variable,options,true,4,0.0046536983,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(defaultWidth, cmdLineSyntax, null,<mask>, null, false);
    }"
374,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9492,9495,IdentifierMutator-Literal,null,true,0,0.4389096,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(defaultWidth, cmdLineSyntax, null, options,<mask>, false);
    }"
375,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9492,9495,IdentifierMutator-Literal,null,false,1,0.3739653,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(defaultWidth, cmdLineSyntax, null, options,<mask>, false);
    }"
376,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9492,9495,IdentifierMutator-Literal,null,0,3,0.02241518,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(defaultWidth, cmdLineSyntax, null, options,<mask>, false);
    }"
377,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9492,9495,IdentifierMutator-Literal,null,"""""",4,0.012163351,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(defaultWidth, cmdLineSyntax, null, options,<mask>, false);
    }"
378,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9498,9502,IdentifierMutator-Literal,false,null,0,0.34631544,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(defaultWidth, cmdLineSyntax, null, options, null,<mask>);
    }"
379,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9498,9502,IdentifierMutator-Literal,false,true,2,0.23550358,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(defaultWidth, cmdLineSyntax, null, options, null,<mask>);
    }"
380,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9498,9502,IdentifierMutator-Literal,false,0,3,0.023618452,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(defaultWidth, cmdLineSyntax, null, options, null,<mask>);
    }"
381,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options)",368,370,9498,9502,IdentifierMutator-Literal,false,"""""",4,0.014266132,<mask>,"void printHelp(String cmdLineSyntax, Options options)
    {
        printHelp(defaultWidth, cmdLineSyntax, null, options, null,<mask>);
    }"
382,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,9982,9990,MethodCallMutator,printHelp,print,0,0.63371867,"<mask>(defaultWidth, cmdLineSyntax, null, options, null, autoUsage)","void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {<mask>(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);
    }"
383,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,9982,9990,MethodCallMutator,printHelp,usage,1,0.088451095,"<mask>(defaultWidth, cmdLineSyntax, null, options, null, autoUsage)","void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {<mask>(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);
    }"
384,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,9982,9990,MethodCallMutator,printHelp,help,2,0.044814743,"<mask>(defaultWidth, cmdLineSyntax, null, options, null, autoUsage)","void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {<mask>(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);
    }"
385,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,9982,9990,MethodCallMutator,printHelp,println,3,0.037817962,"<mask>(defaultWidth, cmdLineSyntax, null, options, null, autoUsage)","void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {<mask>(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);
    }"
386,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,9982,9990,MethodCallMutator,printHelp,format,4,0.019904772,"<mask>(defaultWidth, cmdLineSyntax, null, options, null, autoUsage)","void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {<mask>(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);
    }"
387,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,9992,10003,IdentifierMutator-Variable,defaultWidth,null,0,0.09070522,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(<mask>, cmdLineSyntax, null, options, null, autoUsage);
    }"
388,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,9992,10003,IdentifierMutator-Variable,defaultWidth,this,1,0.06587853,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(<mask>, cmdLineSyntax, null, options, null, autoUsage);
    }"
389,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,9992,10003,IdentifierMutator-Variable,defaultWidth,out,2,0.048698843,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(<mask>, cmdLineSyntax, null, options, null, autoUsage);
    }"
390,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,9992,10003,IdentifierMutator-Variable,defaultWidth,cli,3,0.036584876,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(<mask>, cmdLineSyntax, null, options, null, autoUsage);
    }"
391,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,9992,10003,IdentifierMutator-Variable,defaultWidth,doc,4,0.034831516,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(<mask>, cmdLineSyntax, null, options, null, autoUsage);
    }"
392,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,9992,10003,FieldReferenceMutator,defaultWidth,null,0,0.09070522,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(<mask>, cmdLineSyntax, null, options, null, autoUsage);
    }"
393,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,9992,10003,FieldReferenceMutator,defaultWidth,this,1,0.06587853,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(<mask>, cmdLineSyntax, null, options, null, autoUsage);
    }"
394,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,9992,10003,FieldReferenceMutator,defaultWidth,out,2,0.048698843,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(<mask>, cmdLineSyntax, null, options, null, autoUsage);
    }"
395,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,9992,10003,FieldReferenceMutator,defaultWidth,cli,3,0.036584876,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(<mask>, cmdLineSyntax, null, options, null, autoUsage);
    }"
396,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,9992,10003,FieldReferenceMutator,defaultWidth,doc,4,0.034831516,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(<mask>, cmdLineSyntax, null, options, null, autoUsage);
    }"
397,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10006,10018,IdentifierMutator-Variable,cmdLineSyntax,null,0,0.17394273,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth,<mask>, null, options, null, autoUsage);
    }"
398,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10006,10018,IdentifierMutator-Variable,cmdLineSyntax,syntax,1,0.12548774,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth,<mask>, null, options, null, autoUsage);
    }"
399,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10006,10018,IdentifierMutator-Variable,cmdLineSyntax,0,2,0.09114908,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth,<mask>, null, options, null, autoUsage);
    }"
400,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10006,10018,IdentifierMutator-Variable,cmdLineSyntax,true,3,0.051254146,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth,<mask>, null, options, null, autoUsage);
    }"
401,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10006,10018,IdentifierMutator-Variable,cmdLineSyntax,false,4,0.049812093,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth,<mask>, null, options, null, autoUsage);
    }"
402,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10021,10024,IdentifierMutator-Literal,null,"""""",1,0.12243775,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax,<mask>, options, null, autoUsage);
    }"
403,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10021,10024,IdentifierMutator-Literal,null,true,2,0.09724367,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax,<mask>, options, null, autoUsage);
    }"
404,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10021,10024,IdentifierMutator-Literal,null,false,3,0.06794875,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax,<mask>, options, null, autoUsage);
    }"
405,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10021,10024,IdentifierMutator-Literal,null,0,4,0.025442755,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax,<mask>, options, null, autoUsage);
    }"
406,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10027,10033,IdentifierMutator-Variable,options,null,1,0.0036844935,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, null,<mask>, null, autoUsage);
    }"
407,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10027,10033,IdentifierMutator-Variable,options,false,2,2.716113E-4,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, null,<mask>, null, autoUsage);
    }"
408,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10027,10033,IdentifierMutator-Variable,options,0,3,2.0087443E-4,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, null,<mask>, null, autoUsage);
    }"
409,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10027,10033,IdentifierMutator-Variable,options,nil,4,1.4715923E-4,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, null,<mask>, null, autoUsage);
    }"
410,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10036,10039,IdentifierMutator-Literal,null,true,0,0.4715432,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, null, options,<mask>, autoUsage);
    }"
411,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10036,10039,IdentifierMutator-Literal,null,false,1,0.39769274,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, null, options,<mask>, autoUsage);
    }"
412,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10036,10039,IdentifierMutator-Literal,null,0,3,0.01143859,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, null, options,<mask>, autoUsage);
    }"
413,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10036,10039,IdentifierMutator-Literal,null,"""""",4,0.009757918,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, null, options,<mask>, autoUsage);
    }"
414,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10042,10050,IdentifierMutator-Variable,autoUsage,false,0,0.43722844,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, null, options, null,<mask>);
    }"
415,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10042,10050,IdentifierMutator-Variable,autoUsage,true,1,0.3627116,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, null, options, null,<mask>);
    }"
416,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10042,10050,IdentifierMutator-Variable,autoUsage,null,2,0.062240284,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, null, options, null,<mask>);
    }"
417,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10042,10050,IdentifierMutator-Variable,autoUsage,auto,3,0.024379574,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, null, options, null,<mask>);
    }"
418,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)",383,385,10042,10050,IdentifierMutator-Variable,autoUsage,usage,4,0.018104563,<mask>,"void printHelp(String cmdLineSyntax, Options options, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, null, options, null,<mask>);
    }"
419,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10586,10594,MethodCallMutator,printHelp,print,0,0.3130188,"<mask>(cmdLineSyntax, header, options, footer, false)","void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {<mask>(cmdLineSyntax, header, options, footer, false);
    }"
420,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10586,10594,MethodCallMutator,printHelp,usage,1,0.3092275,"<mask>(cmdLineSyntax, header, options, footer, false)","void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {<mask>(cmdLineSyntax, header, options, footer, false);
    }"
421,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10586,10594,MethodCallMutator,printHelp,help,2,0.22018854,"<mask>(cmdLineSyntax, header, options, footer, false)","void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {<mask>(cmdLineSyntax, header, options, footer, false);
    }"
422,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10586,10594,MethodCallMutator,printHelp,show,3,0.012148277,"<mask>(cmdLineSyntax, header, options, footer, false)","void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {<mask>(cmdLineSyntax, header, options, footer, false);
    }"
423,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10586,10594,MethodCallMutator,printHelp,println,4,0.011712391,"<mask>(cmdLineSyntax, header, options, footer, false)","void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {<mask>(cmdLineSyntax, header, options, footer, false);
    }"
424,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10596,10608,IdentifierMutator-Variable,cmdLineSyntax,command,0,0.09972078,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(<mask>, header, options, footer, false);
    }"
425,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10596,10608,IdentifierMutator-Variable,cmdLineSyntax,doc,1,0.07891874,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(<mask>, header, options, footer, false);
    }"
426,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10596,10608,IdentifierMutator-Variable,cmdLineSyntax,parser,2,0.05681117,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(<mask>, header, options, footer, false);
    }"
427,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10596,10608,IdentifierMutator-Variable,cmdLineSyntax,cli,3,0.050076332,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(<mask>, header, options, footer, false);
    }"
428,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10596,10608,IdentifierMutator-Variable,cmdLineSyntax,document,4,0.036640856,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(<mask>, header, options, footer, false);
    }"
429,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10611,10616,IdentifierMutator-Variable,header,title,1,1.7927213E-4,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(cmdLineSyntax,<mask>, options, footer, false);
    }"
430,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10611,10616,IdentifierMutator-Variable,header,head,2,5.6194305E-5,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(cmdLineSyntax,<mask>, options, footer, false);
    }"
431,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10611,10616,IdentifierMutator-Variable,header,null,3,3.08877E-5,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(cmdLineSyntax,<mask>, options, footer, false);
    }"
432,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10611,10616,IdentifierMutator-Variable,header,"""""",4,2.9383218E-5,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(cmdLineSyntax,<mask>, options, footer, false);
    }"
433,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10619,10625,IdentifierMutator-Variable,options,Options,1,7.777793E-6,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(cmdLineSyntax, header,<mask>, footer, false);
    }"
434,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10619,10625,IdentifierMutator-Variable,options,null,2,4.847189E-6,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(cmdLineSyntax, header,<mask>, footer, false);
    }"
435,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10619,10625,IdentifierMutator-Variable,options,defaults,3,4.4227445E-6,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(cmdLineSyntax, header,<mask>, footer, false);
    }"
436,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10619,10625,IdentifierMutator-Variable,options,nil,4,2.719587E-6,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(cmdLineSyntax, header,<mask>, footer, false);
    }"
437,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10628,10633,IdentifierMutator-Variable,footer,false,0,0.31240177,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(cmdLineSyntax, header, options,<mask>, false);
    }"
438,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10628,10633,IdentifierMutator-Variable,footer,null,1,0.19511029,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(cmdLineSyntax, header, options,<mask>, false);
    }"
439,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10628,10633,IdentifierMutator-Variable,footer,true,2,0.13783884,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(cmdLineSyntax, header, options,<mask>, false);
    }"
440,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10628,10633,IdentifierMutator-Variable,footer,"""""",3,0.12344028,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(cmdLineSyntax, header, options,<mask>, false);
    }"
441,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10628,10633,IdentifierMutator-Variable,footer,0,4,0.03817978,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(cmdLineSyntax, header, options,<mask>, false);
    }"
442,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10636,10640,IdentifierMutator-Literal,false,true,0,0.4343401,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(cmdLineSyntax, header, options, footer,<mask>);
    }"
443,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10636,10640,IdentifierMutator-Literal,false,null,2,0.090673156,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(cmdLineSyntax, header, options, footer,<mask>);
    }"
444,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10636,10640,IdentifierMutator-Literal,false,0,3,0.012791898,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(cmdLineSyntax, header, options, footer,<mask>);
    }"
445,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)",398,400,10636,10640,IdentifierMutator-Literal,false,this,4,0.00842984,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(cmdLineSyntax, header, options, footer,<mask>);
    }"
446,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11287,11295,MethodCallMutator,printHelp,print,0,0.5517331,"<mask>(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage)","void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {<mask>(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
    }"
447,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11287,11295,MethodCallMutator,printHelp,usage,1,0.11028275,"<mask>(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage)","void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {<mask>(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
    }"
448,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11287,11295,MethodCallMutator,printHelp,help,2,0.06319172,"<mask>(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage)","void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {<mask>(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
    }"
449,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11287,11295,MethodCallMutator,printHelp,println,3,0.039188202,"<mask>(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage)","void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {<mask>(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
    }"
450,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11287,11295,MethodCallMutator,printHelp,format,4,0.017752657,"<mask>(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage)","void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {<mask>(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
    }"
451,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11297,11308,IdentifierMutator-Variable,defaultWidth,this,0,0.10616138,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(<mask>, cmdLineSyntax, header, options, footer, autoUsage);
    }"
452,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11297,11308,IdentifierMutator-Variable,defaultWidth,null,1,0.09535777,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(<mask>, cmdLineSyntax, header, options, footer, autoUsage);
    }"
453,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11297,11308,IdentifierMutator-Variable,defaultWidth,console,2,0.04802665,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(<mask>, cmdLineSyntax, header, options, footer, autoUsage);
    }"
454,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11297,11308,IdentifierMutator-Variable,defaultWidth,cli,3,0.047983844,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(<mask>, cmdLineSyntax, header, options, footer, autoUsage);
    }"
455,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11297,11308,IdentifierMutator-Variable,defaultWidth,doc,4,0.030204473,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(<mask>, cmdLineSyntax, header, options, footer, autoUsage);
    }"
456,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11297,11308,FieldReferenceMutator,defaultWidth,this,0,0.10616138,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(<mask>, cmdLineSyntax, header, options, footer, autoUsage);
    }"
457,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11297,11308,FieldReferenceMutator,defaultWidth,null,1,0.09535777,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(<mask>, cmdLineSyntax, header, options, footer, autoUsage);
    }"
458,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11297,11308,FieldReferenceMutator,defaultWidth,console,2,0.04802665,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(<mask>, cmdLineSyntax, header, options, footer, autoUsage);
    }"
459,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11297,11308,FieldReferenceMutator,defaultWidth,cli,3,0.047983844,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(<mask>, cmdLineSyntax, header, options, footer, autoUsage);
    }"
460,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11297,11308,FieldReferenceMutator,defaultWidth,doc,4,0.030204473,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(<mask>, cmdLineSyntax, header, options, footer, autoUsage);
    }"
461,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11311,11323,IdentifierMutator-Variable,cmdLineSyntax,syntax,0,0.83808374,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth,<mask>, header, options, footer, autoUsage);
    }"
462,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11311,11323,IdentifierMutator-Variable,cmdLineSyntax,ntax,1,0.024385963,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth,<mask>, header, options, footer, autoUsage);
    }"
463,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11311,11323,IdentifierMutator-Variable,cmdLineSyntax,grammar,2,0.011615417,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth,<mask>, header, options, footer, autoUsage);
    }"
464,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11311,11323,IdentifierMutator-Variable,cmdLineSyntax,0,3,0.006275742,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth,<mask>, header, options, footer, autoUsage);
    }"
465,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11311,11323,IdentifierMutator-Variable,cmdLineSyntax,1,4,0.0033216453,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth,<mask>, header, options, footer, autoUsage);
    }"
466,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11326,11331,IdentifierMutator-Variable,header,title,1,5.889517E-5,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax,<mask>, options, footer, autoUsage);
    }"
467,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11326,11331,IdentifierMutator-Variable,header,head,2,3.369439E-5,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax,<mask>, options, footer, autoUsage);
    }"
468,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11326,11331,IdentifierMutator-Variable,header,headers,4,5.086985E-6,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax,<mask>, options, footer, autoUsage);
    }"
469,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11334,11340,IdentifierMutator-Variable,options,Options,1,6.562663E-6,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, header,<mask>, footer, autoUsage);
    }"
470,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11334,11340,IdentifierMutator-Variable,options,defaults,2,4.134912E-6,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, header,<mask>, footer, autoUsage);
    }"
471,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11334,11340,IdentifierMutator-Variable,options,null,3,3.1553022E-6,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, header,<mask>, footer, autoUsage);
    }"
472,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11334,11340,IdentifierMutator-Variable,options,args,4,1.9123972E-6,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, header,<mask>, footer, autoUsage);
    }"
473,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11343,11348,IdentifierMutator-Variable,footer,foot,0,0.1502572,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, header, options,<mask>, autoUsage);
    }"
474,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11343,11348,IdentifierMutator-Variable,footer,"""""",1,0.09999451,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, header, options,<mask>, autoUsage);
    }"
475,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11343,11348,IdentifierMutator-Variable,footer,null,2,0.09529648,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, header, options,<mask>, autoUsage);
    }"
476,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11343,11348,IdentifierMutator-Variable,footer,false,3,0.08908211,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, header, options,<mask>, autoUsage);
    }"
477,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11343,11348,IdentifierMutator-Variable,footer,banner,4,0.028436832,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, header, options,<mask>, autoUsage);
    }"
478,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11351,11359,IdentifierMutator-Variable,autoUsage,true,0,0.30114534,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, header, options, footer,<mask>);
    }"
479,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11351,11359,IdentifierMutator-Variable,autoUsage,false,1,0.29035228,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, header, options, footer,<mask>);
    }"
480,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11351,11359,IdentifierMutator-Variable,autoUsage,auto,2,0.13086703,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, header, options, footer,<mask>);
    }"
481,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11351,11359,IdentifierMutator-Variable,autoUsage,null,3,0.03516791,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, header, options, footer,<mask>);
    }"
482,HelpFormatter.java,printHelp,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)",415,417,11351,11359,IdentifierMutator-Variable,autoUsage,0,4,0.029960062,<mask>,"void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)
    {
        printHelp(defaultWidth, cmdLineSyntax, header, options, footer,<mask>);
    }"
483,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,11981,11989,MethodCallMutator,printHelp,print,0,0.6079502,"<mask>(width, cmdLineSyntax, header, options, footer, false)","void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {<mask>(width, cmdLineSyntax, header, options, footer, false);
    }"
484,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,11981,11989,MethodCallMutator,printHelp,help,1,0.10373165,"<mask>(width, cmdLineSyntax, header, options, footer, false)","void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {<mask>(width, cmdLineSyntax, header, options, footer, false);
    }"
485,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,11981,11989,MethodCallMutator,printHelp,usage,2,0.095433205,"<mask>(width, cmdLineSyntax, header, options, footer, false)","void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {<mask>(width, cmdLineSyntax, header, options, footer, false);
    }"
486,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,11981,11989,MethodCallMutator,printHelp,println,3,0.03639199,"<mask>(width, cmdLineSyntax, header, options, footer, false)","void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {<mask>(width, cmdLineSyntax, header, options, footer, false);
    }"
487,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,11981,11989,MethodCallMutator,printHelp,printf,4,0.015224003,"<mask>(width, cmdLineSyntax, header, options, footer, false)","void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {<mask>(width, cmdLineSyntax, header, options, footer, false);
    }"
488,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,11991,11995,IdentifierMutator-Variable,width,Width,1,4.175457E-4,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(<mask>, cmdLineSyntax, header, options, footer, false);
    }"
489,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,11991,11995,IdentifierMutator-Variable,width,w,3,7.4055024E-5,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(<mask>, cmdLineSyntax, header, options, footer, false);
    }"
490,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,11991,11995,IdentifierMutator-Variable,width,weight,4,4.54611E-5,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(<mask>, cmdLineSyntax, header, options, footer, false);
    }"
491,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,11998,12010,IdentifierMutator-Variable,cmdLineSyntax,syntax,0,0.94224054,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(width,<mask>, header, options, footer, false);
    }"
492,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,11998,12010,IdentifierMutator-Variable,cmdLineSyntax,grammar,1,0.0075363275,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(width,<mask>, header, options, footer, false);
    }"
493,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,11998,12010,IdentifierMutator-Variable,cmdLineSyntax,ntax,2,0.0070445347,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(width,<mask>, header, options, footer, false);
    }"
494,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,11998,12010,IdentifierMutator-Variable,cmdLineSyntax,regex,3,0.002229356,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(width,<mask>, header, options, footer, false);
    }"
495,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,11998,12010,IdentifierMutator-Variable,cmdLineSyntax,command,4,0.0018893628,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(width,<mask>, header, options, footer, false);
    }"
496,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,12013,12018,IdentifierMutator-Variable,header,title,1,2.5861187E-5,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(width, cmdLineSyntax,<mask>, options, footer, false);
    }"
497,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,12013,12018,IdentifierMutator-Variable,header,head,2,1.0264723E-5,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(width, cmdLineSyntax,<mask>, options, footer, false);
    }"
498,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,12013,12018,IdentifierMutator-Variable,header,"""""",4,1.9418321E-6,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(width, cmdLineSyntax,<mask>, options, footer, false);
    }"
499,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,12021,12027,IdentifierMutator-Variable,options,Options,1,1.1143987E-5,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(width, cmdLineSyntax, header,<mask>, footer, false);
    }"
500,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,12021,12027,IdentifierMutator-Variable,options,null,2,7.767066E-6,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(width, cmdLineSyntax, header,<mask>, footer, false);
    }"
501,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,12021,12027,IdentifierMutator-Variable,options,defaults,3,7.0161823E-6,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(width, cmdLineSyntax, header,<mask>, footer, false);
    }"
502,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,12021,12027,IdentifierMutator-Variable,options,args,4,4.0259856E-6,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(width, cmdLineSyntax, header,<mask>, footer, false);
    }"
503,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,12030,12035,IdentifierMutator-Variable,footer,false,0,0.2703698,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(width, cmdLineSyntax, header, options,<mask>, false);
    }"
504,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,12030,12035,IdentifierMutator-Variable,footer,null,1,0.20820259,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(width, cmdLineSyntax, header, options,<mask>, false);
    }"
505,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,12030,12035,IdentifierMutator-Variable,footer,"""""",2,0.1801759,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(width, cmdLineSyntax, header, options,<mask>, false);
    }"
506,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,12030,12035,IdentifierMutator-Variable,footer,true,3,0.12648796,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(width, cmdLineSyntax, header, options,<mask>, false);
    }"
507,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,12030,12035,IdentifierMutator-Variable,footer,0,4,0.03434522,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(width, cmdLineSyntax, header, options,<mask>, false);
    }"
508,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,12038,12042,IdentifierMutator-Literal,false,true,0,0.42136878,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(width, cmdLineSyntax, header, options, footer,<mask>);
    }"
509,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,12038,12042,IdentifierMutator-Literal,false,null,2,0.10007212,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(width, cmdLineSyntax, header, options, footer,<mask>);
    }"
510,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,12038,12042,IdentifierMutator-Literal,false,0,3,0.011869614,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(width, cmdLineSyntax, header, options, footer,<mask>);
    }"
511,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)",431,433,12038,12042,IdentifierMutator-Literal,false,options,4,0.009209326,<mask>,"void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)
    {
        printHelp(width, cmdLineSyntax, header, options, footer,<mask>);
    }"
512,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,452,12833,12842,IdentifierMutator-Variable,java.lang.System.out,out,0,0.24458449,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(<mask>);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
513,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,452,12833,12842,IdentifierMutator-Variable,java.lang.System.out,output,1,0.19287467,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(<mask>);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
514,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,452,12833,12842,IdentifierMutator-Variable,java.lang.System.out,writer,2,0.122169316,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(<mask>);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
515,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,452,12833,12842,IdentifierMutator-Variable,java.lang.System.out,w,3,0.044002898,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(<mask>);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
516,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,452,12833,12842,IdentifierMutator-Variable,java.lang.System.out,file,4,0.03889231,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(<mask>);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
517,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,452,12840,12842,FieldReferenceMutator,out,err,1,0.22288887,java.lang.System.<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.<mask>);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
518,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,452,12840,12842,FieldReferenceMutator,out,in,2,0.0017307376,java.lang.System.<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.<mask>);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
519,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,452,12840,12842,FieldReferenceMutator,out,println,3,0.0015808761,java.lang.System.<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.<mask>);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
520,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,452,12840,12842,FieldReferenceMutator,out,output,4,0.0014460854,java.lang.System.<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.<mask>);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
521,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12855,12863,MethodCallMutator,printHelp,print,0,0.64859545,"<mask>(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage)","void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);<mask>(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
522,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12855,12863,MethodCallMutator,printHelp,println,1,0.03730007,"<mask>(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage)","void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);<mask>(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
523,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12855,12863,MethodCallMutator,printHelp,usage,2,0.036694482,"<mask>(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage)","void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);<mask>(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
524,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12855,12863,MethodCallMutator,printHelp,help,3,0.029637868,"<mask>(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage)","void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);<mask>(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
525,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12855,12863,MethodCallMutator,printHelp,print,4,0.02924334,"<mask>(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage)","void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);<mask>(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
526,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12865,12866,IdentifierMutator-Variable,pw,w,0,0.14432445,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(<mask>, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
527,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12865,12866,IdentifierMutator-Variable,pw,this,1,0.09186725,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(<mask>, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
528,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12865,12866,IdentifierMutator-Variable,pw,rw,2,0.028879732,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(<mask>, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
529,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12865,12866,IdentifierMutator-Variable,pw,out,3,0.026417527,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(<mask>, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
530,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12865,12866,IdentifierMutator-Variable,pw,writer,4,0.026333814,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(<mask>, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
531,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12869,12873,IdentifierMutator-Variable,width,height,1,2.470707E-4,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw,<mask>, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
532,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12869,12873,IdentifierMutator-Variable,width,Width,3,4.8264767E-5,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw,<mask>, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
533,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12869,12873,IdentifierMutator-Variable,width,true,4,4.713188E-5,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw,<mask>, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
534,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12876,12888,IdentifierMutator-Variable,cmdLineSyntax,syntax,0,0.98655033,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width,<mask>, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
535,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12876,12888,IdentifierMutator-Variable,cmdLineSyntax,ntax,1,0.0028921769,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width,<mask>, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
536,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12876,12888,IdentifierMutator-Variable,cmdLineSyntax,grammar,2,0.002232826,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width,<mask>, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
537,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12876,12888,IdentifierMutator-Variable,cmdLineSyntax,documentation,3,6.074625E-4,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width,<mask>, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
538,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12876,12888,IdentifierMutator-Variable,cmdLineSyntax,semantics,4,5.679603E-4,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width,<mask>, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
539,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12891,12896,IdentifierMutator-Variable,header,title,2,1.1962406E-5,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax,<mask>, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
540,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12891,12896,IdentifierMutator-Variable,header,head,3,1.1868408E-5,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax,<mask>, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
541,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12891,12896,IdentifierMutator-Variable,header,headers,4,1.0640923E-5,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax,<mask>, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
542,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12899,12905,IdentifierMutator-Variable,options,option,1,1.21404686E-4,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header,<mask>, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
543,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12899,12905,IdentifierMutator-Variable,options,null,2,6.640131E-5,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header,<mask>, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
544,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12899,12905,IdentifierMutator-Variable,options,false,3,3.011357E-5,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header,<mask>, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
545,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12899,12905,IdentifierMutator-Variable,options,0,4,2.896165E-5,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header,<mask>, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
546,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12908,12921,IdentifierMutator-Variable,defaultLeftPad,true,0,0.29005998,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options,<mask>, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
547,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12908,12921,IdentifierMutator-Variable,defaultLeftPad,false,1,0.18897618,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options,<mask>, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
548,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12908,12921,IdentifierMutator-Variable,defaultLeftPad,0,2,0.0556561,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options,<mask>, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
549,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12908,12921,IdentifierMutator-Variable,defaultLeftPad,null,3,0.04278956,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options,<mask>, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
550,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12908,12921,IdentifierMutator-Variable,defaultLeftPad,"""""",4,0.036061436,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options,<mask>, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
551,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12908,12921,FieldReferenceMutator,defaultLeftPad,true,0,0.29005998,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options,<mask>, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
552,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12908,12921,FieldReferenceMutator,defaultLeftPad,false,1,0.18897618,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options,<mask>, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
553,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12908,12921,FieldReferenceMutator,defaultLeftPad,0,2,0.0556561,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options,<mask>, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
554,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12908,12921,FieldReferenceMutator,defaultLeftPad,null,3,0.04278956,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options,<mask>, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
555,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12908,12921,FieldReferenceMutator,defaultLeftPad,"""""",4,0.036061436,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options,<mask>, defaultDescPad, footer, autoUsage);
        pw.flush();
    }"
556,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12924,12937,IdentifierMutator-Variable,defaultDescPad,options,0,0.8019498,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad,<mask>, footer, autoUsage);
        pw.flush();
    }"
557,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12924,12937,IdentifierMutator-Variable,defaultDescPad,header,1,0.034930952,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad,<mask>, footer, autoUsage);
        pw.flush();
    }"
558,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12924,12937,IdentifierMutator-Variable,defaultDescPad,"""""",2,0.01887405,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad,<mask>, footer, autoUsage);
        pw.flush();
    }"
559,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12924,12937,IdentifierMutator-Variable,defaultDescPad,true,3,0.011701274,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad,<mask>, footer, autoUsage);
        pw.flush();
    }"
560,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12924,12937,IdentifierMutator-Variable,defaultDescPad,option,4,0.011497735,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad,<mask>, footer, autoUsage);
        pw.flush();
    }"
561,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12924,12937,FieldReferenceMutator,defaultDescPad,options,0,0.8019498,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad,<mask>, footer, autoUsage);
        pw.flush();
    }"
562,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12924,12937,FieldReferenceMutator,defaultDescPad,header,1,0.034930952,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad,<mask>, footer, autoUsage);
        pw.flush();
    }"
563,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12924,12937,FieldReferenceMutator,defaultDescPad,"""""",2,0.01887405,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad,<mask>, footer, autoUsage);
        pw.flush();
    }"
564,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12924,12937,FieldReferenceMutator,defaultDescPad,true,3,0.011701274,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad,<mask>, footer, autoUsage);
        pw.flush();
    }"
565,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12924,12937,FieldReferenceMutator,defaultDescPad,option,4,0.011497735,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad,<mask>, footer, autoUsage);
        pw.flush();
    }"
566,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12940,12945,IdentifierMutator-Variable,footer,false,0,0.20567091,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad,<mask>, autoUsage);
        pw.flush();
    }"
567,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12940,12945,IdentifierMutator-Variable,footer,null,1,0.122397326,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad,<mask>, autoUsage);
        pw.flush();
    }"
568,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12940,12945,IdentifierMutator-Variable,footer,"""""",2,0.09185575,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad,<mask>, autoUsage);
        pw.flush();
    }"
569,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12940,12945,IdentifierMutator-Variable,footer,foot,3,0.05748515,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad,<mask>, autoUsage);
        pw.flush();
    }"
570,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12940,12945,IdentifierMutator-Variable,footer,0,4,0.05507533,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad,<mask>, autoUsage);
        pw.flush();
    }"
571,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12948,12956,IdentifierMutator-Variable,autoUsage,false,0,0.38210726,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer,<mask>);
        pw.flush();
    }"
572,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12948,12956,IdentifierMutator-Variable,autoUsage,true,1,0.29160872,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer,<mask>);
        pw.flush();
    }"
573,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12948,12956,IdentifierMutator-Variable,autoUsage,auto,2,0.07665942,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer,<mask>);
        pw.flush();
    }"
574,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12948,12956,IdentifierMutator-Variable,autoUsage,usage,3,0.041089058,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer,<mask>);
        pw.flush();
    }"
575,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,454,12948,12956,IdentifierMutator-Variable,autoUsage,null,4,0.034193434,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer,<mask>);
        pw.flush();
    }"
576,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,455,12971,12975,MethodCallMutator,flush,close,0,0.9237852,pw.<mask>(),"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.<mask>();
    }"
577,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,455,12971,12975,MethodCallMutator,flush,println,2,0.008870147,pw.<mask>(),"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.<mask>();
    }"
578,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,455,12971,12975,MethodCallMutator,flush,close,3,0.0019896326,pw.<mask>(),"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.<mask>();
    }"
579,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,455,12971,12975,MethodCallMutator,flush,exit,4,0.001780161,pw.<mask>(),"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
        pw.<mask>();
    }"
580,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,455,12968,12969,IdentifierMutator-Variable,pw,w,0,0.43332502,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);<mask>.flush();
    }"
581,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,455,12968,12969,IdentifierMutator-Variable,pw,w,1,0.3227725,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);<mask>.flush();
    }"
582,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,455,12968,12969,IdentifierMutator-Variable,pw,writer,2,0.05786434,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);<mask>.flush();
    }"
583,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,455,12968,12969,IdentifierMutator-Variable,pw,out,3,0.044360377,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);<mask>.flush();
    }"
584,HelpFormatter.java,printHelp,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)",449,455,12968,12969,IdentifierMutator-Variable,pw,tw,4,0.02591704,<mask>,"void printHelp(int width, String cmdLineSyntax, String header,
                          Options options, String footer, boolean autoUsage)
    {
        PrintWriter pw = new PrintWriter(System.out);

        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);<mask>.flush();
    }"
585,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,13974,13982,MethodCallMutator,printHelp,print,0,0.65148723,"<mask>(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false)","void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {<mask>(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);
    }"
586,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,13974,13982,MethodCallMutator,printHelp,println,1,0.096056804,"<mask>(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false)","void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {<mask>(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);
    }"
587,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,13974,13982,MethodCallMutator,printHelp,usage,2,0.051398195,"<mask>(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false)","void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {<mask>(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);
    }"
588,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,13974,13982,MethodCallMutator,printHelp,help,3,0.039824065,"<mask>(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false)","void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {<mask>(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);
    }"
589,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,13974,13982,MethodCallMutator,printHelp,format,4,0.015556469,"<mask>(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false)","void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {<mask>(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);
    }"
590,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,13984,13985,IdentifierMutator-Variable,pw,w,0,0.4408607,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(<mask>, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);
    }"
591,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,13984,13985,IdentifierMutator-Variable,pw,pt,1,0.1590036,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(<mask>, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);
    }"
592,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,13984,13985,IdentifierMutator-Variable,pw,p,2,0.09192143,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(<mask>, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);
    }"
593,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,13984,13985,IdentifierMutator-Variable,pw,wr,3,0.048035745,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(<mask>, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);
    }"
594,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,13984,13985,IdentifierMutator-Variable,pw,rw,4,0.046133887,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(<mask>, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);
    }"
595,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,13988,13992,IdentifierMutator-Variable,width,height,1,7.636001E-5,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw,<mask>, cmdLineSyntax, header, options, leftPad, descPad, footer, false);
    }"
596,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,13988,13992,IdentifierMutator-Variable,width,Width,3,3.7458805E-5,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw,<mask>, cmdLineSyntax, header, options, leftPad, descPad, footer, false);
    }"
597,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,13988,13992,IdentifierMutator-Variable,width,0,4,1.7111597E-5,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw,<mask>, cmdLineSyntax, header, options, leftPad, descPad, footer, false);
    }"
598,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,13995,14007,IdentifierMutator-Variable,cmdLineSyntax,syntax,0,0.9565424,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width,<mask>, header, options, leftPad, descPad, footer, false);
    }"
599,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,13995,14007,IdentifierMutator-Variable,cmdLineSyntax,regex,1,0.005402367,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width,<mask>, header, options, leftPad, descPad, footer, false);
    }"
600,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,13995,14007,IdentifierMutator-Variable,cmdLineSyntax,grammar,2,0.0040355073,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width,<mask>, header, options, leftPad, descPad, footer, false);
    }"
601,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,13995,14007,IdentifierMutator-Variable,cmdLineSyntax,ntax,3,0.0033253732,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width,<mask>, header, options, leftPad, descPad, footer, false);
    }"
602,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,13995,14007,IdentifierMutator-Variable,cmdLineSyntax,0,4,0.0030928561,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width,<mask>, header, options, leftPad, descPad, footer, false);
    }"
603,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14010,14015,IdentifierMutator-Variable,header,title,2,1.869066E-5,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax,<mask>, options, leftPad, descPad, footer, false);
    }"
604,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14010,14015,IdentifierMutator-Variable,header,head,3,1.2806113E-5,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax,<mask>, options, leftPad, descPad, footer, false);
    }"
605,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14010,14015,IdentifierMutator-Variable,header,null,4,4.6795017E-6,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax,<mask>, options, leftPad, descPad, footer, false);
    }"
606,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14018,14024,IdentifierMutator-Variable,options,Options,1,4.0258958E-5,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header,<mask>, leftPad, descPad, footer, false);
    }"
607,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14018,14024,IdentifierMutator-Variable,options,null,2,6.3812504E-6,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header,<mask>, leftPad, descPad, footer, false);
    }"
608,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14018,14024,IdentifierMutator-Variable,options,defaults,3,6.1341902E-6,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header,<mask>, leftPad, descPad, footer, false);
    }"
609,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14018,14024,IdentifierMutator-Variable,options,0,4,4.057806E-6,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header,<mask>, leftPad, descPad, footer, false);
    }"
610,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14027,14033,IdentifierMutator-Variable,leftPad,left,0,0.9847551,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header, options,<mask>, descPad, footer, false);
    }"
611,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14027,14033,IdentifierMutator-Variable,leftPad,true,1,0.0019665014,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header, options,<mask>, descPad, footer, false);
    }"
612,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14027,14033,IdentifierMutator-Variable,leftPad,right,2,0.0019156769,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header, options,<mask>, descPad, footer, false);
    }"
613,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14027,14033,IdentifierMutator-Variable,leftPad,0,3,0.0017334564,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header, options,<mask>, descPad, footer, false);
    }"
614,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14027,14033,IdentifierMutator-Variable,leftPad,false,4,0.0017251545,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header, options,<mask>, descPad, footer, false);
    }"
615,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14036,14042,IdentifierMutator-Variable,descPad,desc,0,0.82134295,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header, options, leftPad,<mask>, footer, false);
    }"
616,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14036,14042,IdentifierMutator-Variable,descPad,description,1,0.11912663,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header, options, leftPad,<mask>, footer, false);
    }"
617,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14036,14042,IdentifierMutator-Variable,descPad,true,2,0.010218921,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header, options, leftPad,<mask>, footer, false);
    }"
618,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14036,14042,IdentifierMutator-Variable,descPad,"""""",3,0.009872822,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header, options, leftPad,<mask>, footer, false);
    }"
619,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14036,14042,IdentifierMutator-Variable,descPad,false,4,0.005505413,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header, options, leftPad,<mask>, footer, false);
    }"
620,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14045,14050,IdentifierMutator-Variable,footer,null,0,0.29858312,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad,<mask>, false);
    }"
621,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14045,14050,IdentifierMutator-Variable,footer,false,1,0.16026877,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad,<mask>, false);
    }"
622,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14045,14050,IdentifierMutator-Variable,footer,"""""",2,0.12881458,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad,<mask>, false);
    }"
623,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14045,14050,IdentifierMutator-Variable,footer,0,3,0.07051419,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad,<mask>, false);
    }"
624,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14045,14050,IdentifierMutator-Variable,footer,true,4,0.050275885,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad,<mask>, false);
    }"
625,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14053,14057,IdentifierMutator-Literal,false,true,0,0.39712128,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer,<mask>);
    }"
626,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14053,14057,IdentifierMutator-Literal,false,null,2,0.085827336,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer,<mask>);
    }"
627,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14053,14057,IdentifierMutator-Literal,false,options,3,0.0437265,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer,<mask>);
    }"
628,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)",475,479,14053,14057,IdentifierMutator-Literal,false,0,4,0.0146881575,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax, 
                          String header, Options options, int leftPad, 
                          int descPad, String footer)
    {
        printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer,<mask>);
    }"
629,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15191,15194,BinaryOperatorMutator,||,|,2,0.007889407,(cmdLineSyntax == null) <mask> (cmdLineSyntax.length() == 0),"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null)<mask>(cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
630,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15191,15194,BinaryOperatorMutator,||,&&,3,0.004790249,(cmdLineSyntax == null) <mask> (cmdLineSyntax.length() == 0),"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null)<mask>(cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
631,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15191,15194,BinaryOperatorMutator,||,|,4,0.004298864,(cmdLineSyntax == null) <mask> (cmdLineSyntax.length() == 0),"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null)<mask>(cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
632,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15182,15185,BinaryOperatorMutator,==,=,2,0.04716449,cmdLineSyntax <mask> null,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax<mask>null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
633,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15182,15185,BinaryOperatorMutator,==,_,3,0.0018570438,cmdLineSyntax <mask> null,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax<mask>null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
634,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15182,15185,BinaryOperatorMutator,==,|,4,0.0011634458,cmdLineSyntax <mask> null,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax<mask>null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
635,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15169,15181,IdentifierMutator-Variable,cmdLineSyntax,options,0,0.6231565,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((<mask> == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
636,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15169,15181,IdentifierMutator-Variable,cmdLineSyntax,option,1,0.05943363,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((<mask> == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
637,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15169,15181,IdentifierMutator-Variable,cmdLineSyntax,name,2,0.017580632,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((<mask> == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
638,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15169,15181,IdentifierMutator-Variable,cmdLineSyntax,opt,3,0.017520344,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((<mask> == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
639,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15169,15181,IdentifierMutator-Variable,cmdLineSyntax,command,4,0.01621316,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((<mask> == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
640,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15186,15189,IdentifierMutator-Literal,null,NULL,1,3.252593E-4,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax ==<mask>) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
641,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15186,15189,IdentifierMutator-Literal,null,"""""",2,2.2057144E-4,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax ==<mask>) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
642,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15186,15189,IdentifierMutator-Literal,null,nil,4,3.1713782E-5,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax ==<mask>) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
643,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15218,15221,BinaryOperatorMutator,==,>,2,0.08881418,cmdLineSyntax.length() <mask> 0,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length()<mask>0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
644,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15218,15221,BinaryOperatorMutator,==,<,3,0.006255783,cmdLineSyntax.length() <mask> 0,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length()<mask>0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
645,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15218,15221,BinaryOperatorMutator,==,=,4,0.0061948593,cmdLineSyntax.length() <mask> 0,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length()<mask>0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
646,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15210,15215,MethodCallMutator,length,size,2,1.7765216E-5,cmdLineSyntax.<mask>(),"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.<mask>() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
647,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15210,15215,MethodCallMutator,length,len,3,1.2001188E-5,cmdLineSyntax.<mask>(),"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.<mask>() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
648,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15210,15215,MethodCallMutator,length,width,4,9.599586E-6,cmdLineSyntax.<mask>(),"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.<mask>() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
649,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15196,15208,IdentifierMutator-Variable,cmdLineSyntax,options,0,0.23807816,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (<mask>.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
650,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15196,15208,IdentifierMutator-Variable,cmdLineSyntax,header,1,0.064968,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (<mask>.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
651,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15196,15208,IdentifierMutator-Variable,cmdLineSyntax,string,2,0.038396906,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (<mask>.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
652,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15196,15208,IdentifierMutator-Variable,cmdLineSyntax,name,3,0.035697747,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (<mask>.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
653,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15196,15208,IdentifierMutator-Variable,cmdLineSyntax,params,4,0.031910237,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (<mask>.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
654,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15222,15222,IdentifierMutator-Literal,0,"""""",1,4.7653678E-4,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() ==<mask>))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
655,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15222,15222,IdentifierMutator-Literal,0,1,2,4.6038273E-4,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() ==<mask>))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
656,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15222,15222,IdentifierMutator-Literal,0,null,3,1.6547671E-4,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() ==<mask>))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
657,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,506,15222,15222,IdentifierMutator-Literal,0,zero,4,1.108784E-4,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() ==<mask>))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
658,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,508,15283,15310,IdentifierMutator-Literal,"""cmdLineSyntaxnotprovided""",reason,0,0.15522936,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(<mask>);
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
659,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,508,15283,15310,IdentifierMutator-Literal,"""cmdLineSyntaxnotprovided""",e,1,0.09034145,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(<mask>);
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
660,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,508,15283,15310,IdentifierMutator-Literal,"""cmdLineSyntaxnotprovided""",msg,2,0.087714374,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(<mask>);
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
661,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,508,15283,15310,IdentifierMutator-Literal,"""cmdLineSyntaxnotprovided""",expression,3,0.032548394,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(<mask>);
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
662,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,508,15283,15310,IdentifierMutator-Literal,"""cmdLineSyntaxnotprovided""",expr,4,0.029896554,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(<mask>);
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
663,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,511,15337,15345,IdentifierMutator-Variable,autoUsage,auto,0,0.7410697,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (<mask>)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
664,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,511,15337,15345,IdentifierMutator-Variable,autoUsage,usage,1,0.083926916,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (<mask>)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
665,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,511,15337,15345,IdentifierMutator-Variable,autoUsage,optional,2,0.02355858,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (<mask>)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
666,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,511,15337,15345,IdentifierMutator-Variable,autoUsage,command,3,0.018340232,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (<mask>)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
667,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,511,15337,15345,IdentifierMutator-Variable,autoUsage,cli,4,0.0126591595,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (<mask>)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
668,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15370,15379,MethodCallMutator,printUsage,usage,0,0.875405,"<mask>(pw, width, cmdLineSyntax, options)","void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {<mask>(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
669,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15370,15379,MethodCallMutator,printUsage,help,1,0.06432773,"<mask>(pw, width, cmdLineSyntax, options)","void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {<mask>(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
670,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15370,15379,MethodCallMutator,printUsage,Usage,2,0.017430356,"<mask>(pw, width, cmdLineSyntax, options)","void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {<mask>(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
671,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15370,15379,MethodCallMutator,printUsage,Usage,3,0.007884188,"<mask>(pw, width, cmdLineSyntax, options)","void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {<mask>(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
672,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15370,15379,MethodCallMutator,printUsage,usage,4,0.0042070863,"<mask>(pw, width, cmdLineSyntax, options)","void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {<mask>(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
673,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15381,15382,IdentifierMutator-Variable,pw,wp,0,0.44377905,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(<mask>, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
674,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15381,15382,IdentifierMutator-Variable,pw,iw,1,0.07758818,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(<mask>, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
675,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15381,15382,IdentifierMutator-Variable,pw,rw,2,0.060563844,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(<mask>, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
676,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15381,15382,IdentifierMutator-Variable,pw,p,3,0.05530359,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(<mask>, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
677,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15381,15382,IdentifierMutator-Variable,pw,w,4,0.052446842,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(<mask>, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
678,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15385,15389,IdentifierMutator-Variable,width,height,2,1.7638598E-4,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw,<mask>, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
679,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15385,15389,IdentifierMutator-Variable,width,Width,3,1.2976227E-4,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw,<mask>, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
680,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15385,15389,IdentifierMutator-Variable,width,Width,4,9.538341E-5,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw,<mask>, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
681,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15392,15404,IdentifierMutator-Variable,cmdLineSyntax,header,0,0.78614986,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width,<mask>, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
682,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15392,15404,IdentifierMutator-Variable,cmdLineSyntax,help,1,0.035883147,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width,<mask>, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
683,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15392,15404,IdentifierMutator-Variable,cmdLineSyntax,title,2,0.01834246,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width,<mask>, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
684,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15392,15404,IdentifierMutator-Variable,cmdLineSyntax,description,3,0.011107782,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width,<mask>, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
685,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15392,15404,IdentifierMutator-Variable,cmdLineSyntax,"""""",4,0.00971109,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width,<mask>, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
686,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15407,15413,IdentifierMutator-Variable,options,true,1,0.12154647,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax,<mask>);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
687,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15407,15413,IdentifierMutator-Variable,options,false,2,0.0883397,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax,<mask>);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
688,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15407,15413,IdentifierMutator-Variable,options,option,3,0.013773105,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax,<mask>);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
689,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,513,15407,15413,IdentifierMutator-Variable,options,null,4,0.013193083,<mask>,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax,<mask>);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
690,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,517,15462,15471,MethodCallMutator,printUsage,usage,0,0.5474122,"<mask>(pw, width, cmdLineSyntax)","void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {<mask>(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
691,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,517,15462,15471,MethodCallMutator,printUsage,help,1,0.13669522,"<mask>(pw, width, cmdLineSyntax)","void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {<mask>(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
692,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,517,15462,15471,MethodCallMutator,printUsage,print,2,0.093709975,"<mask>(pw, width, cmdLineSyntax)","void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {<mask>(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
693,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,517,15462,15471,MethodCallMutator,printUsage,format,3,0.026617607,"<mask>(pw, width, cmdLineSyntax)","void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {<mask>(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
694,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,517,15462,15471,MethodCallMutator,printUsage,println,4,0.014947437,"<mask>(pw, width, cmdLineSyntax)","void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {<mask>(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
695,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,517,15473,15474,IdentifierMutator-Variable,pw,wp,0,0.55768603,<mask>," pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(<mask>, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
696,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,517,15473,15474,IdentifierMutator-Variable,pw,bp,1,0.056254774,<mask>," pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(<mask>, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
697,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,517,15473,15474,IdentifierMutator-Variable,pw,iw,2,0.048646577,<mask>," pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(<mask>, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
698,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,517,15473,15474,IdentifierMutator-Variable,pw,wx,3,0.03866271,<mask>," pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(<mask>, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
699,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,517,15473,15474,IdentifierMutator-Variable,pw,rw,4,0.035675418,<mask>," pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(<mask>, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
700,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,517,15477,15481,IdentifierMutator-Variable,width,Width,2,0.0014367837,<mask>," int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw,<mask>, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
701,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,517,15477,15481,IdentifierMutator-Variable,width,Width,3,5.0598785E-4,<mask>," int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw,<mask>, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
702,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,517,15477,15481,IdentifierMutator-Variable,width,height,4,3.791811E-4,<mask>," int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw,<mask>, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
703,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,517,15484,15496,IdentifierMutator-Variable,cmdLineSyntax,usage,0,0.55527335,<mask>,", String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width,<mask>);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
704,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,517,15484,15496,IdentifierMutator-Variable,cmdLineSyntax,options,1,0.1436465,<mask>,", String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width,<mask>);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
705,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,517,15484,15496,IdentifierMutator-Variable,cmdLineSyntax,help,2,0.13277845,<mask>,", String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width,<mask>);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
706,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,517,15484,15496,IdentifierMutator-Variable,cmdLineSyntax,description,3,0.03999352,<mask>,", String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width,<mask>);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
707,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,517,15484,15496,IdentifierMutator-Variable,cmdLineSyntax,command,4,0.016499296,<mask>,", String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width,<mask>);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
708,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15539,15542,BinaryOperatorMutator,&&,&,2,1.1344849E-4,(header != null) <mask> (header.trim().length() > 0),"      String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null)<mask>(header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
709,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15539,15542,BinaryOperatorMutator,&&,AND,3,1.7780396E-5,(header != null) <mask> (header.trim().length() > 0),"      String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null)<mask>(header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
710,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15539,15542,BinaryOperatorMutator,&&,&,4,1.3372618E-5,(header != null) <mask> (header.trim().length() > 0),"      String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null)<mask>(header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
711,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15530,15533,BinaryOperatorMutator,!=,==,1,1.2540194E-5,header <mask> null,"         String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header<mask>null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
712,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15530,15533,BinaryOperatorMutator,!=,==,2,7.554973E-6,header <mask> null,"         String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header<mask>null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
713,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15530,15533,BinaryOperatorMutator,!=,=,3,2.3159448E-6,header <mask> null,"         String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header<mask>null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
714,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15530,15533,BinaryOperatorMutator,!=,(!,4,1.02909816E-7,header <mask> null,"         String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header<mask>null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
715,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15524,15529,IdentifierMutator-Variable,header,Header,1,4.4344135E-5,<mask>,"          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((<mask> != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
716,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15524,15529,IdentifierMutator-Variable,header,headers,2,1.3237015E-5,<mask>,"          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((<mask> != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
717,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15524,15529,IdentifierMutator-Variable,header,head,3,1.0360169E-5,<mask>,"          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((<mask> != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
718,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15534,15537,IdentifierMutator-Literal,null,nil,2,2.8650031E-6,<mask>,"        String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header !=<mask>) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
719,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15534,15537,IdentifierMutator-Literal,null,"""""",3,2.3159587E-6,<mask>,"        String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header !=<mask>) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
720,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15534,15537,IdentifierMutator-Literal,null,0,4,1.1687873E-6,<mask>,"        String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header !=<mask>) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
721,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15566,15568,BinaryOperatorMutator,>,==,2,0.0011169792,header.trim().length() <mask> 0," options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length()<mask>0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
722,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15566,15568,BinaryOperatorMutator,>,==,3,3.0760517E-4,header.trim().length() <mask> 0," options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length()<mask>0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
723,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15566,15568,BinaryOperatorMutator,>,!=,4,1.7438582E-4,header.trim().length() <mask> 0," options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length()<mask>0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
724,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15558,15563,MethodCallMutator,length,Length,2,3.5123546E-7,header.trim().<mask>(),", Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().<mask>() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
725,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15558,15563,MethodCallMutator,length,duration,3,6.508775E-8,header.trim().<mask>(),", Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().<mask>() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
726,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15558,15563,MethodCallMutator,length,count,4,5.525127E-8,header.trim().<mask>(),", Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().<mask>() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
727,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15551,15554,MethodCallMutator,trim,strip,0,0.8175054,header.<mask>(),"  String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.<mask>().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
728,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15551,15554,MethodCallMutator,trim,length,2,0.010482781,header.<mask>(),"  String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.<mask>().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
729,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15551,15554,MethodCallMutator,trim,split,3,0.0043863826,header.<mask>(),"  String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.<mask>().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
730,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15551,15554,MethodCallMutator,trim,remove,4,0.003418145,header.<mask>(),"  String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.<mask>().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
731,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15544,15549,IdentifierMutator-Variable,header,head,1,1.0965152E-4,<mask>,"    String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (<mask>.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
732,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15544,15549,IdentifierMutator-Variable,header,Header,2,2.4536144E-5,<mask>,"    String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (<mask>.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
733,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15544,15549,IdentifierMutator-Variable,header,heading,4,9.11494E-6,<mask>,"    String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (<mask>.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
734,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15569,15569,IdentifierMutator-Literal,0,1,2,1.1537066E-5,<mask>,", int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() ><mask>))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
735,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15569,15569,IdentifierMutator-Literal,0,empty,3,3.0611318E-6,<mask>,", int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() ><mask>))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
736,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,520,15569,15569,IdentifierMutator-Literal,0,"""""",4,2.2414908E-6,<mask>,", int leftPad,
                          int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() ><mask>))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
737,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,522,15595,15606,MethodCallMutator,printWrapped,print,0,0.5008152,"<mask>(pw, width, header)","                     int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {<mask>(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
738,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,522,15595,15606,MethodCallMutator,printWrapped,header,1,0.27748367,"<mask>(pw, width, header)","                     int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {<mask>(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
739,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,522,15595,15606,MethodCallMutator,printWrapped,wrap,2,0.03515205,"<mask>(pw, width, header)","                     int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {<mask>(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
740,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,522,15595,15606,MethodCallMutator,printWrapped,format,3,0.018282598,"<mask>(pw, width, header)","                     int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {<mask>(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
741,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,522,15595,15606,MethodCallMutator,printWrapped,println,4,0.017239586,"<mask>(pw, width, header)","                     int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {<mask>(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
742,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,522,15608,15609,IdentifierMutator-Variable,pw,wp,0,0.8525182,<mask>,"     int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(<mask>, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
743,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,522,15608,15609,IdentifierMutator-Variable,pw,rw,1,0.025991447,<mask>,"     int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(<mask>, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
744,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,522,15608,15609,IdentifierMutator-Variable,pw,wx,2,0.02012444,<mask>,"     int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(<mask>, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
745,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,522,15608,15609,IdentifierMutator-Variable,pw,bp,3,0.01412535,<mask>,"     int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(<mask>, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
746,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,522,15608,15609,IdentifierMutator-Variable,pw,p,4,0.009884414,<mask>,"     int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(<mask>, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
747,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,522,15612,15616,IdentifierMutator-Variable,width,height,2,2.9005506E-4,<mask>,"  int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw,<mask>, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
748,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,522,15612,15616,IdentifierMutator-Variable,width,Width,3,2.275709E-4,<mask>,"  int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw,<mask>, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
749,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,522,15612,15616,IdentifierMutator-Variable,width,Width,4,2.1389339E-4,<mask>,"  int descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw,<mask>, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
750,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,522,15619,15624,IdentifierMutator-Variable,header,headers,2,2.8926978E-4,<mask>," descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width,<mask>);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
751,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,522,15619,15624,IdentifierMutator-Variable,header,heading,3,1.6315043E-4,<mask>," descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width,<mask>);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
752,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,522,15619,15624,IdentifierMutator-Variable,header,title,4,4.8644888E-5,<mask>," descPad, String footer, boolean autoUsage)
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width,<mask>);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
753,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15647,15658,MethodCallMutator,printOptions,print,0,0.2920574,"<mask>(pw, width, options, leftPad, descPad)","
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }<mask>(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
754,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15647,15658,MethodCallMutator,printOptions,format,1,0.06360504,"<mask>(pw, width, options, leftPad, descPad)","
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }<mask>(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
755,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15647,15658,MethodCallMutator,printOptions,usage,2,0.053586766,"<mask>(pw, width, options, leftPad, descPad)","
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }<mask>(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
756,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15647,15658,MethodCallMutator,printOptions,wrap,3,0.049250998,"<mask>(pw, width, options, leftPad, descPad)","
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }<mask>(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
757,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15647,15658,MethodCallMutator,printOptions,options,4,0.02912937,"<mask>(pw, width, options, leftPad, descPad)","
    {
        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }<mask>(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
758,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15660,15661,IdentifierMutator-Variable,pw,wp,0,0.6808383,<mask>,"   if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(<mask>, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
759,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15660,15661,IdentifierMutator-Variable,pw,w,1,0.065858305,<mask>,"   if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(<mask>, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
760,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15660,15661,IdentifierMutator-Variable,pw,rw,2,0.037651688,<mask>,"   if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(<mask>, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
761,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15660,15661,IdentifierMutator-Variable,pw,fw,3,0.022101,<mask>,"   if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(<mask>, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
762,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15660,15661,IdentifierMutator-Variable,pw,p,4,0.019999864,<mask>,"   if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(<mask>, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
763,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15664,15668,IdentifierMutator-Variable,width,height,1,8.7953586E-4,<mask>," ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw,<mask>, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
764,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15664,15668,IdentifierMutator-Variable,width,Width,3,3.36707E-4,<mask>," ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw,<mask>, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
765,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15664,15668,IdentifierMutator-Variable,width,Width,4,2.0495967E-4,<mask>," ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw,<mask>, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
766,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15671,15677,IdentifierMutator-Variable,options,option,1,0.0075890385,<mask>,"LineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width,<mask>, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
767,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15671,15677,IdentifierMutator-Variable,options,0,2,8.8811415E-4,<mask>,"LineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width,<mask>, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
768,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15671,15677,IdentifierMutator-Variable,options,true,3,8.8779145E-4,<mask>,"LineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width,<mask>, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
769,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15671,15677,IdentifierMutator-Variable,options,opt,4,8.0959394E-4,<mask>,"LineSyntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width,<mask>, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
770,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15680,15686,IdentifierMutator-Variable,leftPad,desc,0,0.11174396,<mask>,"ntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options,<mask>, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
771,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15680,15686,IdentifierMutator-Variable,leftPad,description,1,0.088924184,<mask>,"ntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options,<mask>, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
772,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15680,15686,IdentifierMutator-Variable,leftPad,indent,2,0.036683712,<mask>,"ntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options,<mask>, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
773,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15680,15686,IdentifierMutator-Variable,leftPad,true,3,0.03560081,<mask>,"ntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options,<mask>, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
774,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15680,15686,IdentifierMutator-Variable,leftPad,false,4,0.02199062,<mask>,"ntax == null) || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options,<mask>, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
775,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15689,15695,IdentifierMutator-Variable,descPad,wrap,0,0.086072296,<mask>,") || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad,<mask>);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
776,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15689,15695,IdentifierMutator-Variable,descPad,true,1,0.058692176,<mask>,") || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad,<mask>);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
777,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15689,15695,IdentifierMutator-Variable,descPad,options,2,0.050595913,<mask>,") || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad,<mask>);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
778,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15689,15695,IdentifierMutator-Variable,descPad,indent,3,0.03167903,<mask>,") || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad,<mask>);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
779,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,525,15689,15695,IdentifierMutator-Variable,descPad,padding,4,0.03033603,<mask>,") || (cmdLineSyntax.length() == 0))
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad,<mask>);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
780,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15728,15731,BinaryOperatorMutator,&&,&,2,7.1580114E-4,(footer != null) <mask> (footer.trim().length() > 0),"    {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null)<mask>(footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
781,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15728,15731,BinaryOperatorMutator,&&,&,3,5.690017E-4,(footer != null) <mask> (footer.trim().length() > 0),"    {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null)<mask>(footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
782,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15728,15731,BinaryOperatorMutator,&&,AND,4,9.380066E-5,(footer != null) <mask> (footer.trim().length() > 0),"    {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null)<mask>(footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
783,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15719,15722,BinaryOperatorMutator,!=,==,1,2.7877782E-5,footer <mask> null,"       {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer<mask>null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
784,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15719,15722,BinaryOperatorMutator,!=,=,2,9.440952E-6,footer <mask> null,"       {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer<mask>null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
785,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15719,15722,BinaryOperatorMutator,!=,==,3,7.0155984E-6,footer <mask> null,"       {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer<mask>null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
786,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15719,15722,BinaryOperatorMutator,!=,(!,4,3.2149276E-7,footer <mask> null,"       {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer<mask>null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
787,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15713,15718,IdentifierMutator-Variable,footer,header,0,0.47238642,<mask>,"
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((<mask> != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
788,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15713,15718,IdentifierMutator-Variable,footer,foot,1,0.12615383,<mask>,"
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((<mask> != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
789,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15713,15718,IdentifierMutator-Variable,footer,writer,2,0.11822451,<mask>,"
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((<mask> != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
790,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15713,15718,IdentifierMutator-Variable,footer,reader,3,0.096209936,<mask>,"
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((<mask> != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
791,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15713,15718,IdentifierMutator-Variable,footer,body,4,0.05024766,<mask>,"
        {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((<mask> != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
792,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15723,15726,IdentifierMutator-Literal,null,nil,2,3.2831513E-6,<mask>,"      {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer !=<mask>) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
793,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15723,15726,IdentifierMutator-Literal,null,Null,3,1.4107803E-6,<mask>,"      {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer !=<mask>) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
794,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15723,15726,IdentifierMutator-Literal,null,NULL,4,1.1214518E-6,<mask>,"      {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer !=<mask>) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
795,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15755,15757,BinaryOperatorMutator,>,==,2,4.3175343E-5,footer.trim().length() <mask> 0,"       throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length()<mask>0))
        {
            printWrapped(pw, width, footer);
        }
    }"
796,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15755,15757,BinaryOperatorMutator,>,<,3,3.0300742E-5,footer.trim().length() <mask> 0,"       throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length()<mask>0))
        {
            printWrapped(pw, width, footer);
        }
    }"
797,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15755,15757,BinaryOperatorMutator,>,!=,4,2.59597E-5,footer.trim().length() <mask> 0,"       throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length()<mask>0))
        {
            printWrapped(pw, width, footer);
        }
    }"
798,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15747,15752,MethodCallMutator,length,Length,2,1.4197059E-6,footer.trim().<mask>(),"         throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().<mask>() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
799,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15747,15752,MethodCallMutator,length,duration,3,1.284779E-6,footer.trim().<mask>(),"         throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().<mask>() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
800,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15747,15752,MethodCallMutator,length,position,4,9.1973206E-8,footer.trim().<mask>(),"         throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().<mask>() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
801,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15740,15743,MethodCallMutator,trim,strip,0,0.9103512,footer.<mask>(),"            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.<mask>().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
802,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15740,15743,MethodCallMutator,trim,length,2,0.004009862,footer.<mask>(),"            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.<mask>().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
803,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15740,15743,MethodCallMutator,trim,short,3,0.002881081,footer.<mask>(),"            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.<mask>().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
804,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15740,15743,MethodCallMutator,trim,split,4,0.0027942245,footer.<mask>(),"            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.<mask>().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
805,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15733,15738,IdentifierMutator-Variable,footer,header,0,0.42288512,<mask>,"  {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (<mask>.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
806,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15733,15738,IdentifierMutator-Variable,footer,foot,1,0.34568045,<mask>,"  {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (<mask>.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
807,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15733,15738,IdentifierMutator-Variable,footer,body,2,0.05532443,<mask>,"  {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (<mask>.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
808,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15733,15738,IdentifierMutator-Variable,footer,writer,3,0.046334043,<mask>,"  {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (<mask>.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
809,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15733,15738,IdentifierMutator-Variable,footer,er,4,0.015849898,<mask>,"  {
            throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (<mask>.trim().length() > 0))
        {
            printWrapped(pw, width, footer);
        }
    }"
810,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15758,15758,IdentifierMutator-Literal,0,1,1,4.7225592E-5,<mask>,"      throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() ><mask>))
        {
            printWrapped(pw, width, footer);
        }
    }"
811,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15758,15758,IdentifierMutator-Literal,0,"""""",3,1.916936E-5,<mask>,"      throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() ><mask>))
        {
            printWrapped(pw, width, footer);
        }
    }"
812,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,527,15758,15758,IdentifierMutator-Literal,0,"''",4,1.2475929E-5,<mask>,"      throw new IllegalArgumentException(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() ><mask>))
        {
            printWrapped(pw, width, footer);
        }
    }"
813,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,529,15784,15795,MethodCallMutator,printWrapped,print,0,0.7820211,"<mask>(pw, width, footer)","(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {<mask>(pw, width, footer);
        }
    }"
814,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,529,15784,15795,MethodCallMutator,printWrapped,println,1,0.033441808,"<mask>(pw, width, footer)","(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {<mask>(pw, width, footer);
        }
    }"
815,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,529,15784,15795,MethodCallMutator,printWrapped,wrap,2,0.020675689,"<mask>(pw, width, footer)","(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {<mask>(pw, width, footer);
        }
    }"
816,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,529,15784,15795,MethodCallMutator,printWrapped,write,3,0.014285947,"<mask>(pw, width, footer)","(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {<mask>(pw, width, footer);
        }
    }"
817,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,529,15784,15795,MethodCallMutator,printWrapped,show,4,0.009451327,"<mask>(pw, width, footer)","(""cmdLineSyntax not provided"");
        }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {<mask>(pw, width, footer);
        }
    }"
818,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,529,15797,15798,IdentifierMutator-Variable,pw,wp,0,0.7455212,<mask>," }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(<mask>, width, footer);
        }
    }"
819,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,529,15797,15798,IdentifierMutator-Variable,pw,w,1,0.031700563,<mask>," }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(<mask>, width, footer);
        }
    }"
820,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,529,15797,15798,IdentifierMutator-Variable,pw,p,2,0.026545428,<mask>," }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(<mask>, width, footer);
        }
    }"
821,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,529,15797,15798,IdentifierMutator-Variable,pw,rw,3,0.022753282,<mask>," }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(<mask>, width, footer);
        }
    }"
822,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,529,15797,15798,IdentifierMutator-Variable,pw,wx,4,0.018100336,<mask>," }

        if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(<mask>, width, footer);
        }
    }"
823,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,529,15801,15805,IdentifierMutator-Variable,width,Width,2,2.4303605E-4,<mask>,"       if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw,<mask>, footer);
        }
    }"
824,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,529,15801,15805,IdentifierMutator-Variable,width,height,3,2.2732507E-4,<mask>,"       if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw,<mask>, footer);
        }
    }"
825,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,529,15801,15805,IdentifierMutator-Variable,width,Width,4,2.0422987E-4,<mask>,"       if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw,<mask>, footer);
        }
    }"
826,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,529,15808,15813,IdentifierMutator-Variable,footer,wrapper,0,0.15055275,<mask>,"     if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width,<mask>);
        }
    }"
827,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,529,15808,15813,IdentifierMutator-Variable,footer,footnote,1,0.13932925,<mask>,"     if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width,<mask>);
        }
    }"
828,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,529,15808,15813,IdentifierMutator-Variable,footer,foot,2,0.117749706,<mask>,"     if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width,<mask>);
        }
    }"
829,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,529,15808,15813,IdentifierMutator-Variable,footer,header,3,0.10581764,<mask>,"     if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width,<mask>);
        }
    }"
830,HelpFormatter.java,printHelp,"void printHelp(PrintWriter pw, int width, String cmdLineSyntax,
                          String header, Options options, int leftPad,
                          int descPad, String footer, boolean autoUsage)",502,529,15808,15813,IdentifierMutator-Variable,footer,body,4,0.07452681,<mask>,"     if (autoUsage)
        {
            printUsage(pw, width, cmdLineSyntax, options);
        }
        else
        {
            printUsage(pw, width, cmdLineSyntax);
        }

        if ((header != null) && (header.trim().length() > 0))
        {
            printWrapped(pw, width, header);
        }

        printOptions(pw, width, options, leftPad, descPad);

        if ((footer != null) && (footer.trim().length() > 0))
        {
            printWrapped(pw, width,<mask>);
        }
    }"
831,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16343,16348,MethodCallMutator,append,join,1,0.001194658,"new StringBuffer(defaultSyntaxPrefix).<mask>(app).<mask>("" "")","void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).<mask>("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
832,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16343,16348,MethodCallMutator,append,replace,2,4.36785E-4,"new StringBuffer(defaultSyntaxPrefix).<mask>(app).<mask>("" "")","void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).<mask>("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
833,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16343,16348,MethodCallMutator,append,repeat,4,2.0687391E-4,"new StringBuffer(defaultSyntaxPrefix).<mask>(app).<mask>("" "")","void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).<mask>("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
834,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16331,16336,MethodCallMutator,append,replace,2,4.3745534E-4,new StringBuffer(defaultSyntaxPrefix).<mask>(app),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).<mask>(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
835,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16331,16336,MethodCallMutator,append,write,3,2.280075E-4,new StringBuffer(defaultSyntaxPrefix).<mask>(app),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).<mask>(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
836,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16331,16336,MethodCallMutator,append,add,4,1.699616E-4,new StringBuffer(defaultSyntaxPrefix).<mask>(app),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).<mask>(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
837,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16310,16328,IdentifierMutator-Variable,defaultSyntaxPrefix,width,0,0.9850168,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(<mask>).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
          "
838,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16310,16328,IdentifierMutator-Variable,defaultSyntaxPrefix,40,1,0.0013357464,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(<mask>).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
          "
839,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16310,16328,IdentifierMutator-Variable,defaultSyntaxPrefix,100,2,6.637747E-4,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(<mask>).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
          "
840,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16310,16328,IdentifierMutator-Variable,defaultSyntaxPrefix,Width,3,5.641426E-4,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(<mask>).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
          "
841,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16310,16328,IdentifierMutator-Variable,defaultSyntaxPrefix,200,4,4.8383293E-4,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(<mask>).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
          "
842,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16310,16328,FieldReferenceMutator,defaultSyntaxPrefix,width,0,0.9850168,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(<mask>).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
          "
843,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16310,16328,FieldReferenceMutator,defaultSyntaxPrefix,40,1,0.0013357464,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(<mask>).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
          "
844,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16310,16328,FieldReferenceMutator,defaultSyntaxPrefix,100,2,6.637747E-4,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(<mask>).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
          "
845,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16310,16328,FieldReferenceMutator,defaultSyntaxPrefix,Width,3,5.641426E-4,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(<mask>).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
          "
846,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16310,16328,FieldReferenceMutator,defaultSyntaxPrefix,200,4,4.8383293E-4,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(<mask>).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
          "
847,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16338,16340,IdentifierMutator-Variable,app,prefix,2,0.008601289,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(<mask>).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
848,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16338,16340,IdentifierMutator-Variable,app,help,3,0.0074437605,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(<mask>).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
849,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16338,16340,IdentifierMutator-Variable,app,command,4,0.0056639295,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(<mask>).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
850,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16350,16352,IdentifierMutator-Literal,"""""",width,0,0.95607984,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(<mask>);

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
851,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16350,16352,IdentifierMutator-Literal,"""""",options,1,0.013321282,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(<mask>);

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
852,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16350,16352,IdentifierMutator-Literal,"""""",width,2,0.0036516155,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(<mask>);

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
853,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16350,16352,IdentifierMutator-Literal,"""""",w,3,0.0011559991,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(<mask>);

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
854,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,544,16350,16352,IdentifierMutator-Literal,"""""",out,4,8.504843E-4,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(<mask>);

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
855,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,552,16565,16574,MethodCallMutator,getOptions,size,0,0.6497819,options.<mask>(),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.<mask>());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
       "
856,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,552,16565,16574,MethodCallMutator,getOptions,values,1,0.26979586,options.<mask>(),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.<mask>());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
       "
857,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,552,16565,16574,MethodCallMutator,getOptions,keys,2,0.018324366,options.<mask>(),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.<mask>());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
       "
858,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,552,16565,16574,MethodCallMutator,getOptions,iterator,3,0.008883099,options.<mask>(),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.<mask>());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
       "
859,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,552,16565,16574,MethodCallMutator,getOptions,length,4,0.007287122,options.<mask>(),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.<mask>());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
       "
860,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,552,16557,16563,IdentifierMutator-Variable,options,this,1,0.08695729,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(<mask>.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
861,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,552,16557,16563,IdentifierMutator-Variable,options,option,2,0.06594764,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(<mask>.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
862,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,552,16557,16563,IdentifierMutator-Variable,options,app,3,0.031188913,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(<mask>.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
863,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,552,16557,16563,IdentifierMutator-Variable,options,config,4,0.03065689,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(<mask>.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
864,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,553,16600,16603,MethodCallMutator,sort,ordered,2,0.002677807,"Collections.<mask>(optList, getOptionComparator())","void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.<mask>(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
865,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,553,16600,16603,MethodCallMutator,sort,order,3,0.0018519957,"Collections.<mask>(optList, getOptionComparator())","void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.<mask>(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
866,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,553,16600,16603,MethodCallMutator,sort,Sort,4,7.8254676E-4,"Collections.<mask>(optList, getOptionComparator())","void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.<mask>(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
867,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,553,16605,16611,IdentifierMutator-Variable,optList,list,0,0.49216282,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(<mask>, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
       "
868,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,553,16605,16611,IdentifierMutator-Variable,optList,option,1,0.15929501,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(<mask>, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
       "
869,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,553,16605,16611,IdentifierMutator-Variable,optList,opt,2,0.118477836,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(<mask>, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
       "
870,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,553,16605,16611,IdentifierMutator-Variable,optList,this,3,0.06147569,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(<mask>, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
       "
871,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,553,16605,16611,IdentifierMutator-Variable,optList,options,4,0.044416055,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(<mask>, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
       "
872,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,553,16614,16632,MethodCallMutator,getOptionComparator,size,0,0.37636614,<mask>(),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList,<mask>());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
         "
873,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,553,16614,16632,MethodCallMutator,getOptionComparator,iterator,1,0.20849274,<mask>(),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList,<mask>());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
         "
874,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,553,16614,16632,MethodCallMutator,getOptionComparator,reverse,2,0.18329926,<mask>(),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList,<mask>());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
         "
875,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,553,16614,16632,MethodCallMutator,getOptionComparator,order,3,0.028406557,<mask>(),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList,<mask>());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
         "
876,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,553,16614,16632,MethodCallMutator,getOptionComparator,sort,4,0.021417135,<mask>(),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList,<mask>());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
         "
877,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,555,16708,16715,MethodCallMutator,iterator,iter,1,0.030525673,optList.<mask>(),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.<mask>(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
878,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,555,16708,16715,MethodCallMutator,iterator,Iterator,2,0.012905848,optList.<mask>(),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.<mask>(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
879,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,555,16708,16715,MethodCallMutator,iterator,classes,3,2.0361008E-4,optList.<mask>(),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.<mask>(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
880,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,555,16708,16715,MethodCallMutator,iterator,order,4,1.2320284E-4,optList.<mask>(),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.<mask>(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
881,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,555,16700,16706,IdentifierMutator-Variable,optList,list,0,0.46630868,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i =<mask>.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
       "
882,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,555,16700,16706,IdentifierMutator-Variable,optList,options,1,0.43326357,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i =<mask>.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
       "
883,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,555,16700,16706,IdentifierMutator-Variable,optList,option,2,0.028360365,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i =<mask>.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
       "
884,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,555,16700,16706,IdentifierMutator-Variable,optList,opt,3,0.0034225625,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i =<mask>.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
       "
885,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,555,16700,16706,IdentifierMutator-Variable,optList,array,4,0.003183071,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i =<mask>.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
       "
886,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,555,16722,16728,MethodCallMutator,hasNext,next,0,0.98591506,i.<mask>(),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.<mask>();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
       "
887,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,555,16722,16728,MethodCallMutator,hasNext,Next,1,0.0031840007,i.<mask>(),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.<mask>();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
       "
888,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,555,16722,16728,MethodCallMutator,hasNext,valid,2,0.0021420124,i.<mask>(),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.<mask>();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
       "
889,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,555,16722,16728,MethodCallMutator,hasNext,exit,3,0.0012375778,i.<mask>(),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.<mask>();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
       "
890,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,555,16722,16728,MethodCallMutator,hasNext,continue,4,8.0670306E-4,i.<mask>(),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.<mask>();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
       "
891,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,555,16720,16720,IdentifierMutator-Variable,i,it,2,6.910109E-5,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator();<mask>.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
892,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,555,16720,16720,IdentifierMutator-Variable,i,I,3,6.8278256E-5,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator();<mask>.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
893,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,555,16720,16720,IdentifierMutator-Variable,i,I,4,5.408327E-5,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator();<mask>.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
894,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,558,16797,16797,AssignmentMutator,option=((org.apache.commons.cli.Option)(i.next())),option,0,0.13636623,option <mask>= ((org.apache.commons.cli.Option) (i.next())),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option<mask>= (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
     "
895,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,558,16797,16797,AssignmentMutator,option=((org.apache.commons.cli.Option)(i.next())),p,1,0.11476718,option <mask>= ((org.apache.commons.cli.Option) (i.next())),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option<mask>= (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
     "
896,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,558,16797,16797,AssignmentMutator,option=((org.apache.commons.cli.Option)(i.next())),|,2,0.09874707,option <mask>= ((org.apache.commons.cli.Option) (i.next())),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option<mask>= (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
     "
897,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,558,16797,16797,AssignmentMutator,option=((org.apache.commons.cli.Option)(i.next())),,3,0.069901854,option <mask>= ((org.apache.commons.cli.Option) (i.next())),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option<mask>= (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
     "
898,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,558,16797,16797,AssignmentMutator,option=((org.apache.commons.cli.Option)(i.next())),o,4,0.04690098,option <mask>= ((org.apache.commons.cli.Option) (i.next())),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option<mask>= (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
     "
899,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,558,16791,16796,IdentifierMutator-Variable,option,options,1,3.334435E-4,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option<mask> = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                  "
900,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,558,16791,16796,IdentifierMutator-Variable,option,Option,2,2.3735507E-4,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option<mask> = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                  "
901,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,558,16791,16796,IdentifierMutator-Variable,option,opt,3,2.2217147E-4,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option<mask> = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                  "
902,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,558,16791,16796,IdentifierMutator-Variable,option,argument,4,2.0266944E-4,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option<mask> = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                  "
903,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,558,16811,16814,MethodCallMutator,next,value,2,1.486617E-4,((Option) (i.<mask>())),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.<mask>();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
904,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,558,16811,16814,MethodCallMutator,next,current,3,2.0336074E-5,((Option) (i.<mask>())),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.<mask>();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
905,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,558,16811,16814,MethodCallMutator,next,object,4,1.9602086E-5,((Option) (i.<mask>())),"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.<mask>();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
906,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,558,16809,16809,IdentifierMutator-Variable,i,it,2,7.1631954E-4,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option)<mask>.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
907,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,558,16809,16809,IdentifierMutator-Variable,i,iterator,3,1.4195556E-4,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option)<mask>.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
908,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,558,16809,16809,IdentifierMutator-Variable,i,iter,4,1.3014405E-4,<mask>,"void printUsage(PrintWriter pw, int width, String app, Options options)
    {
        // initialise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option)<mask>.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
      "
909,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,561,16921,16934,MethodCallMutator,getOptionGroup,get,0,0.8711441,options.<mask>(option)," string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.<mask>(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
               "
910,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,561,16921,16934,MethodCallMutator,getOptionGroup,group,1,0.099785715,options.<mask>(option)," string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.<mask>(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
               "
911,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,561,16921,16934,MethodCallMutator,getOptionGroup,add,2,0.005422087,options.<mask>(option)," string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.<mask>(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
               "
912,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,561,16921,16934,MethodCallMutator,getOptionGroup,put,3,0.0021388754,options.<mask>(option)," string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.<mask>(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
               "
913,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,561,16921,16934,MethodCallMutator,getOptionGroup,find,4,0.0020523749,options.<mask>(option)," string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.<mask>(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
               "
914,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,561,16913,16919,IdentifierMutator-Variable,options,group,1,0.3064799,<mask>,"ise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group =<mask>.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
           "
915,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,561,16913,16919,IdentifierMutator-Variable,options,this,2,0.040381283,<mask>,"ise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group =<mask>.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
           "
916,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,561,16913,16919,IdentifierMutator-Variable,options,groups,3,0.027319904,<mask>,"ise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group =<mask>.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
           "
917,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,561,16913,16919,IdentifierMutator-Variable,options,parser,4,0.017578935,<mask>,"ise the string buffer
        StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group =<mask>.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
           "
918,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,561,16936,16941,IdentifierMutator-Variable,option,options,2,0.00104571,<mask>,"       StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(<mask>);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

"
919,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,561,16936,16941,IdentifierMutator-Variable,option,Option,3,5.4157054E-4,<mask>,"       StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(<mask>);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

"
920,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,561,16936,16941,IdentifierMutator-Variable,option,key,4,3.8858087E-4,<mask>,"       StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");

        // create a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(<mask>);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

"
921,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,564,17016,17019,BinaryOperatorMutator,!=,==,0,0.55796474,group <mask> null," list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group<mask>null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
              "
922,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,564,17016,17019,BinaryOperatorMutator,!=,=,2,0.13502696,group <mask> null," list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group<mask>null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
              "
923,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,564,17016,17019,BinaryOperatorMutator,!=,==,3,0.040676754,group <mask> null," list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group<mask>null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
              "
924,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,564,17016,17019,BinaryOperatorMutator,!=,!,4,0.001863674,group <mask> null," list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group<mask>null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
              "
925,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,564,17011,17015,IdentifierMutator-Variable,group,g,2,5.888738E-4,<mask>," a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (<mask> != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
             "
926,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,564,17011,17015,IdentifierMutator-Variable,group,Group,3,3.921017E-4,<mask>," a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (<mask> != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
             "
927,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,564,17011,17015,IdentifierMutator-Variable,group,default,4,2.1850695E-4,<mask>," a list for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (<mask> != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
             "
928,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,564,17020,17023,IdentifierMutator-Literal,null,group,2,0.0011874969,<mask>," for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group !=<mask>)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
               "
929,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,564,17020,17023,IdentifierMutator-Literal,null,this,3,5.9361174E-4,<mask>," for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group !=<mask>)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
               "
930,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,564,17020,17023,IdentifierMutator-Literal,null,option,4,3.922569E-4,<mask>," for processed option groups
        final Collection processedGroups = new ArrayList();

        // temp variable
        Option option;

        List optList = new ArrayList(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group !=<mask>)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
               "
931,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,567,17127,17127,UnaryOperatorMutator,!,un,2,0.03009395,<mask>processedGroups.contains(group),"(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (<mask>processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
  "
932,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,567,17127,17127,UnaryOperatorMutator,!,...,3,0.002738485,<mask>processedGroups.contains(group),"(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (<mask>processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
  "
933,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,567,17127,17127,UnaryOperatorMutator,!,!!,4,0.0019983777,<mask>processedGroups.contains(group),"(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (<mask>processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
  "
934,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,567,17144,17151,MethodCallMutator,contains,add,0,0.46698132,processedGroups.<mask>(group),"());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.<mask>(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
         "
935,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,567,17144,17151,MethodCallMutator,contains,has,1,0.33742455,processedGroups.<mask>(group),"());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.<mask>(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
         "
936,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,567,17144,17151,MethodCallMutator,contains,remove,2,0.11564376,processedGroups.<mask>(group),"());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.<mask>(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
         "
937,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,567,17144,17151,MethodCallMutator,contains,get,4,0.016739918,processedGroups.<mask>(group),"());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.<mask>(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
         "
938,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,567,17128,17142,IdentifierMutator-Variable,processedGroups,groups,0,0.609808,<mask>,"(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!<mask>.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
      "
939,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,567,17128,17142,IdentifierMutator-Variable,processedGroups,group,1,0.18239662,<mask>,"(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!<mask>.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
      "
940,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,567,17128,17142,IdentifierMutator-Variable,processedGroups,queue,2,0.034985,<mask>,"(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!<mask>.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
      "
941,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,567,17128,17142,IdentifierMutator-Variable,processedGroups,buff,3,0.02244849,<mask>,"(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!<mask>.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
      "
942,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,567,17128,17142,IdentifierMutator-Variable,processedGroups,process,4,0.020291528,<mask>,"(options.getOptions());
        Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!<mask>.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
      "
943,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,567,17153,17157,IdentifierMutator-Variable,group,g,1,0.0017549371,<mask>,"       Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(<mask>))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
           "
944,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,567,17153,17157,IdentifierMutator-Variable,group,Group,3,5.053809E-4,<mask>,"       Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(<mask>))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
           "
945,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,567,17153,17157,IdentifierMutator-Variable,group,option,4,4.4688012E-4,<mask>,"       Collections.sort(optList, getOptionComparator());
        // iterate over the options
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(<mask>))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
           "
946,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,570,17274,17276,MethodCallMutator,add,push,1,0.011904335,processedGroups.<mask>(group),"       // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.<mask>(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
         "
947,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,570,17274,17276,MethodCallMutator,add,remove,2,0.004922654,processedGroups.<mask>(group),"       // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.<mask>(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
         "
948,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,570,17274,17276,MethodCallMutator,add,append,3,0.0038799867,processedGroups.<mask>(group),"       // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.<mask>(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
         "
949,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,570,17274,17276,MethodCallMutator,add,added,4,3.034476E-4,processedGroups.<mask>(group),"       // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.<mask>(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
         "
950,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,570,17258,17272,IdentifierMutator-Variable,processedGroups,processed,0,0.7588529,<mask>,".iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list<mask>.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
       "
951,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,570,17258,17272,IdentifierMutator-Variable,processedGroups,grouped,1,0.09084961,<mask>,".iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list<mask>.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
       "
952,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,570,17258,17272,IdentifierMutator-Variable,processedGroups,group,2,0.038255367,<mask>,".iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list<mask>.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
       "
953,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,570,17258,17272,IdentifierMutator-Variable,processedGroups,groups,3,0.03656248,<mask>,".iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list<mask>.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
       "
954,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,570,17258,17272,IdentifierMutator-Variable,processedGroups,done,4,0.006079699,<mask>,".iterator(); i.hasNext();)
        {
            // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list<mask>.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
       "
955,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,570,17278,17282,IdentifierMutator-Variable,group,g,2,0.0016810024,<mask>,"     // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(<mask>);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
           "
956,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,570,17278,17282,IdentifierMutator-Variable,group,Group,3,3.969283E-4,<mask>,"     // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(<mask>);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
           "
957,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,570,17278,17282,IdentifierMutator-Variable,group,groups,4,1.4844438E-4,<mask>,"     // get the next Option
            option = (Option) i.next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(<mask>);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
           "
958,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,574,17352,17368,MethodCallMutator,appendOptionGroup,usage,0,0.7435751,"<mask>(buff, group)","next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause<mask>(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


   "
959,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,574,17352,17368,MethodCallMutator,appendOptionGroup,help,1,0.023405004,"<mask>(buff, group)","next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause<mask>(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


   "
960,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,574,17352,17368,MethodCallMutator,appendOptionGroup,comment,2,0.017774558,"<mask>(buff, group)","next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause<mask>(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


   "
961,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,574,17352,17368,MethodCallMutator,appendOptionGroup,Usage,3,0.017266938,"<mask>(buff, group)","next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause<mask>(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


   "
962,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,574,17352,17368,MethodCallMutator,appendOptionGroup,append,4,0.012706247,"<mask>(buff, group)","next();

            // check if the option is part of an OptionGroup
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause<mask>(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


   "
963,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,574,17370,17373,IdentifierMutator-Variable,buff,buffer,1,3.7290144E-4,<mask>,"Group
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(<mask>, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


     "
964,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,574,17370,17373,IdentifierMutator-Variable,buff,buf,2,1.07798674E-4,<mask>,"Group
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(<mask>, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


     "
965,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,574,17370,17373,IdentifierMutator-Variable,buff,ff,3,8.106414E-5,<mask>,"Group
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(<mask>, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


     "
966,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,574,17370,17373,IdentifierMutator-Variable,buff,b,4,3.688747E-5,<mask>,"Group
            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(<mask>, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


     "
967,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,574,17376,17380,IdentifierMutator-Variable,group,option,1,0.090602174,<mask>,"            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff,<mask>);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


       "
968,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,574,17376,17380,IdentifierMutator-Variable,group,options,3,0.0025616263,<mask>,"            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff,<mask>);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


       "
969,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,574,17376,17380,IdentifierMutator-Variable,group,section,4,0.0016330569,<mask>,"            OptionGroup group = options.getOptionGroup(option);

            // if the option is part of a group 
            if (group != null)
            {
                // and if the group has not already been processed
                if (!processedGroups.contains(group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff,<mask>);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


       "
970,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,584,17635,17646,MethodCallMutator,appendOption,append,0,0.24198379,"<mask>(buff, option, option.isRequired())","group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {<mask>(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
971,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,584,17635,17646,MethodCallMutator,appendOption,add,1,0.0524754,"<mask>(buff, option, option.isRequired())","group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {<mask>(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
972,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,584,17635,17646,MethodCallMutator,appendOption,print,2,0.04739898,"<mask>(buff, option, option.isRequired())","group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {<mask>(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
973,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,584,17635,17646,MethodCallMutator,appendOption,merge,3,0.024213532,"<mask>(buff, option, option.isRequired())","group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {<mask>(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
974,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,584,17635,17646,MethodCallMutator,appendOption,write,4,0.024136368,"<mask>(buff, option, option.isRequired())","group))
                {
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {<mask>(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
975,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,584,17648,17651,IdentifierMutator-Variable,buff,buffer,1,1.3049194E-4,<mask>,"
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(<mask>, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
976,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,584,17648,17651,IdentifierMutator-Variable,buff,buf,2,3.2533415E-5,<mask>,"
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(<mask>, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
977,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,584,17648,17651,IdentifierMutator-Variable,buff,b,4,1.7979E-5,<mask>,"
                    // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(<mask>, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
978,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,584,17654,17659,IdentifierMutator-Variable,option,group,1,0.0017647678,<mask>,"                   // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff,<mask>, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
979,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,584,17654,17659,IdentifierMutator-Variable,option,options,2,7.494021E-4,<mask>,"                   // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff,<mask>, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
980,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,584,17654,17659,IdentifierMutator-Variable,option,null,3,5.604258E-4,<mask>,"                   // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff,<mask>, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
981,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,584,17654,17659,IdentifierMutator-Variable,option,argument,4,3.8168256E-4,<mask>,"                   // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff,<mask>, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
982,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,584,17669,17678,MethodCallMutator,isRequired,help,0,0.1940811,option.<mask>(),"               // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.<mask>());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
983,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,584,17669,17678,MethodCallMutator,isRequired,value,1,0.12404924,option.<mask>(),"               // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.<mask>());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
984,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,584,17669,17678,MethodCallMutator,isRequired,description,2,0.086355224,option.<mask>(),"               // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.<mask>());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
985,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,584,17669,17678,MethodCallMutator,isRequired,usage,3,0.055057753,option.<mask>(),"               // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.<mask>());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
986,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,584,17669,17678,MethodCallMutator,isRequired,name,4,0.050972667,option.<mask>(),"               // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.<mask>());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
987,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,584,17662,17667,IdentifierMutator-Variable,option,i,1,0.03314849,<mask>,"                 // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option,<mask>.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
988,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,584,17662,17667,IdentifierMutator-Variable,option,options,2,0.00461573,<mask>,"                 // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option,<mask>.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
989,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,584,17662,17667,IdentifierMutator-Variable,option,group,3,0.0044382694,<mask>,"                 // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option,<mask>.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
990,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,584,17662,17667,IdentifierMutator-Variable,option,Option,4,0.0040187915,<mask>,"                 // add the group to the processed list
                    processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option,<mask>.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
991,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,587,17717,17723,MethodCallMutator,hasNext,next,0,0.92729443,i.<mask>(),"           processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.<mask>())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
992,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,587,17717,17723,MethodCallMutator,hasNext,Next,1,0.0055711064,i.<mask>(),"           processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.<mask>())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
993,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,587,17717,17723,MethodCallMutator,hasNext,show,2,0.00538969,i.<mask>(),"           processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.<mask>())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
994,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,587,17717,17723,MethodCallMutator,hasNext,value,3,0.00476283,i.<mask>(),"           processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.<mask>())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
995,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,587,17717,17723,MethodCallMutator,hasNext,get,4,0.003556929,i.<mask>(),"           processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.<mask>())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
996,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,587,17715,17715,IdentifierMutator-Variable,i,option,0,0.16469324,<mask>,"             processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (<mask>.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
997,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,587,17715,17715,IdentifierMutator-Variable,i,iter,1,0.10950906,<mask>,"             processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (<mask>.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
998,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,587,17715,17715,IdentifierMutator-Variable,i,loop,2,0.06616847,<mask>,"             processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (<mask>.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
999,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,587,17715,17715,IdentifierMutator-Variable,i,options,3,0.054583084,<mask>,"             processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (<mask>.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1000,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,587,17715,17715,IdentifierMutator-Variable,i,iterator,4,0.04438352,<mask>,"             processedGroups.add(group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (<mask>.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1001,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,589,17763,17768,MethodCallMutator,append,write,1,0.013933414,"buff.<mask>("" "")","      // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.<mask>("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1002,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,589,17763,17768,MethodCallMutator,append,print,2,0.001211232,"buff.<mask>("" "")","      // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.<mask>("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1003,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,589,17763,17768,MethodCallMutator,append,push,3,0.0010995627,"buff.<mask>("" "")","      // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.<mask>("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1004,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,589,17763,17768,MethodCallMutator,append,delete,4,4.337611E-4,"buff.<mask>("" "")","      // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.<mask>("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1005,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,589,17758,17761,IdentifierMutator-Variable,buff,buffer,1,0.02252399,<mask>,"group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {<mask>.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1006,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,589,17758,17761,IdentifierMutator-Variable,buff,buf,2,0.005548632,<mask>,"group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {<mask>.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1007,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,589,17758,17761,IdentifierMutator-Variable,buff,b,3,0.0033065695,<mask>,"group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {<mask>.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1008,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,589,17758,17761,IdentifierMutator-Variable,buff,text,4,0.0021290241,<mask>,"group);


                    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {<mask>.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1009,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,589,17770,17772,IdentifierMutator-Literal,"""""",option,0,0.7079644,<mask>,"    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append(<mask>);
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1010,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,589,17770,17772,IdentifierMutator-Literal,"""""",i,1,0.030243997,<mask>,"    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append(<mask>);
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1011,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,589,17770,17772,IdentifierMutator-Literal,"""""",option,2,0.017588971,<mask>,"    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append(<mask>);
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1012,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,589,17770,17772,IdentifierMutator-Literal,"""""",section,3,0.01513001,<mask>,"    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append(<mask>);
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1013,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,589,17770,17772,IdentifierMutator-Literal,"""""",Option,4,0.014522066,<mask>,"    // add the usage clause
                    appendOptionGroup(buff, group);
                }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append(<mask>);
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1014,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17839,17850,MethodCallMutator,printWrapped,Text,0,0.32154462,"<mask>(pw, width, buff.toString().indexOf(' ') + 1, buff.toString())","               }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped<mask>(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1015,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17839,17850,MethodCallMutator,printWrapped,Line,1,0.1186383,"<mask>(pw, width, buff.toString().indexOf(' ') + 1, buff.toString())","               }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped<mask>(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1016,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17839,17850,MethodCallMutator,printWrapped,String,2,0.09393372,"<mask>(pw, width, buff.toString().indexOf(' ') + 1, buff.toString())","               }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped<mask>(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1017,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17839,17850,MethodCallMutator,printWrapped,Page,3,0.022329498,"<mask>(pw, width, buff.toString().indexOf(' ') + 1, buff.toString())","               }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped<mask>(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1018,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17839,17850,MethodCallMutator,printWrapped,Output,4,0.019740906,"<mask>(pw, width, buff.toString().indexOf(' ') + 1, buff.toString())","               }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped<mask>(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1019,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17852,17853,IdentifierMutator-Variable,pw,buff,0,0.1809938,<mask>,"   }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(<mask>, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1020,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17852,17853,IdentifierMutator-Variable,pw,buffer,1,0.13490447,<mask>,"   }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(<mask>, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1021,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17852,17853,IdentifierMutator-Variable,pw,writer,2,0.05855562,<mask>,"   }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(<mask>, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1022,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17852,17853,IdentifierMutator-Variable,pw,width,3,0.05090453,<mask>,"   }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(<mask>, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1023,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17852,17853,IdentifierMutator-Variable,pw,output,4,0.025475686,<mask>,"   }

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(<mask>, width, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1024,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17856,17860,IdentifierMutator-Variable,width,buff,0,0.6771187,<mask>,"

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw,<mask>, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1025,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17856,17860,IdentifierMutator-Variable,width,buffer,1,0.0272488,<mask>,"

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw,<mask>, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1026,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17856,17860,IdentifierMutator-Variable,width,out,2,0.019626498,<mask>,"

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw,<mask>, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1027,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17856,17860,IdentifierMutator-Variable,width,f,3,0.014613549,<mask>,"

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw,<mask>, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1028,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17856,17860,IdentifierMutator-Variable,width,0,4,0.0121992305,<mask>,"

                // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw,<mask>, buff.toString().indexOf(' ') + 1, buff.toString());
   "
1029,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17891,17893,BinaryOperatorMutator,+,-,2,0.12173131,"buff.toString().indexOf(' ') <mask> 1","     // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ')<mask>1, buff.toString());
   "
1030,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17891,17893,BinaryOperatorMutator,+,-,3,0.07049246,"buff.toString().indexOf(' ') <mask> 1","     // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ')<mask>1, buff.toString());
   "
1031,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17891,17893,BinaryOperatorMutator,+,>,4,5.813507E-4,"buff.toString().indexOf(' ') <mask> 1","     // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ')<mask>1, buff.toString());
   "
1032,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17879,17885,MethodCallMutator,indexOf,count,0,0.591061,"buff.toString().<mask>(' ')","          // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().<mask>(' ') + 1, buff.toString());
   "
1033,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17879,17885,MethodCallMutator,indexOf,split,1,0.12924488,"buff.toString().<mask>(' ')","          // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().<mask>(' ') + 1, buff.toString());
   "
1034,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17879,17885,MethodCallMutator,indexOf,index,2,0.10580296,"buff.toString().<mask>(' ')","          // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().<mask>(' ') + 1, buff.toString());
   "
1035,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17879,17885,MethodCallMutator,indexOf,length,3,0.06744025,"buff.toString().<mask>(' ')","          // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().<mask>(' ') + 1, buff.toString());
   "
1036,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17879,17885,MethodCallMutator,indexOf,find,4,0.017480055,"buff.toString().<mask>(' ')","          // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().<mask>(' ') + 1, buff.toString());
   "
1037,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17868,17875,MethodCallMutator,toString,length,0,0.15738907,buff.<mask>(),"             // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.<mask>().indexOf(' ') + 1, buff.toString());
   "
1038,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17868,17875,MethodCallMutator,toString,string,1,0.1388694,buff.<mask>(),"             // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.<mask>().indexOf(' ') + 1, buff.toString());
   "
1039,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17868,17875,MethodCallMutator,toString,letter,2,0.11425658,buff.<mask>(),"             // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.<mask>().indexOf(' ') + 1, buff.toString());
   "
1040,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17868,17875,MethodCallMutator,toString,class,3,0.101192705,buff.<mask>(),"             // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.<mask>().indexOf(' ') + 1, buff.toString());
   "
1041,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17868,17875,MethodCallMutator,toString,value,4,0.07852807,buff.<mask>(),"             // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.<mask>().indexOf(' ') + 1, buff.toString());
   "
1042,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17863,17866,IdentifierMutator-Variable,buff,buffer,1,0.002066003,<mask>,"               // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width,<mask>.toString().indexOf(' ') + 1, buff.toString());
   "
1043,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17863,17866,IdentifierMutator-Variable,buff,text,2,6.588799E-4,<mask>,"               // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width,<mask>.toString().indexOf(' ') + 1, buff.toString());
   "
1044,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17863,17866,IdentifierMutator-Variable,buff,buf,3,4.258383E-4,<mask>,"               // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width,<mask>.toString().indexOf(' ') + 1, buff.toString());
   "
1045,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17863,17866,IdentifierMutator-Variable,buff,width,4,2.247182E-4,<mask>,"               // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width,<mask>.toString().indexOf(' ') + 1, buff.toString());
   "
1046,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17887,17889,IdentifierMutator-Literal,"''","\""",0,0.11226094,<mask>,"       // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(<mask>) + 1, buff.toString());
   "
1047,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17887,17889,IdentifierMutator-Literal,"''","\\",1,0.036070205,<mask>,"       // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(<mask>) + 1, buff.toString());
   "
1048,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17887,17889,IdentifierMutator-Literal,"''","""",2,0.03436477,<mask>,"       // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(<mask>) + 1, buff.toString());
   "
1049,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17887,17889,IdentifierMutator-Literal,"''",break,3,0.02960313,<mask>,"       // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(<mask>) + 1, buff.toString());
   "
1050,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17887,17889,IdentifierMutator-Literal,"''","'",4,0.021233719,<mask>,"       // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(<mask>) + 1, buff.toString());
   "
1051,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17894,17894,IdentifierMutator-Literal,1,width,1,0.11177774,<mask>,"    // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') +<mask>, buff.toString());
   "
1052,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17894,17894,IdentifierMutator-Literal,1,2,2,0.07883228,<mask>,"    // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') +<mask>, buff.toString());
   "
1053,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17894,17894,IdentifierMutator-Literal,1,4,3,0.03434524,<mask>,"    // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') +<mask>, buff.toString());
   "
1054,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17894,17894,IdentifierMutator-Literal,1,6,4,0.01354091,<mask>,"    // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') +<mask>, buff.toString());
   "
1055,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17902,17909,MethodCallMutator,toString,length,0,0.98542976,buff.<mask>()," otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.<mask>());
   "
1056,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17902,17909,MethodCallMutator,toString,value,1,0.0012484501,buff.<mask>()," otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.<mask>());
   "
1057,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17902,17909,MethodCallMutator,toString,join,2,0.0012445248,buff.<mask>()," otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.<mask>());
   "
1058,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17902,17909,MethodCallMutator,toString,size,3,0.001151856,buff.<mask>()," otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.<mask>());
   "
1059,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17902,17909,MethodCallMutator,toString,width,4,0.0010937947,buff.<mask>()," otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.<mask>());
   "
1060,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17897,17900,IdentifierMutator-Variable,buff,buffer,1,0.0054359077,<mask>,"  // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1,<mask>.toString());
   "
1061,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17897,17900,IdentifierMutator-Variable,buff,text,2,0.0019164077,<mask>,"  // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1,<mask>.toString());
   "
1062,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17897,17900,IdentifierMutator-Variable,buff,buf,3,0.001859261,<mask>,"  // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1,<mask>.toString());
   "
1063,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String app, Options options)",541,595,17897,17900,IdentifierMutator-Variable,buff,writer,4,8.238918E-4,<mask>,"  // otherwise the option was displayed in the group
                // previously so ignore it.
            }

            // if the Option is not part of an OptionGroup
            else
            {
                appendOption(buff, option, option.isRequired());
            }

            if (i.hasNext())
            {
                buff.append("" "");
            }
        }


        // call printWrapped
        printWrapped(pw, width, buff.toString().indexOf(' ') + 1,<mask>.toString());
   "
1064,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,608,18392,18392,UnaryOperatorMutator,!,!!,2,0.0011236855,<mask>group.isRequired(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (<mask>group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1065,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,608,18392,18392,UnaryOperatorMutator,!,...,3,0.0010439078,<mask>group.isRequired(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (<mask>group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1066,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,608,18392,18392,UnaryOperatorMutator,!,(!,4,7.412319E-4,<mask>group.isRequired(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (<mask>group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1067,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,608,18399,18408,MethodCallMutator,isRequired,required,0,0.7392225,group.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.<mask>())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1068,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,608,18399,18408,MethodCallMutator,isRequired,optional,1,0.052454207,group.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.<mask>())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1069,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,608,18399,18408,MethodCallMutator,isRequired,needed,2,0.028332997,group.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.<mask>())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1070,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,608,18399,18408,MethodCallMutator,isRequired,needs,3,0.016900733,group.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.<mask>())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1071,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,608,18399,18408,MethodCallMutator,isRequired,empty,4,0.013586933,group.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.<mask>())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1072,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,608,18393,18397,IdentifierMutator-Variable,group,Group,2,2.0036154E-4,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!<mask>.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1073,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,608,18393,18397,IdentifierMutator-Variable,group,option,3,8.526319E-5,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!<mask>.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1074,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,608,18393,18397,IdentifierMutator-Variable,group,config,4,3.7058493E-5,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!<mask>.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1075,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,610,18440,18445,MethodCallMutator,append,write,1,1.4525211E-4,"buff.<mask>(""["")","void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.<mask>(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1076,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,610,18440,18445,MethodCallMutator,append,join,2,1.3062701E-4,"buff.<mask>(""["")","void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.<mask>(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1077,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,610,18440,18445,MethodCallMutator,append,end,3,1.01315505E-4,"buff.<mask>(""["")","void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.<mask>(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1078,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,610,18440,18445,MethodCallMutator,append,push,4,9.6980104E-5,"buff.<mask>(""["")","void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.<mask>(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1079,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,610,18435,18438,IdentifierMutator-Variable,buff,buffer,2,7.751811E-4,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {<mask>.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1080,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,610,18435,18438,IdentifierMutator-Variable,buff,buf,3,2.5717518E-4,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {<mask>.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1081,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,610,18435,18438,IdentifierMutator-Variable,buff,b,4,2.2797043E-4,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {<mask>.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1082,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,610,18447,18449,IdentifierMutator-Literal,"""[""","[""",0,0.16939637,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(<mask>);
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1083,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,610,18447,18449,IdentifierMutator-Literal,"""[""","""",1,0.14541303,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(<mask>);
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1084,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,610,18447,18449,IdentifierMutator-Literal,"""[""","['",2,0.101132095,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(<mask>);
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1085,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,610,18447,18449,IdentifierMutator-Literal,"""[""","[""",3,0.07097267,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(<mask>);
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1086,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,610,18447,18449,IdentifierMutator-Literal,"""[""","\""",4,0.058230508,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(<mask>);
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1087,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,613,18507,18516,MethodCallMutator,getOptions,options,0,0.69189453,group.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.<mask>());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1088,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,613,18507,18516,MethodCallMutator,getOptions,items,1,0.057644214,group.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.<mask>());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1089,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,613,18507,18516,MethodCallMutator,getOptions,values,2,0.054963384,group.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.<mask>());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1090,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,613,18507,18516,MethodCallMutator,getOptions,groups,3,0.034874137,group.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.<mask>());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1091,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,613,18507,18516,MethodCallMutator,getOptions,get,4,0.029468358,group.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.<mask>());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1092,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,613,18501,18505,IdentifierMutator-Variable,group,Group,2,2.1527185E-4,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(<mask>.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1093,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,613,18501,18505,IdentifierMutator-Variable,group,groups,3,1.1895722E-4,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(<mask>.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1094,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,613,18501,18505,IdentifierMutator-Variable,group,this,4,1.1507836E-4,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(<mask>.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1095,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,614,18542,18545,MethodCallMutator,sort,order,2,0.0012249406,"Collections.<mask>(optList, getOptionComparator())","void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.<mask>(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1096,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,614,18542,18545,MethodCallMutator,sort,reverse,3,5.608935E-4,"Collections.<mask>(optList, getOptionComparator())","void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.<mask>(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1097,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,614,18542,18545,MethodCallMutator,sort,ordered,4,3.657351E-4,"Collections.<mask>(optList, getOptionComparator())","void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.<mask>(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1098,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,614,18547,18553,IdentifierMutator-Variable,optList,list,0,0.92885154,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(<mask>, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1099,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,614,18547,18553,IdentifierMutator-Variable,optList,List,1,0.027012862,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(<mask>, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1100,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,614,18547,18553,IdentifierMutator-Variable,optList,this,2,0.0047927992,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(<mask>, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1101,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,614,18547,18553,IdentifierMutator-Variable,optList,obj,3,0.0028694868,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(<mask>, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1102,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,614,18547,18553,IdentifierMutator-Variable,optList,group,4,0.001964149,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(<mask>, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1103,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,614,18556,18574,MethodCallMutator,getOptionComparator,reverse,0,0.3387597,<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList,<mask>());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1104,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,614,18556,18574,MethodCallMutator,getOptionComparator,size,1,0.2726531,<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList,<mask>());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1105,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,614,18556,18574,MethodCallMutator,getOptionComparator,iterator,2,0.21314102,<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList,<mask>());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1106,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,614,18556,18574,MethodCallMutator,getOptionComparator,comparing,3,0.019079534,<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList,<mask>());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1107,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,614,18556,18574,MethodCallMutator,getOptionComparator,order,4,0.017819326,<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList,<mask>());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1108,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,616,18660,18667,MethodCallMutator,iterator,iter,1,0.029476186,optList.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.<mask>(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1109,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,616,18660,18667,MethodCallMutator,iterator,Iterator,2,0.004538903,optList.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.<mask>(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1110,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,616,18660,18667,MethodCallMutator,iterator,values,3,8.739083E-5,optList.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.<mask>(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1111,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,616,18660,18667,MethodCallMutator,iterator,next,4,7.757239E-5,optList.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.<mask>(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1112,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,616,18652,18658,IdentifierMutator-Variable,optList,group,0,0.62880623,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i =<mask>.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1113,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,616,18652,18658,IdentifierMutator-Variable,optList,list,1,0.19007808,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i =<mask>.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1114,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,616,18652,18658,IdentifierMutator-Variable,optList,option,2,0.08251809,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i =<mask>.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1115,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,616,18652,18658,IdentifierMutator-Variable,optList,options,3,0.028824657,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i =<mask>.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1116,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,616,18652,18658,IdentifierMutator-Variable,optList,groups,4,0.008076827,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i =<mask>.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1117,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,616,18674,18680,MethodCallMutator,hasNext,next,0,0.9880741,i.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.<mask>();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1118,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,616,18674,18680,MethodCallMutator,hasNext,valid,1,0.0036906106,i.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.<mask>();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1119,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,616,18674,18680,MethodCallMutator,hasNext,Next,2,0.0018561095,i.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.<mask>();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1120,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,616,18674,18680,MethodCallMutator,hasNext,has,3,6.490923E-4,i.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.<mask>();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1121,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,616,18674,18680,MethodCallMutator,hasNext,close,4,4.918379E-4,i.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.<mask>();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1122,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,616,18672,18672,IdentifierMutator-Variable,i,I,2,1.18828146E-4,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator();<mask>.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1123,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,616,18672,18672,IdentifierMutator-Variable,i,it,3,8.091877E-5,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator();<mask>.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1124,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,616,18672,18672,IdentifierMutator-Variable,i,I,4,5.983996E-5,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator();<mask>.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1125,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,619,18787,18798,MethodCallMutator,appendOption,append,0,0.276628,"<mask>(buff, ((Option) (i.next())), true)","void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level<mask>(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1126,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,619,18787,18798,MethodCallMutator,appendOption,check,1,0.08281146,"<mask>(buff, ((Option) (i.next())), true)","void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level<mask>(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1127,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,619,18787,18798,MethodCallMutator,appendOption,handle,2,0.046055537,"<mask>(buff, ((Option) (i.next())), true)","void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level<mask>(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1128,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,619,18787,18798,MethodCallMutator,appendOption,print,3,0.022401173,"<mask>(buff, ((Option) (i.next())), true)","void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level<mask>(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1129,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,619,18787,18798,MethodCallMutator,appendOption,write,4,0.022252891,"<mask>(buff, ((Option) (i.next())), true)","void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level<mask>(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1130,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,619,18800,18803,IdentifierMutator-Variable,buff,buffer,1,0.027987285,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(<mask>, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1131,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,619,18800,18803,IdentifierMutator-Variable,buff,bb,2,0.010555297,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(<mask>, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1132,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,619,18800,18803,IdentifierMutator-Variable,buff,b,3,0.0056803576,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(<mask>, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1133,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,619,18800,18803,IdentifierMutator-Variable,buff,bg,4,0.0032942046,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(<mask>, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1134,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,619,18817,18820,MethodCallMutator,next,value,1,0.0022892412,((Option) (i.<mask>())),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.<mask>(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1135,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,619,18817,18820,MethodCallMutator,next,object,3,1.3410063E-4,((Option) (i.<mask>())),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.<mask>(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1136,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,619,18817,18820,MethodCallMutator,next,current,4,8.000844E-5,((Option) (i.<mask>())),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.<mask>(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1137,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,619,18815,18815,IdentifierMutator-Variable,i,I,2,6.027E-5,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option)<mask>.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1138,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,619,18815,18815,IdentifierMutator-Variable,i,it,3,3.112655E-5,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option)<mask>.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1139,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,619,18815,18815,IdentifierMutator-Variable,i,I,4,2.5222078E-5,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option)<mask>.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1140,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,619,18825,18828,IdentifierMutator-Literal,true,group,0,0.6586781,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(),<mask>);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1141,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,619,18825,18828,IdentifierMutator-Literal,true,false,2,0.082098246,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(),<mask>);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1142,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,619,18825,18828,IdentifierMutator-Literal,true,null,3,0.03541767,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(),<mask>);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1143,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,619,18825,18828,IdentifierMutator-Literal,true,i,4,0.020193662,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(),<mask>);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1144,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,621,18851,18857,MethodCallMutator,hasNext,next,0,0.9565765,i.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.<mask>())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1145,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,621,18851,18857,MethodCallMutator,hasNext,value,1,0.0033031453,i.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.<mask>())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1146,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,621,18851,18857,MethodCallMutator,hasNext,valid,2,0.0031458654,i.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.<mask>())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1147,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,621,18851,18857,MethodCallMutator,hasNext,more,3,0.0031384996,i.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.<mask>())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1148,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,621,18851,18857,MethodCallMutator,hasNext,Next,4,0.003097737,i.<mask>(),"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.<mask>())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1149,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,621,18849,18849,IdentifierMutator-Variable,i,group,1,0.0035730647,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (<mask>.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1150,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,621,18849,18849,IdentifierMutator-Variable,i,I,2,0.0027453906,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (<mask>.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1151,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,621,18849,18849,IdentifierMutator-Variable,i,b,3,0.0016943762,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (<mask>.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1152,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,623,18897,18902,MethodCallMutator,append,join,1,2.7412697E-4,"buff.<mask>("" | "")","Buffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.<mask>("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1153,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,623,18897,18902,MethodCallMutator,append,end,2,7.79965E-5,"buff.<mask>("" | "")","Buffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.<mask>("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1154,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,623,18897,18902,MethodCallMutator,append,write,3,7.73975E-5,"buff.<mask>("" | "")","Buffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.<mask>("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1155,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,623,18897,18902,MethodCallMutator,append,add,4,6.0662456E-5,"buff.<mask>("" | "")","Buffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.<mask>("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1156,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,623,18892,18895,IdentifierMutator-Variable,buff,buffer,1,0.0020723306,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {<mask>.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1157,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,623,18892,18895,IdentifierMutator-Variable,buff,buf,3,2.0724068E-4,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {<mask>.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1158,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,623,18892,18895,IdentifierMutator-Variable,buff,b,4,1.6870092E-4,<mask>,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {<mask>.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1159,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,623,18904,18908,IdentifierMutator-Literal,"""|""","[""",0,0.48147556,<mask>,", final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append(<mask>);
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1160,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,623,18904,18908,IdentifierMutator-Literal,"""|""","['",1,0.18490274,<mask>,", final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append(<mask>);
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1161,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,623,18904,18908,IdentifierMutator-Literal,"""|""",[],2,0.1119785,<mask>,", final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append(<mask>);
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1162,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,623,18904,18908,IdentifierMutator-Literal,"""|""",[,3,0.04186782,<mask>,", final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append(<mask>);
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1163,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,623,18904,18908,IdentifierMutator-Literal,"""|""",],4,0.026078982,<mask>,", final OptionGroup group)
    {
        if (!group.isRequired())
        {
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append(<mask>);
            }
        }

        if (!group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1164,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,627,18949,18949,UnaryOperatorMutator,!,?,2,0.024188276,<mask>group.isRequired(),"
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (<mask>group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1165,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,627,18949,18949,UnaryOperatorMutator,!,--,3,0.00691604,<mask>group.isRequired(),"
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (<mask>group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1166,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,627,18949,18949,UnaryOperatorMutator,!,...,4,0.004702672,<mask>group.isRequired(),"
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (<mask>group.isRequired())
        {
            buff.append(""]"");
        }
    }"
1167,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,627,18956,18965,MethodCallMutator,isRequired,empty,0,0.12899518,group.<mask>(),"           buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.<mask>())
        {
            buff.append(""]"");
        }
    }"
1168,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,627,18956,18965,MethodCallMutator,isRequired,required,1,0.12298621,group.<mask>(),"           buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.<mask>())
        {
            buff.append(""]"");
        }
    }"
1169,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,627,18956,18965,MethodCallMutator,isRequired,optional,2,0.067141086,group.<mask>(),"           buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.<mask>())
        {
            buff.append(""]"");
        }
    }"
1170,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,627,18956,18965,MethodCallMutator,isRequired,help,3,0.034429282,group.<mask>(),"           buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.<mask>())
        {
            buff.append(""]"");
        }
    }"
1171,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,627,18956,18965,MethodCallMutator,isRequired,get,4,0.030637756,group.<mask>(),"           buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.<mask>())
        {
            buff.append(""]"");
        }
    }"
1172,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,627,18950,18954,IdentifierMutator-Variable,group,option,1,0.27316588,<mask>,"
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!<mask>.isRequired())
        {
            buff.append(""]"");
        }
    }"
1173,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,627,18950,18954,IdentifierMutator-Variable,group,i,2,0.061290562,<mask>,"
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!<mask>.isRequired())
        {
            buff.append(""]"");
        }
    }"
1174,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,627,18950,18954,IdentifierMutator-Variable,group,g,3,0.012617903,<mask>,"
            buff.append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!<mask>.isRequired())
        {
            buff.append(""]"");
        }
    }"
1175,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,629,18997,19002,MethodCallMutator,append,join,1,5.9115846E-4,"buff.<mask>(""]"")","        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.<mask>(""]"");
        }
    }"
1176,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,629,18997,19002,MethodCallMutator,append,write,2,4.251325E-4,"buff.<mask>(""]"")","        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.<mask>(""]"");
        }
    }"
1177,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,629,18997,19002,MethodCallMutator,append,push,3,3.1250712E-4,"buff.<mask>(""]"")","        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.<mask>(""]"");
        }
    }"
1178,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,629,18997,19002,MethodCallMutator,append,end,4,1.9779622E-4,"buff.<mask>(""]"")","        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.<mask>(""]"");
        }
    }"
1179,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,629,18992,18995,IdentifierMutator-Variable,buff,buffer,1,0.0055264276,<mask>,"append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {<mask>.append(""]"");
        }
    }"
1180,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,629,18992,18995,IdentifierMutator-Variable,buff,buf,3,4.4397096E-4,<mask>,"append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {<mask>.append(""]"");
        }
    }"
1181,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,629,18992,18995,IdentifierMutator-Variable,buff,text,4,1.6274223E-4,<mask>,"append(""["");
        }

        List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {<mask>.append(""]"");
        }
    }"
1182,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,629,19004,19006,IdentifierMutator-Literal,"""]""","""",0,0.43138197,<mask>,"      List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(<mask>);
        }
    }"
1183,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,629,19004,19006,IdentifierMutator-Literal,"""]""",group,1,0.109499104,<mask>,"      List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(<mask>);
        }
    }"
1184,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,629,19004,19006,IdentifierMutator-Literal,"""]""","""""",2,0.041473117,<mask>,"      List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(<mask>);
        }
    }"
1185,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,629,19004,19006,IdentifierMutator-Literal,"""]""","""",3,0.032387573,<mask>,"      List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(<mask>);
        }
    }"
1186,HelpFormatter.java,appendOptionGroup,"void appendOptionGroup(final StringBuffer buff, final OptionGroup group)",606,629,19004,19006,IdentifierMutator-Literal,"""]""",group,4,0.027884495,<mask>,"      List optList = new ArrayList(group.getOptions());
        Collections.sort(optList, getOptionComparator());
        // for each option in the OptionGroup
        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            // whether the option is required or not is handled at group level
            appendOption(buff, (Option) i.next(), true);

            if (i.hasNext())
            {
                buff.append("" | "");
            }
        }

        if (!group.isRequired())
        {
            buff.append(<mask>);
        }
    }"
1187,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,642,19387,19387,UnaryOperatorMutator,!,un,2,0.0033037465,<mask>required,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (<mask>required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1188,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,642,19387,19387,UnaryOperatorMutator,!,?,3,0.0013581532,<mask>required,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (<mask>required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1189,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,642,19387,19387,UnaryOperatorMutator,!,...,4,0.0012888963,<mask>required,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (<mask>required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1190,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,642,19388,19395,IdentifierMutator-Variable,required,optional,1,0.0066450206,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!<mask>)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1191,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,642,19388,19395,IdentifierMutator-Variable,required,Required,3,4.741811E-4,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!<mask>)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1192,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,642,19388,19395,IdentifierMutator-Variable,required,needed,4,3.2865838E-4,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!<mask>)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1193,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,644,19425,19430,MethodCallMutator,append,end,1,1.19145785E-4,"buff.<mask>(""["")","void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.<mask>(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1194,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,644,19425,19430,MethodCallMutator,append,join,2,8.077784E-5,"buff.<mask>(""["")","void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.<mask>(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1195,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,644,19425,19430,MethodCallMutator,append,write,3,7.625228E-5,"buff.<mask>(""["")","void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.<mask>(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1196,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,644,19425,19430,MethodCallMutator,append,add,4,5.7147805E-5,"buff.<mask>(""["")","void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.<mask>(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1197,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,644,19420,19423,IdentifierMutator-Variable,buff,buffer,2,5.178607E-4,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {<mask>.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1198,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,644,19420,19423,IdentifierMutator-Variable,buff,buf,3,1.2917277E-4,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {<mask>.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1199,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,644,19420,19423,IdentifierMutator-Variable,buff,b,4,1.2398788E-4,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {<mask>.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1200,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,644,19432,19434,IdentifierMutator-Literal,"""[""",option,0,0.71824425,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(<mask>);
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1201,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,644,19432,19434,IdentifierMutator-Literal,"""[""",Option,1,0.01751604,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(<mask>);
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1202,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,644,19432,19434,IdentifierMutator-Literal,"""[""",opt,2,0.017060537,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(<mask>);
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1203,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,644,19432,19434,IdentifierMutator-Literal,"""[""",default,3,0.014829124,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(<mask>);
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1204,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,644,19432,19434,IdentifierMutator-Literal,"""[""",value,4,0.011941427,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(<mask>);
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1205,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,647,19476,19479,BinaryOperatorMutator,!=,==,1,0.4175751,option.getOpt() <mask> null,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt()<mask>null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1206,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,647,19476,19479,BinaryOperatorMutator,!=,==,2,0.036504984,option.getOpt() <mask> null,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt()<mask>null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1207,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,647,19476,19479,BinaryOperatorMutator,!=,=,3,0.0357412,option.getOpt() <mask> null,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt()<mask>null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1208,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,647,19476,19479,BinaryOperatorMutator,!=,!,4,0.0022215198,option.getOpt() <mask> null,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt()<mask>null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1209,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,647,19468,19473,MethodCallMutator,getOpt,get,0,0.3751845,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.<mask>() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1210,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,647,19468,19473,MethodCallMutator,getOpt,opt,1,0.33454996,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.<mask>() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1211,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,647,19468,19473,MethodCallMutator,getOpt,option,2,0.0697267,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.<mask>() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1212,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,647,19468,19473,MethodCallMutator,getOpt,Opt,3,0.05955458,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.<mask>() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1213,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,647,19468,19473,MethodCallMutator,getOpt,value,4,0.021586979,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.<mask>() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1214,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,647,19461,19466,IdentifierMutator-Variable,option,options,1,1.3935435E-4,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (<mask>.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1215,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,647,19461,19466,IdentifierMutator-Variable,option,Option,3,2.3828807E-5,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (<mask>.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1216,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,647,19461,19466,IdentifierMutator-Variable,option,section,4,1.5130284E-5,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (<mask>.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1217,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,647,19480,19483,IdentifierMutator-Literal,null,"""""",1,0.0010652354,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() !=<mask>)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1218,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,647,19480,19483,IdentifierMutator-Literal,null,0,3,4.949516E-4,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() !=<mask>)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1219,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,647,19480,19483,IdentifierMutator-Literal,null,NULL,4,2.9551503E-4,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() !=<mask>)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1220,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19525,19530,MethodCallMutator,append,end,1,3.6543648E-4,"buff.<mask>(""-"").<mask>(option.getOpt())","void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").<mask>(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1221,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19525,19530,MethodCallMutator,append,join,2,1.7246892E-4,"buff.<mask>(""-"").<mask>(option.getOpt())","void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").<mask>(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1222,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19525,19530,MethodCallMutator,append,add,3,7.726893E-5,"buff.<mask>(""-"").<mask>(option.getOpt())","void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").<mask>(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1223,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19513,19518,MethodCallMutator,append,end,1,7.952381E-5,"buff.<mask>(""-"")","void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.<mask>(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1224,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19513,19518,MethodCallMutator,append,join,2,1.3238253E-5,"buff.<mask>(""-"")","void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.<mask>(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1225,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19513,19518,MethodCallMutator,append,add,3,9.796359E-6,"buff.<mask>(""-"")","void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.<mask>(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1226,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19513,19518,MethodCallMutator,append,replace,4,6.766405E-6,"buff.<mask>(""-"")","void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.<mask>(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1227,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19508,19511,IdentifierMutator-Variable,buff,buffer,2,1.7905458E-4,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {<mask>.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1228,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19508,19511,IdentifierMutator-Variable,buff,b,3,3.3352393E-5,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {<mask>.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1229,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19508,19511,IdentifierMutator-Variable,buff,buf,4,3.1290823E-5,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {<mask>.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1230,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19520,19522,IdentifierMutator-Literal,"""-""",--,0,0.5343585,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(<mask>).append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1231,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19520,19522,IdentifierMutator-Literal,"""-""",-,1,0.034855414,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(<mask>).append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1232,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19520,19522,IdentifierMutator-Literal,"""-""",++,2,0.033515617,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(<mask>).append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1233,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19520,19522,IdentifierMutator-Literal,"""-""","-""",3,0.024615066,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(<mask>).append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1234,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19520,19522,IdentifierMutator-Literal,"""-""","''",4,0.017888946,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(<mask>).append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1235,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19539,19544,MethodCallMutator,getOpt,get,0,0.37431717,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.<mask>());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1236,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19539,19544,MethodCallMutator,getOpt,opt,1,0.35626286,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.<mask>());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1237,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19539,19544,MethodCallMutator,getOpt,option,2,0.05706455,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.<mask>());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1238,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19539,19544,MethodCallMutator,getOpt,help,3,0.04328336,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.<mask>());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1239,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19539,19544,MethodCallMutator,getOpt,name,4,0.011524909,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.<mask>());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1240,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19532,19537,IdentifierMutator-Variable,option,options,2,7.648863E-5,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(<mask>.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1241,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19532,19537,IdentifierMutator-Variable,option,Option,3,2.611409E-5,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(<mask>.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1242,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,649,19532,19537,IdentifierMutator-Variable,option,section,4,1.2444436E-5,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(<mask>.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1243,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19613,19618,MethodCallMutator,append,join,1,4.491559E-4,"buff.<mask>(""--"").<mask>(option.getLongOpt())","void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").<mask>(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1244,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19613,19618,MethodCallMutator,append,end,2,3.0196743E-4,"buff.<mask>(""--"").<mask>(option.getLongOpt())","void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").<mask>(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1245,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19613,19618,MethodCallMutator,append,add,3,9.012378E-5,"buff.<mask>(""--"").<mask>(option.getLongOpt())","void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").<mask>(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1246,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19613,19618,MethodCallMutator,append,format,4,8.838029E-5,"buff.<mask>(""--"").<mask>(option.getLongOpt())","void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").<mask>(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1247,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19600,19605,MethodCallMutator,append,join,1,9.6996075E-5,"buff.<mask>(""--"")","void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.<mask>(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1248,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19600,19605,MethodCallMutator,append,end,2,9.122912E-5,"buff.<mask>(""--"")","void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.<mask>(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1249,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19600,19605,MethodCallMutator,append,add,3,2.1016722E-5,"buff.<mask>(""--"")","void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.<mask>(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1250,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19600,19605,MethodCallMutator,append,replace,4,1.876761E-5,"buff.<mask>(""--"")","void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.<mask>(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1251,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19595,19598,IdentifierMutator-Variable,buff,buffer,2,3.8794315E-4,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {<mask>.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1252,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19595,19598,IdentifierMutator-Variable,buff,buf,3,6.716728E-5,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {<mask>.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1253,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19595,19598,IdentifierMutator-Variable,buff,b,4,4.954806E-5,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {<mask>.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1254,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19607,19610,IdentifierMutator-Literal,"""--""",-,0,0.19198054,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(<mask>).append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1255,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19607,19610,IdentifierMutator-Literal,"""--""",--,1,0.12199093,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(<mask>).append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1256,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19607,19610,IdentifierMutator-Literal,"""--""",+,2,0.059583273,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(<mask>).append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1257,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19607,19610,IdentifierMutator-Literal,"""--""","-""",3,0.057882857,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(<mask>).append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1258,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19607,19610,IdentifierMutator-Literal,"""--""","-'",4,0.037964415,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(<mask>).append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1259,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19627,19636,MethodCallMutator,getLongOpt,help,0,0.29971743,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.<mask>());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1260,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19627,19636,MethodCallMutator,getLongOpt,get,1,0.16777036,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.<mask>());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1261,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19627,19636,MethodCallMutator,getLongOpt,name,2,0.088797286,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.<mask>());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1262,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19627,19636,MethodCallMutator,getLongOpt,opt,3,0.08251549,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.<mask>());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1263,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19627,19636,MethodCallMutator,getLongOpt,option,4,0.036122065,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.<mask>());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1264,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19620,19625,IdentifierMutator-Variable,option,options,2,0.0010265149,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(<mask>.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1265,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19620,19625,IdentifierMutator-Variable,option,Option,3,8.244206E-4,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(<mask>.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1266,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,653,19620,19625,IdentifierMutator-Variable,option,section,4,3.6233725E-4,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(<mask>.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1267,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19749,19752,BinaryOperatorMutator,&&,&,2,0.02966818,option.hasArg() <mask> ((option.getArgName() == null) || (option.getArgName().length() != 0)),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg()<mask>(option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1268,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19749,19752,BinaryOperatorMutator,&&,AND,3,0.015941322,option.hasArg() <mask> ((option.getArgName() == null) || (option.getArgName().length() != 0)),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg()<mask>(option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1269,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19749,19752,BinaryOperatorMutator,&&,&,4,0.006239545,option.hasArg() <mask> ((option.getArgName() == null) || (option.getArgName().length() != 0)),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg()<mask>(option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1270,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19741,19746,MethodCallMutator,hasArg,value,0,0.4349135,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.<mask>() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1271,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19741,19746,MethodCallMutator,hasArg,has,1,0.25739822,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.<mask>() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1272,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19741,19746,MethodCallMutator,hasArg,get,2,0.08199807,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.<mask>() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1273,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19741,19746,MethodCallMutator,hasArg,required,3,0.018889204,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.<mask>() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1274,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19741,19746,MethodCallMutator,hasArg,show,4,0.01871613,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.<mask>() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1275,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19734,19739,IdentifierMutator-Variable,option,Option,1,0.0015443772,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (<mask>.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1276,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19734,19739,IdentifierMutator-Variable,option,options,2,0.0010745564,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (<mask>.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1277,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19734,19739,IdentifierMutator-Variable,option,argument,4,2.5496093E-4,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (<mask>.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1278,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19781,19784,BinaryOperatorMutator,||,&&,1,0.015010383,(option.getArgName() == null) <mask> (option.getArgName().length() != 0),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null<mask>option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1279,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19781,19784,BinaryOperatorMutator,||,&&,3,0.0077407993,(option.getArgName() == null) <mask> (option.getArgName().length() != 0),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null<mask>option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1280,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19781,19784,BinaryOperatorMutator,||,|,4,0.0024838815,(option.getArgName() == null) <mask> (option.getArgName().length() != 0),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null<mask>option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1281,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19773,19776,BinaryOperatorMutator,==,!=,2,0.07028406,option.getArgName() <mask> null,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName()<mask>null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1282,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19773,19776,BinaryOperatorMutator,==,=,3,0.018842446,option.getArgName() <mask> null,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName()<mask>null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1283,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19773,19776,BinaryOperatorMutator,==,>,4,0.0011493374,option.getArgName() <mask> null,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName()<mask>null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1284,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19761,19770,MethodCallMutator,getArgName,value,0,0.7917669,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.<mask>() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1285,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19761,19770,MethodCallMutator,getArgName,val,1,0.11942225,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.<mask>() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1286,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19761,19770,MethodCallMutator,getArgName,arg,2,0.01762883,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.<mask>() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1287,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19761,19770,MethodCallMutator,getArgName,default,3,0.01710794,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.<mask>() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1288,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19761,19770,MethodCallMutator,getArgName,get,4,0.006874091,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.<mask>() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1289,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19754,19759,IdentifierMutator-Variable,option,Option,2,1.8792895E-4,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (<mask>.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1290,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19754,19759,IdentifierMutator-Variable,option,options,3,1.266904E-4,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (<mask>.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1291,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19754,19759,IdentifierMutator-Variable,option,argument,4,6.98247E-5,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (<mask>.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1292,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19777,19780,IdentifierMutator-Literal,null,"""""",1,0.004752508,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() ==<mask> || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1293,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19777,19780,IdentifierMutator-Literal,null,"''",2,6.1163615E-4,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() ==<mask> || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1294,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19777,19780,IdentifierMutator-Literal,null,0,3,5.230808E-4,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() ==<mask> || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1295,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19777,19780,IdentifierMutator-Literal,null,nil,4,4.0595673E-4,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() ==<mask> || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1296,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19813,19816,BinaryOperatorMutator,!=,==,0,0.70262486,option.getArgName().length() <mask> 0,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length()<mask>0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1297,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19813,19816,BinaryOperatorMutator,!=,>,1,0.1945411,option.getArgName().length() <mask> 0,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length()<mask>0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1298,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19813,19816,BinaryOperatorMutator,!=,==,2,0.07306529,option.getArgName().length() <mask> 0,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length()<mask>0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1299,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19813,19816,BinaryOperatorMutator,!=,>,3,0.0083556855,option.getArgName().length() <mask> 0,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length()<mask>0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1300,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19813,19816,BinaryOperatorMutator,!=,=,4,0.0070146187,option.getArgName().length() <mask> 0,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length()<mask>0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1301,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19805,19810,MethodCallMutator,length,size,1,0.0018928258,option.getArgName().<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().<mask>() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1302,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19805,19810,MethodCallMutator,length,len,2,0.0011452727,option.getArgName().<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().<mask>() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1303,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19805,19810,MethodCallMutator,length,width,3,3.2168877E-4,option.getArgName().<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().<mask>() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1304,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19805,19810,MethodCallMutator,length,count,4,2.2619477E-4,option.getArgName().<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().<mask>() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1305,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19792,19801,MethodCallMutator,getArgName,value,0,0.51253617,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.<mask>().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1306,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19792,19801,MethodCallMutator,getArgName,arg,1,0.22604614,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.<mask>().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1307,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19792,19801,MethodCallMutator,getArgName,val,2,0.087529205,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.<mask>().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1308,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19792,19801,MethodCallMutator,getArgName,args,3,0.05243362,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.<mask>().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1309,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19792,19801,MethodCallMutator,getArgName,Arg,4,0.037295286,option.<mask>(),"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.<mask>().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1310,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19785,19790,IdentifierMutator-Variable,option,options,1,3.7234966E-4,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null ||<mask>.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1311,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19785,19790,IdentifierMutator-Variable,option,argument,3,7.552193E-5,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null ||<mask>.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1312,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19785,19790,IdentifierMutator-Variable,option,Option,4,3.80031E-5,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null ||<mask>.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1313,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19817,19817,IdentifierMutator-Literal,0,1,1,0.020872071,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() !=<mask>))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1314,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19817,19817,IdentifierMutator-Literal,0,null,2,0.001317168,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() !=<mask>))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1315,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19817,19817,IdentifierMutator-Literal,0,"""""",3,0.0013146003,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() !=<mask>))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1316,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,657,19817,19817,IdentifierMutator-Literal,0,2,4,7.2366104E-4,<mask>,"void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() !=<mask>))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1317,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19848,19853,MethodCallMutator,append,end,1,9.747151E-5,"buff.<mask>(option.getOpt() == null ? longOptSeparator : "" "")","   {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.<mask>(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1318,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19848,19853,MethodCallMutator,append,add,2,7.644471E-5,"buff.<mask>(option.getOpt() == null ? longOptSeparator : "" "")","   {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.<mask>(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1319,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19848,19853,MethodCallMutator,append,join,3,6.768726E-5,"buff.<mask>(option.getOpt() == null ? longOptSeparator : "" "")","   {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.<mask>(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1320,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19848,19853,MethodCallMutator,append,write,4,6.433693E-5,"buff.<mask>(option.getOpt() == null ? longOptSeparator : "" "")","   {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.<mask>(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1321,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19843,19846,IdentifierMutator-Variable,buff,buffer,2,6.5265736E-4,<mask>," StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {<mask>.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1322,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19843,19846,IdentifierMutator-Variable,buff,b,3,2.4570772E-4,<mask>," StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {<mask>.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1323,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19843,19846,IdentifierMutator-Variable,buff,buf,4,2.1957315E-4,<mask>," StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {<mask>.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1324,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19855,19902,IdentifierMutator-Conditional,"option.getOpt()==null?longOptSeparator:""""",value,0,0.28783697,<mask>," {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(<mask>);
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1325,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19855,19902,IdentifierMutator-Conditional,"option.getOpt()==null?longOptSeparator:""""",option,1,0.13429762,<mask>," {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(<mask>);
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1326,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19855,19902,IdentifierMutator-Conditional,"option.getOpt()==null?longOptSeparator:""""","\""",2,0.030677408,<mask>," {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(<mask>);
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1327,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19855,19902,IdentifierMutator-Conditional,"option.getOpt()==null?longOptSeparator:""""",--,3,0.029022302,<mask>," {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(<mask>);
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1328,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19855,19902,IdentifierMutator-Conditional,"option.getOpt()==null?longOptSeparator:""""","['",4,0.020015337,<mask>," {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(<mask>);
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1329,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19870,19873,BinaryOperatorMutator,==,!=,0,0.5370365,option.getOpt() <mask> null,"     if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt()<mask>null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1330,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19870,19873,BinaryOperatorMutator,==,=,3,0.008479612,option.getOpt() <mask> null,"     if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt()<mask>null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1331,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19870,19873,BinaryOperatorMutator,==,>,4,0.001576337,option.getOpt() <mask> null,"     if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt()<mask>null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1332,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19862,19867,MethodCallMutator,getOpt,value,0,0.6795015,option.<mask>(),"        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.<mask>() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1333,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19862,19867,MethodCallMutator,getOpt,val,1,0.11388078,option.<mask>(),"        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.<mask>() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1334,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19862,19867,MethodCallMutator,getOpt,arg,2,0.046141453,option.<mask>(),"        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.<mask>() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1335,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19862,19867,MethodCallMutator,getOpt,default,3,0.020826759,option.<mask>(),"        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.<mask>() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1336,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19862,19867,MethodCallMutator,getOpt,get,4,0.019215185,option.<mask>(),"        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.<mask>() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1337,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19855,19860,IdentifierMutator-Variable,option,Option,1,4.3249712E-4,<mask>," {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(<mask>.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1338,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19855,19860,IdentifierMutator-Variable,option,options,2,3.3353793E-4,<mask>," {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(<mask>.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1339,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19855,19860,IdentifierMutator-Variable,option,section,4,2.2945752E-4,<mask>," {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(<mask>.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1340,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19874,19877,IdentifierMutator-Literal,null,true,1,0.018724432,<mask>,"    if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() ==<mask> ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1341,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19874,19877,IdentifierMutator-Literal,null,false,2,0.004198332,<mask>,"    if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() ==<mask> ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1342,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19874,19877,IdentifierMutator-Literal,null,0,3,0.0019588808,<mask>,"    if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() ==<mask> ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1343,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19874,19877,IdentifierMutator-Literal,null,1,4,0.0019054674,<mask>,"    if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() ==<mask> ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1344,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19881,19896,IdentifierMutator-Variable,longOptSeparator,"""""",0,0.9701754,<mask>,"  if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ?<mask> : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1345,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19881,19896,IdentifierMutator-Variable,longOptSeparator,"''",1,0.016318968,<mask>,"  if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ?<mask> : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1346,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19881,19896,IdentifierMutator-Variable,longOptSeparator,null,2,0.003077886,<mask>,"  if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ?<mask> : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1347,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19881,19896,IdentifierMutator-Variable,longOptSeparator,"""",3,0.002298848,<mask>,"  if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ?<mask> : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1348,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19881,19896,IdentifierMutator-Variable,longOptSeparator,option,4,0.0012982596,<mask>,"  if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ?<mask> : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1349,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19881,19896,FieldReferenceMutator,longOptSeparator,"""""",0,0.9701754,<mask>,"  if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ?<mask> : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1350,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19881,19896,FieldReferenceMutator,longOptSeparator,"''",1,0.016318968,<mask>,"  if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ?<mask> : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1351,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19881,19896,FieldReferenceMutator,longOptSeparator,null,2,0.003077886,<mask>,"  if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ?<mask> : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1352,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19881,19896,FieldReferenceMutator,longOptSeparator,"""",3,0.002298848,<mask>,"  if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ?<mask> : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1353,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19881,19896,FieldReferenceMutator,longOptSeparator,option,4,0.0012982596,<mask>,"  if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ?<mask> : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1354,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19900,19902,IdentifierMutator-Literal,"""""","''",1,0.13747406,<mask>,"        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator :<mask>);
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1355,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19900,19902,IdentifierMutator-Literal,"""""",option,2,0.09699879,<mask>,"        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator :<mask>);
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1356,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19900,19902,IdentifierMutator-Literal,"""""",opt,3,0.03241504,<mask>,"        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator :<mask>);
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1357,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,659,19900,19902,IdentifierMutator-Literal,"""""",null,4,0.022275917,<mask>,"        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator :<mask>);
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1358,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,20008,20013,MethodCallMutator,append,join,1,0.019080017,"buff.<mask>(""<"").<mask>(option.getArgName() != null ? option.getArgName() : getArgName()).<mask>("">"")"," (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).<mask>("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1359,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,20008,20013,MethodCallMutator,append,format,2,0.0016553365,"buff.<mask>(""<"").<mask>(option.getArgName() != null ? option.getArgName() : getArgName()).<mask>("">"")"," (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).<mask>("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1360,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,20008,20013,MethodCallMutator,append,replace,3,0.0014060105,"buff.<mask>(""<"").<mask>(option.getArgName() != null ? option.getArgName() : getArgName()).<mask>("">"")"," (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).<mask>("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1361,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,20008,20013,MethodCallMutator,append,strip,4,8.2692463E-4,"buff.<mask>(""<"").<mask>(option.getArgName() != null ? option.getArgName() : getArgName()).<mask>("">"")"," (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).<mask>("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1362,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19935,19940,MethodCallMutator,append,escape,1,0.004056588,"buff.<mask>(""<"").<mask>(option.getArgName() != null ? option.getArgName() : getArgName())",".append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").<mask>(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1363,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19935,19940,MethodCallMutator,append,format,2,0.003192706,"buff.<mask>(""<"").<mask>(option.getArgName() != null ? option.getArgName() : getArgName())",".append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").<mask>(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1364,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19935,19940,MethodCallMutator,append,add,3,0.0027546058,"buff.<mask>(""<"").<mask>(option.getArgName() != null ? option.getArgName() : getArgName())",".append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").<mask>(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1365,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19935,19940,MethodCallMutator,append,join,4,0.0026193298,"buff.<mask>(""<"").<mask>(option.getArgName() != null ? option.getArgName() : getArgName())",".append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").<mask>(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1366,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19923,19928,MethodCallMutator,append,end,1,2.890849E-4,"buff.<mask>(""<"")","    buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.<mask>(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1367,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19923,19928,MethodCallMutator,append,join,2,2.6424098E-4,"buff.<mask>(""<"")","    buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.<mask>(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1368,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19923,19928,MethodCallMutator,append,add,3,1.3362327E-4,"buff.<mask>(""<"")","    buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.<mask>(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1369,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19923,19928,MethodCallMutator,append,push,4,3.9940027E-5,"buff.<mask>(""<"")","    buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.<mask>(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1370,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19918,19921,IdentifierMutator-Variable,buff,buffer,2,2.1896721E-4,<mask>,"     {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");<mask>.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1371,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19918,19921,IdentifierMutator-Variable,buff,buffer,3,8.3666855E-5,<mask>,"     {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");<mask>.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1372,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19918,19921,IdentifierMutator-Variable,buff,text,4,7.4552285E-5,<mask>,"     {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");<mask>.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1373,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19930,19932,IdentifierMutator-Literal,"""<""","['",0,0.1004955,<mask>,"  buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(<mask>).append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1374,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19930,19932,IdentifierMutator-Literal,"""<""","\""",1,0.053584874,<mask>,"  buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(<mask>).append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1375,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19930,19932,IdentifierMutator-Literal,"""<""",prefix,2,0.043004375,<mask>,"  buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(<mask>).append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1376,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19930,19932,IdentifierMutator-Literal,"""<""",option,3,0.037612353,<mask>,"  buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(<mask>).append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1377,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19930,19932,IdentifierMutator-Literal,"""<""",tag,4,0.03523128,<mask>,"  buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(<mask>).append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1378,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19942,20005,IdentifierMutator-Conditional,option.getArgName()!=null?option.getArgName():getArgName(),option,0,0.6013893,<mask>,"(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(<mask>).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1379,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19942,20005,IdentifierMutator-Conditional,option.getArgName()!=null?option.getArgName():getArgName(),value,1,0.20922267,<mask>,"(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(<mask>).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1380,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19942,20005,IdentifierMutator-Conditional,option.getArgName()!=null?option.getArgName():getArgName(),name,2,0.01889707,<mask>,"(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(<mask>).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1381,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19942,20005,IdentifierMutator-Conditional,option.getArgName()!=null?option.getArgName():getArgName(),opt,3,0.012828817,<mask>,"(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(<mask>).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1382,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19942,20005,IdentifierMutator-Conditional,option.getArgName()!=null?option.getArgName():getArgName(),argument,4,0.011034385,<mask>,"(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(<mask>).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1383,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19961,19964,BinaryOperatorMutator,!=,==,1,0.018029904,option.getArgName() <mask> null,"      }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName()<mask>null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1384,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19961,19964,BinaryOperatorMutator,!=,==,2,0.014128369,option.getArgName() <mask> null,"      }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName()<mask>null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1385,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19961,19964,BinaryOperatorMutator,!=,=,3,9.513654E-4,option.getArgName() <mask> null,"      }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName()<mask>null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1386,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19961,19964,BinaryOperatorMutator,!=,>,4,3.2985842E-4,option.getArgName() <mask> null,"      }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName()<mask>null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1387,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19949,19958,MethodCallMutator,getArgName,get,0,0.43715602,option.<mask>(),");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.<mask>() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1388,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19949,19958,MethodCallMutator,getArgName,arg,1,0.14015426,option.<mask>(),");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.<mask>() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1389,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19949,19958,MethodCallMutator,getArgName,value,2,0.13799638,option.<mask>(),");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.<mask>() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1390,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19949,19958,MethodCallMutator,getArgName,name,3,0.04071648,option.<mask>(),");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.<mask>() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1391,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19949,19958,MethodCallMutator,getArgName,val,4,0.03521232,option.<mask>(),");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.<mask>() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1392,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19942,19947,IdentifierMutator-Variable,option,Option,2,3.7062512E-4,<mask>,"(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(<mask>.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1393,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19942,19947,IdentifierMutator-Variable,option,options,3,8.295736E-5,<mask>,"(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(<mask>.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1394,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19942,19947,IdentifierMutator-Variable,option,optional,4,2.7290092E-5,<mask>,"(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(<mask>.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1395,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19965,19968,IdentifierMutator-Literal,null,"""""",1,0.0030607034,<mask>,"     }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() !=<mask> ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1396,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19965,19968,IdentifierMutator-Literal,null,nil,2,0.0011576132,<mask>,"     }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() !=<mask> ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1397,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19965,19968,IdentifierMutator-Literal,null,0,3,9.159851E-4,<mask>,"     }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() !=<mask> ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1398,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19965,19968,IdentifierMutator-Literal,null,"''",4,6.752286E-4,<mask>,"     }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() !=<mask> ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1399,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19979,19988,MethodCallMutator,getArgName,value,0,0.52968895,option.<mask>()," }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.<mask>() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1400,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19979,19988,MethodCallMutator,getArgName,val,1,0.12224662,option.<mask>()," }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.<mask>() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1401,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19979,19988,MethodCallMutator,getArgName,name,2,0.08331472,option.<mask>()," }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.<mask>() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1402,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19979,19988,MethodCallMutator,getArgName,get,3,0.0522008,option.<mask>()," }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.<mask>() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1403,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19979,19988,MethodCallMutator,getArgName,arg,4,0.03623169,option.<mask>()," }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.<mask>() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1404,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19972,19977,IdentifierMutator-Variable,option,options,2,1.5905713E-4,<mask>,"   }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ?<mask>.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1405,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19972,19977,IdentifierMutator-Variable,option,argument,3,6.548087E-5,<mask>,"   }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ?<mask>.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1406,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19972,19977,IdentifierMutator-Variable,option,Option,4,2.0282918E-5,<mask>,"   }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ?<mask>.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1407,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19994,20003,MethodCallMutator,getArgName,name,0,0.21441646,<mask>(),"     if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() :<mask>()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1408,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19994,20003,MethodCallMutator,getArgName,empty,1,0.073262125,<mask>(),"     if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() :<mask>()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1409,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19994,20003,MethodCallMutator,getArgName,trim,2,0.06071304,<mask>(),"     if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() :<mask>()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1410,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19994,20003,MethodCallMutator,getArgName,usage,3,0.054631393,<mask>(),"     if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() :<mask>()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1411,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,19994,20003,MethodCallMutator,getArgName,blank,4,0.0510626,<mask>(),"     if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() :<mask>()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1412,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,20015,20017,IdentifierMutator-Literal,""">""",option,0,0.4552264,<mask>,".getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append(<mask>);
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1413,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,20015,20017,IdentifierMutator-Literal,""">""",value,1,0.262192,<mask>,".getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append(<mask>);
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1414,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,20015,20017,IdentifierMutator-Literal,""">""",Option,2,0.01954797,<mask>,".getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append(<mask>);
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1415,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,20015,20017,IdentifierMutator-Literal,""">""",opt,3,0.01820296,<mask>,".getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append(<mask>);
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1416,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,660,20015,20017,IdentifierMutator-Literal,""">""",argument,4,0.017184947,<mask>,".getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append(<mask>);
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }"
1417,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,664,20102,20102,UnaryOperatorMutator,!,un,1,0.023121947,<mask>required,"   }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (<mask>required)
        {
            buff.append(""]"");
        }
    }"
1418,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,664,20102,20102,UnaryOperatorMutator,!,?,3,0.0095017245,<mask>required,"   }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (<mask>required)
        {
            buff.append(""]"");
        }
    }"
1419,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,664,20102,20102,UnaryOperatorMutator,!,not,4,0.00843061,<mask>required,"   }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (<mask>required)
        {
            buff.append(""]"");
        }
    }"
1420,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,664,20103,20110,IdentifierMutator-Variable,required,option,1,0.0051925555,<mask>,"   }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!<mask>)
        {
            buff.append(""]"");
        }
    }"
1421,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,664,20103,20110,IdentifierMutator-Variable,required,optional,2,0.004917769,<mask>,"   }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!<mask>)
        {
            buff.append(""]"");
        }
    }"
1422,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,664,20103,20110,IdentifierMutator-Variable,required,needed,4,0.0014828732,<mask>,"   }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!<mask>)
        {
            buff.append(""]"");
        }
    }"
1423,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,666,20140,20145,MethodCallMutator,append,join,1,0.0011481354,"buff.<mask>(""]"")","         buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.<mask>(""]"");
        }
    }"
1424,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,666,20140,20145,MethodCallMutator,append,push,2,3.0998338E-4,"buff.<mask>(""]"")","         buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.<mask>(""]"");
        }
    }"
1425,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,666,20140,20145,MethodCallMutator,append,write,3,1.7894838E-4,"buff.<mask>(""]"")","         buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.<mask>(""]"");
        }
    }"
1426,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,666,20140,20145,MethodCallMutator,append,end,4,1.7611055E-4,"buff.<mask>(""]"")","         buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.<mask>(""]"");
        }
    }"
1427,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,666,20135,20138,IdentifierMutator-Variable,buff,buffer,2,9.41965E-4,<mask>," else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {<mask>.append(""]"");
        }
    }"
1428,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,666,20135,20138,IdentifierMutator-Variable,buff,buf,3,2.302951E-4,<mask>," else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {<mask>.append(""]"");
        }
    }"
1429,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,666,20135,20138,IdentifierMutator-Variable,buff,ret,4,1.9180866E-4,<mask>," else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {<mask>.append(""]"");
        }
    }"
1430,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,666,20147,20149,IdentifierMutator-Literal,"""]""",option,0,0.464419,<mask>,"       buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(<mask>);
        }
    }"
1431,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,666,20147,20149,IdentifierMutator-Literal,"""]""",value,1,0.0569646,<mask>,"       buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(<mask>);
        }
    }"
1432,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,666,20147,20149,IdentifierMutator-Literal,"""]""",opt,2,0.04939805,<mask>,"       buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(<mask>);
        }
    }"
1433,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,666,20147,20149,IdentifierMutator-Literal,"""]""",Option,3,0.03546192,<mask>,"       buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(<mask>);
        }
    }"
1434,HelpFormatter.java,appendOption,"void appendOption(final StringBuffer buff, final Option option, final boolean required)",640,666,20147,20149,IdentifierMutator-Literal,"""]""",default,4,0.021856003,<mask>,"       buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName() != null ? option.getArgName() : getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(<mask>);
        }
    }"
1435,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20598,20600,BinaryOperatorMutator,+,-,2,0.10454801,"cmdLineSyntax.indexOf(' ') <mask> 1","void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ')<mask>1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1436,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20598,20600,BinaryOperatorMutator,+,-,3,0.039810598,"cmdLineSyntax.indexOf(' ') <mask> 1","void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ')<mask>1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1437,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20598,20600,BinaryOperatorMutator,+,$,4,5.373162E-4,"cmdLineSyntax.indexOf(' ') <mask> 1","void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ')<mask>1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1438,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20586,20592,MethodCallMutator,indexOf,index,0,0.44403115,"cmdLineSyntax.<mask>(' ')","void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.<mask>(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1439,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20586,20592,MethodCallMutator,indexOf,find,1,0.30311614,"cmdLineSyntax.<mask>(' ')","void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.<mask>(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1440,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20586,20592,MethodCallMutator,indexOf,length,2,0.051878225,"cmdLineSyntax.<mask>(' ')","void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.<mask>(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1441,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20586,20592,MethodCallMutator,indexOf,position,3,0.045768317,"cmdLineSyntax.<mask>(' ')","void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.<mask>(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1442,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20586,20592,MethodCallMutator,indexOf,pos,4,0.030582681,"cmdLineSyntax.<mask>(' ')","void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.<mask>(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1443,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20572,20584,IdentifierMutator-Variable,cmdLineSyntax,syntax,0,0.19860916,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos =<mask>.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1444,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20572,20584,IdentifierMutator-Variable,cmdLineSyntax,command,1,0.12086588,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos =<mask>.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1445,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20572,20584,IdentifierMutator-Variable,cmdLineSyntax,usage,2,0.120265335,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos =<mask>.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1446,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20572,20584,IdentifierMutator-Variable,cmdLineSyntax,args,3,0.089220665,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos =<mask>.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1447,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20572,20584,IdentifierMutator-Variable,cmdLineSyntax,line,4,0.05908536,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos =<mask>.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1448,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20594,20596,IdentifierMutator-Literal,"''",help,0,0.101061314,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(<mask>) + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1449,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20594,20596,IdentifierMutator-Literal,"''",Usage,1,0.045875516,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(<mask>) + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1450,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20594,20596,IdentifierMutator-Literal,"''",usage,2,0.04436695,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(<mask>) + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1451,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20594,20596,IdentifierMutator-Literal,"''",command,3,0.039964672,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(<mask>) + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1452,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20594,20596,IdentifierMutator-Literal,"''",prefix,4,0.037724726,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(<mask>) + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1453,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20601,20601,IdentifierMutator-Literal,1,2,1,0.059845116,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') +<mask>;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1454,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20601,20601,IdentifierMutator-Literal,1,width,2,0.031819075,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') +<mask>;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1455,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20601,20601,IdentifierMutator-Literal,1,4,3,0.016297737,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') +<mask>;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1456,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,680,20601,20601,IdentifierMutator-Literal,1,3,4,0.006803276,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') +<mask>;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1457,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20613,20624,MethodCallMutator,printWrapped,print,0,0.4303259,"<mask>(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax)","void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;<mask>(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1458,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20613,20624,MethodCallMutator,printWrapped,usage,1,0.261703,"<mask>(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax)","void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;<mask>(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1459,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20613,20624,MethodCallMutator,printWrapped,println,2,0.089867026,"<mask>(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax)","void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;<mask>(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1460,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20613,20624,MethodCallMutator,printWrapped,format,3,0.06798291,"<mask>(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax)","void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;<mask>(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1461,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20613,20624,MethodCallMutator,printWrapped,printf,4,0.01719835,"<mask>(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax)","void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;<mask>(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1462,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20626,20627,IdentifierMutator-Variable,pw,w,0,0.39621153,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(<mask>, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1463,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20626,20627,IdentifierMutator-Variable,pw,pt,1,0.108480915,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(<mask>, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1464,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20626,20627,IdentifierMutator-Variable,pw,rw,2,0.09231837,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(<mask>, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1465,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20626,20627,IdentifierMutator-Variable,pw,p,3,0.056576967,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(<mask>, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1466,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20626,20627,IdentifierMutator-Variable,pw,pb,4,0.042894952,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(<mask>, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1467,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20630,20634,IdentifierMutator-Variable,width,0,1,7.340393E-4,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw,<mask>, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1468,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20630,20634,IdentifierMutator-Variable,width,true,2,3.9751994E-4,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw,<mask>, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1469,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20630,20634,IdentifierMutator-Variable,width,writer,3,3.0778337E-4,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw,<mask>, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1470,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20630,20634,IdentifierMutator-Variable,width,Width,4,1.8002342E-4,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw,<mask>, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1471,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20665,20667,BinaryOperatorMutator,+,-,2,0.13192159,defaultSyntaxPrefix.length() <mask> argPos,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length()<mask>argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1472,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20665,20667,BinaryOperatorMutator,+,-,3,0.073572196,defaultSyntaxPrefix.length() <mask> argPos,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length()<mask>argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1473,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20665,20667,BinaryOperatorMutator,+,*,4,0.030379692,defaultSyntaxPrefix.length() <mask> argPos,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length()<mask>argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1474,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20657,20662,MethodCallMutator,length,size,1,0.010784237,defaultSyntaxPrefix.<mask>(),"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.<mask>() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1475,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20657,20662,MethodCallMutator,length,position,2,0.007698844,defaultSyntaxPrefix.<mask>(),"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.<mask>() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1476,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20657,20662,MethodCallMutator,length,width,3,0.0019368918,defaultSyntaxPrefix.<mask>(),"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.<mask>() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1477,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20657,20662,MethodCallMutator,length,offset,4,0.0016480662,defaultSyntaxPrefix.<mask>(),"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.<mask>() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1478,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20637,20655,IdentifierMutator-Variable,defaultSyntaxPrefix,syntax,0,0.17208374,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width,<mask>.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1479,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20637,20655,IdentifierMutator-Variable,defaultSyntaxPrefix,usage,1,0.106757246,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width,<mask>.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1480,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20637,20655,IdentifierMutator-Variable,defaultSyntaxPrefix,command,2,0.096766,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width,<mask>.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1481,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20637,20655,IdentifierMutator-Variable,defaultSyntaxPrefix,line,3,0.073910795,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width,<mask>.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1482,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20637,20655,IdentifierMutator-Variable,defaultSyntaxPrefix,args,4,0.048235044,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width,<mask>.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1483,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20637,20655,FieldReferenceMutator,defaultSyntaxPrefix,syntax,0,0.17208374,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width,<mask>.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1484,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20637,20655,FieldReferenceMutator,defaultSyntaxPrefix,usage,1,0.106757246,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width,<mask>.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1485,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20637,20655,FieldReferenceMutator,defaultSyntaxPrefix,command,2,0.096766,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width,<mask>.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1486,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20637,20655,FieldReferenceMutator,defaultSyntaxPrefix,line,3,0.073910795,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width,<mask>.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1487,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20637,20655,FieldReferenceMutator,defaultSyntaxPrefix,args,4,0.048235044,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width,<mask>.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1488,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20668,20673,IdentifierMutator-Variable,argPos,1,0,0.8271185,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() +<mask>, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1489,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20668,20673,IdentifierMutator-Variable,argPos,2,1,0.08512765,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() +<mask>, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1490,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20668,20673,IdentifierMutator-Variable,argPos,4,2,0.02117714,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() +<mask>, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1491,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20668,20673,IdentifierMutator-Variable,argPos,3,3,0.012494762,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() +<mask>, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1492,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20668,20673,IdentifierMutator-Variable,argPos,width,4,0.008174066,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() +<mask>, defaultSyntaxPrefix + cmdLineSyntax);
    }"
1493,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20695,20697,BinaryOperatorMutator,+,",",1,0.16765821,defaultSyntaxPrefix <mask> cmdLineSyntax,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix<mask>cmdLineSyntax);
    }"
1494,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20695,20697,BinaryOperatorMutator,+,.,3,0.042470593,defaultSyntaxPrefix <mask> cmdLineSyntax,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix<mask>cmdLineSyntax);
    }"
1495,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20695,20697,BinaryOperatorMutator,+,_,4,0.009955456,defaultSyntaxPrefix <mask> cmdLineSyntax,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix<mask>cmdLineSyntax);
    }"
1496,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20676,20694,IdentifierMutator-Variable,defaultSyntaxPrefix,"""""",0,0.3830337,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos,<mask> + cmdLineSyntax);
    }"
1497,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20676,20694,IdentifierMutator-Variable,defaultSyntaxPrefix,prefix,1,0.15570068,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos,<mask> + cmdLineSyntax);
    }"
1498,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20676,20694,IdentifierMutator-Variable,defaultSyntaxPrefix,SPACE,2,0.05004893,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos,<mask> + cmdLineSyntax);
    }"
1499,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20676,20694,IdentifierMutator-Variable,defaultSyntaxPrefix,"''",3,0.037141595,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos,<mask> + cmdLineSyntax);
    }"
1500,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20676,20694,IdentifierMutator-Variable,defaultSyntaxPrefix,null,4,0.03131964,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos,<mask> + cmdLineSyntax);
    }"
1501,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20676,20694,FieldReferenceMutator,defaultSyntaxPrefix,"""""",0,0.3830337,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos,<mask> + cmdLineSyntax);
    }"
1502,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20676,20694,FieldReferenceMutator,defaultSyntaxPrefix,prefix,1,0.15570068,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos,<mask> + cmdLineSyntax);
    }"
1503,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20676,20694,FieldReferenceMutator,defaultSyntaxPrefix,SPACE,2,0.05004893,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos,<mask> + cmdLineSyntax);
    }"
1504,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20676,20694,FieldReferenceMutator,defaultSyntaxPrefix,"''",3,0.037141595,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos,<mask> + cmdLineSyntax);
    }"
1505,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20676,20694,FieldReferenceMutator,defaultSyntaxPrefix,null,4,0.03131964,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos,<mask> + cmdLineSyntax);
    }"
1506,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20698,20710,IdentifierMutator-Variable,cmdLineSyntax,1,0,0.22428069,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix +<mask>);
    }"
1507,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20698,20710,IdentifierMutator-Variable,cmdLineSyntax,"""""",1,0.06769013,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix +<mask>);
    }"
1508,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20698,20710,IdentifierMutator-Variable,cmdLineSyntax,syntax,2,0.063642435,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix +<mask>);
    }"
1509,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20698,20710,IdentifierMutator-Variable,cmdLineSyntax,"''",3,0.04931738,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix +<mask>);
    }"
1510,HelpFormatter.java,printUsage,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)",678,682,20698,20710,IdentifierMutator-Variable,cmdLineSyntax,width,4,0.043489993,<mask>,"void printUsage(PrintWriter pw, int width, String cmdLineSyntax)
    {
        int argPos = cmdLineSyntax.indexOf(' ') + 1;

        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix +<mask>);
    }"
1511,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21444,21456,MethodCallMutator,renderOptions,print,0,0.6020555,"<mask>(sb, width, options, leftPad, descPad)","void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();<mask>(sb, width, options, leftPad, descPad);
        pw.println(sb.toString());
    }"
1512,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21444,21456,MethodCallMutator,renderOptions,print,1,0.20770259,"<mask>(sb, width, options, leftPad, descPad)","void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();<mask>(sb, width, options, leftPad, descPad);
        pw.println(sb.toString());
    }"
1513,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21444,21456,MethodCallMutator,renderOptions,format,2,0.038908027,"<mask>(sb, width, options, leftPad, descPad)","void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();<mask>(sb, width, options, leftPad, descPad);
        pw.println(sb.toString());
    }"
1514,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21444,21456,MethodCallMutator,renderOptions,format,3,0.020751758,"<mask>(sb, width, options, leftPad, descPad)","void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();<mask>(sb, width, options, leftPad, descPad);
        pw.println(sb.toString());
    }"
1515,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21444,21456,MethodCallMutator,renderOptions,printf,4,0.008281911,"<mask>(sb, width, options, leftPad, descPad)","void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();<mask>(sb, width, options, leftPad, descPad);
        pw.println(sb.toString());
    }"
1516,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21458,21459,IdentifierMutator-Variable,sb,pb,1,4.7645794E-4,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(<mask>, width, options, leftPad, descPad);
        pw.println(sb.toString());
    }"
1517,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21458,21459,IdentifierMutator-Variable,sb,bb,2,1.6038866E-4,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(<mask>, width, options, leftPad, descPad);
        pw.println(sb.toString());
    }"
1518,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21458,21459,IdentifierMutator-Variable,sb,cb,3,1.0199903E-4,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(<mask>, width, options, leftPad, descPad);
        pw.println(sb.toString());
    }"
1519,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21458,21459,IdentifierMutator-Variable,sb,bp,4,8.9693334E-5,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(<mask>, width, options, leftPad, descPad);
        pw.println(sb.toString());
    }"
1520,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21462,21466,IdentifierMutator-Variable,width,true,2,1.8867226E-4,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb,<mask>, options, leftPad, descPad);
        pw.println(sb.toString());
    }"
1521,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21462,21466,IdentifierMutator-Variable,width,height,3,1.09361354E-4,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb,<mask>, options, leftPad, descPad);
        pw.println(sb.toString());
    }"
1522,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21462,21466,IdentifierMutator-Variable,width,0,4,1.0302404E-4,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb,<mask>, options, leftPad, descPad);
        pw.println(sb.toString());
    }"
1523,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21469,21475,IdentifierMutator-Variable,options,option,1,1.6554877E-4,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width,<mask>, leftPad, descPad);
        pw.println(sb.toString());
    }"
1524,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21469,21475,IdentifierMutator-Variable,options,0,2,1.3132366E-4,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width,<mask>, leftPad, descPad);
        pw.println(sb.toString());
    }"
1525,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21469,21475,IdentifierMutator-Variable,options,null,3,5.3030417E-5,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width,<mask>, leftPad, descPad);
        pw.println(sb.toString());
    }"
1526,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21469,21475,IdentifierMutator-Variable,options,Options,4,4.9412207E-5,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width,<mask>, leftPad, descPad);
        pw.println(sb.toString());
    }"
1527,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21478,21484,IdentifierMutator-Variable,leftPad,left,0,0.98931646,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options,<mask>, descPad);
        pw.println(sb.toString());
    }"
1528,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21478,21484,IdentifierMutator-Variable,leftPad,Left,1,0.0016856281,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options,<mask>, descPad);
        pw.println(sb.toString());
    }"
1529,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21478,21484,IdentifierMutator-Variable,leftPad,Left,2,8.879595E-4,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options,<mask>, descPad);
        pw.println(sb.toString());
    }"
1530,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21478,21484,IdentifierMutator-Variable,leftPad,right,3,8.8111404E-4,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options,<mask>, descPad);
        pw.println(sb.toString());
    }"
1531,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21478,21484,IdentifierMutator-Variable,leftPad,left,4,7.1414496E-4,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options,<mask>, descPad);
        pw.println(sb.toString());
    }"
1532,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21487,21493,IdentifierMutator-Variable,descPad,desc,0,0.9748834,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad,<mask>);
        pw.println(sb.toString());
    }"
1533,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21487,21493,IdentifierMutator-Variable,descPad,description,1,0.004617437,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad,<mask>);
        pw.println(sb.toString());
    }"
1534,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21487,21493,IdentifierMutator-Variable,descPad,true,2,0.004516014,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad,<mask>);
        pw.println(sb.toString());
    }"
1535,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21487,21493,IdentifierMutator-Variable,descPad,false,3,0.0037266728,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad,<mask>);
        pw.println(sb.toString());
    }"
1536,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,702,21487,21493,IdentifierMutator-Variable,descPad,Desc,4,0.0014637992,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad,<mask>);
        pw.println(sb.toString());
    }"
1537,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,703,21508,21514,MethodCallMutator,println,print,0,0.59421927,pw.<mask>(sb.toString()),"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad, descPad);
        pw.<mask>(sb.toString());
    }"
1538,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,703,21508,21514,MethodCallMutator,println,write,2,0.092796616,pw.<mask>(sb.toString()),"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad, descPad);
        pw.<mask>(sb.toString());
    }"
1539,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,703,21508,21514,MethodCallMutator,println,Print,3,0.011023923,pw.<mask>(sb.toString()),"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad, descPad);
        pw.<mask>(sb.toString());
    }"
1540,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,703,21508,21514,MethodCallMutator,println,append,4,0.005085424,pw.<mask>(sb.toString()),"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad, descPad);
        pw.<mask>(sb.toString());
    }"
1541,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,703,21505,21506,IdentifierMutator-Variable,pw,out,0,0.6574413,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad, descPad);<mask>.println(sb.toString());
    }"
1542,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,703,21505,21506,IdentifierMutator-Variable,pw,w,1,0.05435604,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad, descPad);<mask>.println(sb.toString());
    }"
1543,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,703,21505,21506,IdentifierMutator-Variable,pw,outp,2,0.04450301,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad, descPad);<mask>.println(sb.toString());
    }"
1544,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,703,21505,21506,IdentifierMutator-Variable,pw,writer,3,0.037151653,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad, descPad);<mask>.println(sb.toString());
    }"
1545,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,703,21505,21506,IdentifierMutator-Variable,pw,printer,4,0.026227772,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad, descPad);<mask>.println(sb.toString());
    }"
1546,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,703,21519,21526,MethodCallMutator,toString,string,0,0.5608804,sb.<mask>(),"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad, descPad);
        pw.println(sb.<mask>());
    }"
1547,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,703,21519,21526,MethodCallMutator,toString,length,1,0.12547247,sb.<mask>(),"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad, descPad);
        pw.println(sb.<mask>());
    }"
1548,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,703,21519,21526,MethodCallMutator,toString,String,2,0.037842914,sb.<mask>(),"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad, descPad);
        pw.println(sb.<mask>());
    }"
1549,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,703,21519,21526,MethodCallMutator,toString,value,3,0.034721047,sb.<mask>(),"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad, descPad);
        pw.println(sb.<mask>());
    }"
1550,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,703,21519,21526,MethodCallMutator,toString,close,4,0.02694147,sb.<mask>(),"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad, descPad);
        pw.println(sb.<mask>());
    }"
1551,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,703,21516,21517,IdentifierMutator-Variable,sb,pb,1,1.6069978E-4,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad, descPad);
        pw.println(<mask>.toString());
    }"
1552,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,703,21516,21517,IdentifierMutator-Variable,sb,bb,2,6.7879286E-5,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad, descPad);
        pw.println(<mask>.toString());
    }"
1553,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,703,21516,21517,IdentifierMutator-Variable,sb,SB,3,3.9544208E-5,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad, descPad);
        pw.println(<mask>.toString());
    }"
1554,HelpFormatter.java,printOptions,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)",697,703,21516,21517,IdentifierMutator-Variable,sb,b,4,3.4204255E-5,<mask>,"void printOptions(PrintWriter pw, int width, Options options, 
                             int leftPad, int descPad)
    {
        StringBuffer sb = new StringBuffer();

        renderOptions(sb, width, options, leftPad, descPad);
        pw.println(<mask>.toString());
    }"
1555,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, String text)",713,715,21887,21898,MethodCallMutator,printWrapped,print,0,0.7096102,"<mask>(pw, width, 0, text)","void printWrapped(PrintWriter pw, int width, String text)
    {<mask>(pw, width, 0, text);
    }"
1556,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, String text)",713,715,21887,21898,MethodCallMutator,printWrapped,write,1,0.116529435,"<mask>(pw, width, 0, text)","void printWrapped(PrintWriter pw, int width, String text)
    {<mask>(pw, width, 0, text);
    }"
1557,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, String text)",713,715,21887,21898,MethodCallMutator,printWrapped,wrap,2,0.076401025,"<mask>(pw, width, 0, text)","void printWrapped(PrintWriter pw, int width, String text)
    {<mask>(pw, width, 0, text);
    }"
1558,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, String text)",713,715,21887,21898,MethodCallMutator,printWrapped,println,3,0.015619191,"<mask>(pw, width, 0, text)","void printWrapped(PrintWriter pw, int width, String text)
    {<mask>(pw, width, 0, text);
    }"
1559,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, String text)",713,715,21887,21898,MethodCallMutator,printWrapped,format,4,0.014926723,"<mask>(pw, width, 0, text)","void printWrapped(PrintWriter pw, int width, String text)
    {<mask>(pw, width, 0, text);
    }"
1560,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, String text)",713,715,21900,21901,IdentifierMutator-Variable,pw,pt,0,0.24972782,<mask>,"void printWrapped(PrintWriter pw, int width, String text)
    {
        printWrapped(<mask>, width, 0, text);
    }"
1561,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, String text)",713,715,21900,21901,IdentifierMutator-Variable,pw,w,1,0.12068495,<mask>,"void printWrapped(PrintWriter pw, int width, String text)
    {
        printWrapped(<mask>, width, 0, text);
    }"
1562,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, String text)",713,715,21900,21901,IdentifierMutator-Variable,pw,pb,2,0.10146075,<mask>,"void printWrapped(PrintWriter pw, int width, String text)
    {
        printWrapped(<mask>, width, 0, text);
    }"
1563,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, String text)",713,715,21900,21901,IdentifierMutator-Variable,pw,pp,3,0.09425397,<mask>,"void printWrapped(PrintWriter pw, int width, String text)
    {
        printWrapped(<mask>, width, 0, text);
    }"
1564,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, String text)",713,715,21900,21901,IdentifierMutator-Variable,pw,p,4,0.06857665,<mask>,"void printWrapped(PrintWriter pw, int width, String text)
    {
        printWrapped(<mask>, width, 0, text);
    }"
1565,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, String text)",713,715,21904,21908,IdentifierMutator-Variable,width,0,1,9.3759916E-4,<mask>,"void printWrapped(PrintWriter pw, int width, String text)
    {
        printWrapped(pw,<mask>, 0, text);
    }"
1566,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, String text)",713,715,21904,21908,IdentifierMutator-Variable,width,Width,3,2.585699E-4,<mask>,"void printWrapped(PrintWriter pw, int width, String text)
    {
        printWrapped(pw,<mask>, 0, text);
    }"
1567,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, String text)",713,715,21904,21908,IdentifierMutator-Variable,width,Width,4,2.3048688E-4,<mask>,"void printWrapped(PrintWriter pw, int width, String text)
    {
        printWrapped(pw,<mask>, 0, text);
    }"
1568,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, String text)",713,715,21911,21911,IdentifierMutator-Literal,0,false,1,0.07014276,<mask>,"void printWrapped(PrintWriter pw, int width, String text)
    {
        printWrapped(pw, width,<mask>, text);
    }"
1569,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, String text)",713,715,21911,21911,IdentifierMutator-Literal,0,null,2,0.06730392,<mask>,"void printWrapped(PrintWriter pw, int width, String text)
    {
        printWrapped(pw, width,<mask>, text);
    }"
1570,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, String text)",713,715,21911,21911,IdentifierMutator-Literal,0,true,3,0.06618399,<mask>,"void printWrapped(PrintWriter pw, int width, String text)
    {
        printWrapped(pw, width,<mask>, text);
    }"
1571,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, String text)",713,715,21911,21911,IdentifierMutator-Literal,0,"""""",4,0.06607804,<mask>,"void printWrapped(PrintWriter pw, int width, String text)
    {
        printWrapped(pw, width,<mask>, text);
    }"
1572,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, String text)",713,715,21914,21917,IdentifierMutator-Variable,text,"""""",2,1.0212063E-5,<mask>,"void printWrapped(PrintWriter pw, int width, String text)
    {
        printWrapped(pw, width, 0,<mask>);
    }"
1573,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, String text)",713,715,21914,21917,IdentifierMutator-Variable,text,Text,3,6.2147274E-6,<mask>,"void printWrapped(PrintWriter pw, int width, String text)
    {
        printWrapped(pw, width, 0,<mask>);
    }"
1574,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, String text)",713,715,21914,21917,IdentifierMutator-Variable,text,TEXT,4,5.5123846E-6,<mask>,"void printWrapped(PrintWriter pw, int width, String text)
    {
        printWrapped(pw, width, 0,<mask>);
    }"
1575,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,728,22416,22421,MethodCallMutator,length,split,1,0.0050167786,text.<mask>(),"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.<mask>());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);
        pw.println(sb.toString());
    }"
1576,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,728,22416,22421,MethodCallMutator,length,clone,2,0.0012986121,text.<mask>(),"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.<mask>());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);
        pw.println(sb.toString());
    }"
1577,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,728,22416,22421,MethodCallMutator,length,replace,3,0.0012274369,text.<mask>(),"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.<mask>());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);
        pw.println(sb.toString());
    }"
1578,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,728,22416,22421,MethodCallMutator,length,get,4,0.0010294855,text.<mask>(),"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.<mask>());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);
        pw.println(sb.toString());
    }"
1579,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,728,22411,22414,IdentifierMutator-Variable,text,block,2,0.0034129901,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(<mask>.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);
        pw.println(sb.toString());
    }"
1580,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,728,22411,22414,IdentifierMutator-Variable,text,Text,3,0.002918233,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(<mask>.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);
        pw.println(sb.toString());
    }"
1581,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,728,22411,22414,IdentifierMutator-Variable,text,string,4,0.002209695,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(<mask>.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);
        pw.println(sb.toString());
    }"
1582,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,730,22436,22457,MethodCallMutator,renderWrappedTextBlock,print,0,0.8151071,"<mask>(sb, width, nextLineTabStop, text)","void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());<mask>(sb, width, nextLineTabStop, text);
        pw.println(sb.toString());
    }"
1583,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,730,22436,22457,MethodCallMutator,renderWrappedTextBlock,wrap,1,0.052345682,"<mask>(sb, width, nextLineTabStop, text)","void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());<mask>(sb, width, nextLineTabStop, text);
        pw.println(sb.toString());
    }"
1584,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,730,22436,22457,MethodCallMutator,renderWrappedTextBlock,write,2,0.04632094,"<mask>(sb, width, nextLineTabStop, text)","void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());<mask>(sb, width, nextLineTabStop, text);
        pw.println(sb.toString());
    }"
1585,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,730,22436,22457,MethodCallMutator,renderWrappedTextBlock,format,3,0.018310444,"<mask>(sb, width, nextLineTabStop, text)","void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());<mask>(sb, width, nextLineTabStop, text);
        pw.println(sb.toString());
    }"
1586,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,730,22436,22457,MethodCallMutator,renderWrappedTextBlock,append,4,0.008960699,"<mask>(sb, width, nextLineTabStop, text)","void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());<mask>(sb, width, nextLineTabStop, text);
        pw.println(sb.toString());
    }"
1587,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,730,22459,22460,IdentifierMutator-Variable,sb,pb,1,0.00111407,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(<mask>, width, nextLineTabStop, text);
        pw.println(sb.toString());
    }"
1588,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,730,22459,22460,IdentifierMutator-Variable,sb,bb,2,9.916307E-4,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(<mask>, width, nextLineTabStop, text);
        pw.println(sb.toString());
    }"
1589,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,730,22459,22460,IdentifierMutator-Variable,sb,nb,3,4.5799196E-4,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(<mask>, width, nextLineTabStop, text);
        pw.println(sb.toString());
    }"
1590,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,730,22459,22460,IdentifierMutator-Variable,sb,cb,4,4.1341496E-4,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(<mask>, width, nextLineTabStop, text);
        pw.println(sb.toString());
    }"
1591,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,730,22463,22467,IdentifierMutator-Variable,width,height,1,2.9046694E-4,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb,<mask>, nextLineTabStop, text);
        pw.println(sb.toString());
    }"
1592,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,730,22463,22467,IdentifierMutator-Variable,width,0,2,1.5049119E-4,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb,<mask>, nextLineTabStop, text);
        pw.println(sb.toString());
    }"
1593,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,730,22463,22467,IdentifierMutator-Variable,width,true,3,3.914966E-5,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb,<mask>, nextLineTabStop, text);
        pw.println(sb.toString());
    }"
1594,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,730,22470,22484,IdentifierMutator-Variable,nextLineTabStop,0,0,0.17976965,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width,<mask>, text);
        pw.println(sb.toString());
    }"
1595,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,730,22470,22484,IdentifierMutator-Variable,nextLineTabStop,next,1,0.1077546,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width,<mask>, text);
        pw.println(sb.toString());
    }"
1596,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,730,22470,22484,IdentifierMutator-Variable,nextLineTabStop,1,2,0.09838828,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width,<mask>, text);
        pw.println(sb.toString());
    }"
1597,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,730,22470,22484,IdentifierMutator-Variable,nextLineTabStop,indent,3,0.057432305,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width,<mask>, text);
        pw.println(sb.toString());
    }"
1598,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,730,22470,22484,IdentifierMutator-Variable,nextLineTabStop,false,4,0.0489799,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width,<mask>, text);
        pw.println(sb.toString());
    }"
1599,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,730,22487,22490,IdentifierMutator-Variable,text,true,1,7.970982E-4,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop,<mask>);
        pw.println(sb.toString());
    }"
1600,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,730,22487,22490,IdentifierMutator-Variable,text,false,2,4.708211E-4,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop,<mask>);
        pw.println(sb.toString());
    }"
1601,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,730,22487,22490,IdentifierMutator-Variable,text,null,3,3.2635848E-4,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop,<mask>);
        pw.println(sb.toString());
    }"
1602,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,730,22487,22490,IdentifierMutator-Variable,text,"""""",4,2.8946289E-4,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop,<mask>);
        pw.println(sb.toString());
    }"
1603,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,731,22505,22511,MethodCallMutator,println,print,0,0.48209327,pw.<mask>(sb.toString()),"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);
        pw.<mask>(sb.toString());
    }"
1604,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,731,22505,22511,MethodCallMutator,println,write,1,0.27964872,pw.<mask>(sb.toString()),"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);
        pw.<mask>(sb.toString());
    }"
1605,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,731,22505,22511,MethodCallMutator,println,Print,3,0.013708422,pw.<mask>(sb.toString()),"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);
        pw.<mask>(sb.toString());
    }"
1606,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,731,22505,22511,MethodCallMutator,println,append,4,0.0049180286,pw.<mask>(sb.toString()),"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);
        pw.<mask>(sb.toString());
    }"
1607,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,731,22502,22503,IdentifierMutator-Variable,pw,out,0,0.6634636,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);<mask>.println(sb.toString());
    }"
1608,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,731,22502,22503,IdentifierMutator-Variable,pw,w,1,0.10742321,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);<mask>.println(sb.toString());
    }"
1609,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,731,22502,22503,IdentifierMutator-Variable,pw,writer,2,0.059408687,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);<mask>.println(sb.toString());
    }"
1610,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,731,22502,22503,IdentifierMutator-Variable,pw,printer,3,0.021983543,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);<mask>.println(sb.toString());
    }"
1611,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,731,22502,22503,IdentifierMutator-Variable,pw,output,4,0.018023754,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);<mask>.println(sb.toString());
    }"
1612,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,731,22516,22523,MethodCallMutator,toString,string,0,0.5416958,sb.<mask>(),"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);
        pw.println(sb.<mask>());
    }"
1613,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,731,22516,22523,MethodCallMutator,toString,length,1,0.18345502,sb.<mask>(),"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);
        pw.println(sb.<mask>());
    }"
1614,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,731,22516,22523,MethodCallMutator,toString,position,2,0.036291286,sb.<mask>(),"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);
        pw.println(sb.<mask>());
    }"
1615,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,731,22516,22523,MethodCallMutator,toString,close,3,0.034830563,sb.<mask>(),"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);
        pw.println(sb.<mask>());
    }"
1616,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,731,22516,22523,MethodCallMutator,toString,get,4,0.021014243,sb.<mask>(),"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);
        pw.println(sb.<mask>());
    }"
1617,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,731,22513,22514,IdentifierMutator-Variable,sb,pb,1,9.121061E-4,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);
        pw.println(<mask>.toString());
    }"
1618,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,731,22513,22514,IdentifierMutator-Variable,sb,bb,2,3.3543695E-4,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);
        pw.println(<mask>.toString());
    }"
1619,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,731,22513,22514,IdentifierMutator-Variable,sb,b,3,1.5874956E-4,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);
        pw.println(<mask>.toString());
    }"
1620,HelpFormatter.java,printWrapped,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)",726,731,22513,22514,IdentifierMutator-Variable,sb,SB,4,7.958274E-5,<mask>,"void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)
    {
        StringBuffer sb = new StringBuffer(text.length());

        renderWrappedTextBlock(sb, width, nextLineTabStop, text);
        pw.println(<mask>.toString());
    }"
1621,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,752,23336,23348,MethodCallMutator,createPadding,padding,0,0.97646266,<mask>(leftPad),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad =<mask>(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
        "
1622,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,752,23336,23348,MethodCallMutator,createPadding,pad,1,0.018763795,<mask>(leftPad),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad =<mask>(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
        "
1623,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,752,23336,23348,MethodCallMutator,createPadding,indent,2,0.0012291458,<mask>(leftPad),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad =<mask>(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
        "
1624,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,752,23336,23348,MethodCallMutator,createPadding,wrapping,3,7.4912445E-4,<mask>(leftPad),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad =<mask>(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
        "
1625,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,752,23336,23348,MethodCallMutator,createPadding,leading,4,5.896882E-4,<mask>(leftPad),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad =<mask>(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
        "
1626,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,752,23350,23356,IdentifierMutator-Variable,leftPad,width,0,0.7267251,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(<mask>);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1627,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,752,23350,23356,IdentifierMutator-Variable,leftPad,left,1,0.20993891,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(<mask>);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1628,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,752,23350,23356,IdentifierMutator-Variable,leftPad,padding,2,0.016924297,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(<mask>);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1629,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,752,23350,23356,IdentifierMutator-Variable,leftPad,pad,3,0.014724178,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(<mask>);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1630,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,752,23350,23356,IdentifierMutator-Variable,leftPad,length,4,0.00613362,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(<mask>);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1631,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,753,23388,23400,MethodCallMutator,createPadding,padding,0,0.75946766,<mask>(descPad),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad =<mask>(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
        "
1632,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,753,23388,23400,MethodCallMutator,createPadding,pad,1,0.078532964,<mask>(descPad),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad =<mask>(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
        "
1633,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,753,23388,23400,MethodCallMutator,createPadding,create,2,0.060939766,<mask>(descPad),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad =<mask>(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
        "
1634,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,753,23388,23400,MethodCallMutator,createPadding,indent,3,0.016703771,<mask>(descPad),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad =<mask>(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
        "
1635,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,753,23388,23400,MethodCallMutator,createPadding,trim,4,0.0139377685,<mask>(descPad),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad =<mask>(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
        "
1636,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,753,23402,23408,IdentifierMutator-Variable,descPad,width,0,0.49054208,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(<mask>);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1637,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,753,23402,23408,IdentifierMutator-Variable,descPad,desc,1,0.20791987,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(<mask>);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1638,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,753,23402,23408,IdentifierMutator-Variable,descPad,pad,2,0.026571209,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(<mask>);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1639,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,753,23402,23408,IdentifierMutator-Variable,descPad,description,3,0.022036608,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(<mask>);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1640,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,753,23402,23408,IdentifierMutator-Variable,descPad,right,4,0.009612914,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(<mask>);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1641,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,759,23664,23664,IdentifierMutator-Literal,0,1,1,0.088694975,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max =<mask>;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
      "
1642,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,759,23664,23664,IdentifierMutator-Literal,0,100,2,0.053246148,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max =<mask>;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
      "
1643,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,759,23664,23664,IdentifierMutator-Literal,0,10,3,0.049022958,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max =<mask>;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
      "
1644,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,759,23664,23664,IdentifierMutator-Literal,0,50,4,0.04853645,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max =<mask>;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
      "
1645,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,763,23771,23781,MethodCallMutator,helpOptions,values,0,0.26170883,options.<mask>(),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.<mask>();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1646,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,763,23771,23781,MethodCallMutator,helpOptions,list,1,0.21195363,options.<mask>(),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.<mask>();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1647,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,763,23771,23781,MethodCallMutator,helpOptions,iterator,2,0.15588826,options.<mask>(),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.<mask>();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1648,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,763,23771,23781,MethodCallMutator,helpOptions,reverse,3,0.05473581,options.<mask>(),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.<mask>();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1649,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,763,23771,23781,MethodCallMutator,helpOptions,options,4,0.044901725,options.<mask>(),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.<mask>();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1650,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,763,23763,23769,IdentifierMutator-Variable,options,this,1,0.14241743,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList =<mask>.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
      "
1651,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,763,23763,23769,IdentifierMutator-Variable,options,parser,2,0.080270484,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList =<mask>.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
      "
1652,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,763,23763,23769,IdentifierMutator-Variable,options,super,3,0.0710612,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList =<mask>.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
      "
1653,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,763,23763,23769,IdentifierMutator-Variable,options,builder,4,0.022687456,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList =<mask>.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
      "
1654,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,765,23807,23810,MethodCallMutator,sort,order,2,0.0013190977,"Collections.<mask>(optList, getOptionComparator())","StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.<mask>(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
      "
1655,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,765,23807,23810,MethodCallMutator,sort,reverse,3,5.0155044E-4,"Collections.<mask>(optList, getOptionComparator())","StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.<mask>(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
      "
1656,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,765,23807,23810,MethodCallMutator,sort,Sort,4,4.924184E-4,"Collections.<mask>(optList, getOptionComparator())","StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.<mask>(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
      "
1657,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,765,23812,23818,IdentifierMutator-Variable,optList,list,0,0.67198676,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(<mask>, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1658,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,765,23812,23818,IdentifierMutator-Variable,optList,prefix,1,0.22373693,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(<mask>, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1659,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,765,23812,23818,IdentifierMutator-Variable,optList,List,2,0.02561508,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(<mask>, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1660,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,765,23812,23818,IdentifierMutator-Variable,optList,options,3,0.0091088945,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(<mask>, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1661,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,765,23812,23818,IdentifierMutator-Variable,optList,opt,4,0.008006377,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(<mask>, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1662,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,765,23821,23839,MethodCallMutator,getOptionComparator,reverse,0,0.639386,<mask>(),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList,<mask>());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
         "
1663,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,765,23821,23839,MethodCallMutator,getOptionComparator,iterator,1,0.08363828,<mask>(),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList,<mask>());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
         "
1664,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,765,23821,23839,MethodCallMutator,getOptionComparator,size,2,0.07478085,<mask>(),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList,<mask>());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
         "
1665,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,765,23821,23839,MethodCallMutator,getOptionComparator,reverse,3,0.071876824,<mask>(),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList,<mask>());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
         "
1666,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,765,23821,23839,MethodCallMutator,getOptionComparator,reversed,4,0.021589736,<mask>(),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList,<mask>());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
         "
1667,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,767,23880,23887,MethodCallMutator,iterator,iter,1,0.021454167,optList.<mask>(),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.<mask>(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
      "
1668,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,767,23880,23887,MethodCallMutator,iterator,Iterator,2,0.012003817,optList.<mask>(),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.<mask>(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
      "
1669,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,767,23880,23887,MethodCallMutator,iterator,wind,3,0.0016226572,optList.<mask>(),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.<mask>(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
      "
1670,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,767,23880,23887,MethodCallMutator,iterator,next,4,4.7246885E-4,optList.<mask>(),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.<mask>(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
      "
1671,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,767,23872,23878,IdentifierMutator-Variable,optList,list,0,0.4112051,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i =<mask>.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1672,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,767,23872,23878,IdentifierMutator-Variable,optList,options,1,0.3130871,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i =<mask>.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1673,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,767,23872,23878,IdentifierMutator-Variable,optList,prefix,2,0.055176057,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i =<mask>.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1674,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,767,23872,23878,IdentifierMutator-Variable,optList,option,3,0.026631141,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i =<mask>.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1675,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,767,23872,23878,IdentifierMutator-Variable,optList,opt,4,0.016429938,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i =<mask>.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1676,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,767,23894,23900,MethodCallMutator,hasNext,next,0,0.9819902,i.<mask>(),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.<mask>();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1677,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,767,23894,23900,MethodCallMutator,hasNext,Next,1,0.0034911141,i.<mask>(),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.<mask>();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1678,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,767,23894,23900,MethodCallMutator,hasNext,valid,2,0.002555055,i.<mask>(),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.<mask>();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1679,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,767,23894,23900,MethodCallMutator,hasNext,continue,3,0.0012933948,i.<mask>(),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.<mask>();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1680,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,767,23894,23900,MethodCallMutator,hasNext,close,4,9.402122E-4,i.<mask>(),"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.<mask>();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
       "
1681,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,767,23892,23892,IdentifierMutator-Variable,i,I,2,3.9847544E-4,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator();<mask>.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
      "
1682,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,767,23892,23892,IdentifierMutator-Variable,i,it,3,7.231106E-5,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator();<mask>.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
      "
1683,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,767,23892,23892,IdentifierMutator-Variable,i,I,4,5.309698E-5,<mask>,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)
    {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator();<mask>.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
      "
1684,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,769,23955,23958,MethodCallMutator,next,value,1,4.4035589E-4,((Option) (i.<mask>())),"        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.<mask>();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                   "
1685,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,769,23955,23958,MethodCallMutator,next,current,3,1.5669929E-4,((Option) (i.<mask>())),"        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.<mask>();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                   "
1686,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,769,23955,23958,MethodCallMutator,next,object,4,3.869978E-5,((Option) (i.<mask>())),"        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.<mask>();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                   "
1687,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,769,23953,23953,IdentifierMutator-Variable,i,it,2,1.6501464E-4,<mask>," {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option)<mask>.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                 "
1688,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,769,23953,23953,IdentifierMutator-Variable,i,I,3,1.16416406E-4,<mask>," {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option)<mask>.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                 "
1689,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,769,23953,23953,IdentifierMutator-Variable,i,I,4,2.252945E-5,<mask>," {
        final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option)<mask>.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                 "
1690,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,770,23981,23981,AssignmentMutator,optBuf=newjava.lang.StringBuffer(),*,0,0.24709456,optBuf <mask>= new java.lang.StringBuffer(),"Pad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf<mask>= new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix)."
1691,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,770,23981,23981,AssignmentMutator,optBuf=newjava.lang.StringBuffer(),|,1,0.16206525,optBuf <mask>= new java.lang.StringBuffer(),"Pad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf<mask>= new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix)."
1692,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,770,23981,23981,AssignmentMutator,optBuf=newjava.lang.StringBuffer(),.,2,0.09299261,optBuf <mask>= new java.lang.StringBuffer(),"Pad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf<mask>= new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix)."
1693,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,770,23981,23981,AssignmentMutator,optBuf=newjava.lang.StringBuffer(),,3,0.08802231,optBuf <mask>= new java.lang.StringBuffer(),"Pad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf<mask>= new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix)."
1694,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,770,23981,23981,AssignmentMutator,optBuf=newjava.lang.StringBuffer(),||,4,0.07911276,optBuf <mask>= new java.lang.StringBuffer(),"Pad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf<mask>= new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix)."
1695,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,770,23975,23980,IdentifierMutator-Variable,optBuf,buf,0,0.34651574,<mask>,"      final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();<mask> = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix)."
1696,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,770,23975,23980,IdentifierMutator-Variable,optBuf,buffer,1,0.06642198,<mask>,"      final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();<mask> = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix)."
1697,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,770,23975,23980,IdentifierMutator-Variable,optBuf,prefix,2,0.056672595,<mask>,"      final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();<mask> = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix)."
1698,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,770,23975,23980,IdentifierMutator-Variable,optBuf,//,3,0.038567714,<mask>,"      final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();<mask> = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix)."
1699,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,770,23975,23980,IdentifierMutator-Variable,optBuf,buf,4,0.03855863,<mask>,"      final String lpad = createPadding(leftPad);
        final String dpad = createPadding(descPad);

        // first create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();<mask> = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix)."
1700,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,772,24048,24051,BinaryOperatorMutator,==,=,1,0.055277385,option.getOpt() <mask> null,"lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt()<mask>null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }"
1701,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,772,24048,24051,BinaryOperatorMutator,==,!=,2,0.04960432,option.getOpt() <mask> null,"lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt()<mask>null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }"
1702,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,772,24048,24051,BinaryOperatorMutator,==,>,3,0.006832785,option.getOpt() <mask> null,"lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt()<mask>null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }"
1703,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,772,24040,24045,MethodCallMutator,getOpt,get,0,0.12896368,option.<mask>()," containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.<mask>() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
          "
1704,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,772,24040,24045,MethodCallMutator,getOpt,help,1,0.12056535,option.<mask>()," containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.<mask>() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
          "
1705,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,772,24040,24045,MethodCallMutator,getOpt,long,2,0.11519642,option.<mask>()," containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.<mask>() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
          "
1706,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,772,24040,24045,MethodCallMutator,getOpt,value,3,0.07935219,option.<mask>()," containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.<mask>() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
          "
1707,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,772,24040,24045,MethodCallMutator,getOpt,opt,4,0.07181963,option.<mask>()," containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.<mask>() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
          "
1708,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,772,24033,24038,IdentifierMutator-Variable,option,options,2,9.061503E-5,<mask>," create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (<mask>.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
       "
1709,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,772,24033,24038,IdentifierMutator-Variable,option,Option,3,7.568555E-5,<mask>," create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (<mask>.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
       "
1710,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,772,24033,24038,IdentifierMutator-Variable,option,argument,4,3.703226E-5,<mask>," create list containing only <lpad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (<mask>.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
       "
1711,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,772,24052,24055,IdentifierMutator-Literal,null,"''",1,0.2112538,<mask>,"pad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() ==<mask>)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

"
1712,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,772,24052,24055,IdentifierMutator-Literal,null,"""""",2,0.18987991,<mask>,"pad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() ==<mask>)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

"
1713,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,772,24052,24055,IdentifierMutator-Literal,null,option,3,0.06262309,<mask>,"pad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() ==<mask>)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

"
1714,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,772,24052,24055,IdentifierMutator-Literal,null,0,4,0.053439364,<mask>,"pad>-a,--aaa where 
        // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() ==<mask>)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

"
1715,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24145,24150,MethodCallMutator,append,join,1,5.214315E-4,"optBuf.<mask>(lpad).<mask>(""   "" + defaultLongOptPrefix).<mask>(option.getLongOpt())"," used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).<mask>(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option"
1716,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24145,24150,MethodCallMutator,append,add,2,1.8879234E-4,"optBuf.<mask>(lpad).<mask>(""   "" + defaultLongOptPrefix).<mask>(option.getLongOpt())"," used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).<mask>(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option"
1717,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24145,24150,MethodCallMutator,append,end,3,1.4260746E-4,"optBuf.<mask>(lpad).<mask>(""   "" + defaultLongOptPrefix).<mask>(option.getLongOpt())"," used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).<mask>(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option"
1718,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24145,24150,MethodCallMutator,append,format,4,7.7830955E-5,"optBuf.<mask>(lpad).<mask>(""   "" + defaultLongOptPrefix).<mask>(option.getLongOpt())"," used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).<mask>(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option"
1719,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24108,24113,MethodCallMutator,append,join,1,8.344582E-4,"optBuf.<mask>(lpad).<mask>(""   "" + defaultLongOptPrefix)","   // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).<mask>(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
        "
1720,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24108,24113,MethodCallMutator,append,replace,2,7.729645E-4,"optBuf.<mask>(lpad).<mask>(""   "" + defaultLongOptPrefix)","   // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).<mask>(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
        "
1721,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24108,24113,MethodCallMutator,append,add,3,1.7665472E-4,"optBuf.<mask>(lpad).<mask>(""   "" + defaultLongOptPrefix)","   // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).<mask>(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
        "
1722,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24108,24113,MethodCallMutator,append,repeat,4,1.10866335E-4,"optBuf.<mask>(lpad).<mask>(""   "" + defaultLongOptPrefix)","   // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).<mask>(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
        "
1723,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24095,24100,MethodCallMutator,append,end,1,1.9419756E-5,optBuf.<mask>(lpad),"        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.<mask>(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
   "
1724,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24095,24100,MethodCallMutator,append,join,2,1.0276995E-5,optBuf.<mask>(lpad),"        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.<mask>(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
   "
1725,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24095,24100,MethodCallMutator,append,add,3,6.4379296E-6,optBuf.<mask>(lpad),"        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.<mask>(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
   "
1726,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24095,24100,MethodCallMutator,append,replace,4,5.8928536E-6,optBuf.<mask>(lpad),"        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.<mask>(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
   "
1727,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24088,24093,IdentifierMutator-Variable,optBuf,buf,0,0.27617562,<mask>,"   // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {<mask>.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
 "
1728,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24088,24093,IdentifierMutator-Variable,optBuf,out,1,0.12795606,<mask>,"   // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {<mask>.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
 "
1729,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24088,24093,IdentifierMutator-Variable,optBuf,output,2,0.051666982,<mask>,"   // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {<mask>.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
 "
1730,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24088,24093,IdentifierMutator-Variable,optBuf,buffer,3,0.04102014,<mask>,"   // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {<mask>.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
 "
1731,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24088,24093,IdentifierMutator-Variable,optBuf,prefix,4,0.04073742,<mask>,"   // -a is opt and --aaa is long opt; in parallel look for 
        // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {<mask>.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
 "
1732,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24102,24105,IdentifierMutator-Variable,lpad,pad,0,0.7517379,<mask>,"      // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(<mask>).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
      "
1733,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24102,24105,IdentifierMutator-Variable,lpad,prefix,1,0.07179221,<mask>,"      // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(<mask>).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
      "
1734,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24102,24105,IdentifierMutator-Variable,lpad,space,2,0.011865595,<mask>,"      // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(<mask>).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
      "
1735,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24102,24105,IdentifierMutator-Variable,lpad,padding,3,0.009487698,<mask>,"      // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(<mask>).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
      "
1736,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24102,24105,IdentifierMutator-Variable,lpad,wrap,4,0.009095551,<mask>,"      // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(<mask>).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
      "
1737,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24120,24122,BinaryOperatorMutator,+,"""+",2,0.03652331,"""   "" <mask> defaultLongOptPrefix"," opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   ""<mask>defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
             "
1738,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24120,24122,BinaryOperatorMutator,+,)+,3,0.015459987,"""   "" <mask> defaultLongOptPrefix"," opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   ""<mask>defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
             "
1739,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24120,24122,BinaryOperatorMutator,+,.,4,0.006739722,"""   "" <mask> defaultLongOptPrefix"," opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   ""<mask>defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
             "
1740,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24115,24119,IdentifierMutator-Literal,"""""","''",0,0.46857652,<mask>," // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(<mask> + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
            "
1741,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24115,24119,IdentifierMutator-Literal,"""""",prefix,1,0.0903456,<mask>," // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(<mask> + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
            "
1742,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24115,24119,IdentifierMutator-Literal,"""""","'",2,0.07324222,<mask>," // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(<mask> + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
            "
1743,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24115,24119,IdentifierMutator-Literal,"""""","','",3,0.039618596,<mask>," // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(<mask> + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
            "
1744,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24115,24119,IdentifierMutator-Literal,"""""","-'",4,0.015906757,<mask>," // the longest opt string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(<mask> + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
            "
1745,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24123,24142,IdentifierMutator-Variable,defaultLongOptPrefix,prefix,0,0.20940115,<mask>," string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" +<mask>).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName"
1746,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24123,24142,IdentifierMutator-Variable,defaultLongOptPrefix,option,1,0.13408794,<mask>," string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" +<mask>).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName"
1747,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24123,24142,IdentifierMutator-Variable,defaultLongOptPrefix,key,2,0.07618367,<mask>," string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" +<mask>).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName"
1748,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24123,24142,IdentifierMutator-Variable,defaultLongOptPrefix,max,3,0.050012767,<mask>," string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" +<mask>).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName"
1749,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24123,24142,IdentifierMutator-Variable,defaultLongOptPrefix,name,4,0.038394384,<mask>," string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" +<mask>).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName"
1750,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24123,24142,FieldReferenceMutator,defaultLongOptPrefix,prefix,0,0.20940115,<mask>," string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" +<mask>).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName"
1751,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24123,24142,FieldReferenceMutator,defaultLongOptPrefix,option,1,0.13408794,<mask>," string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" +<mask>).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName"
1752,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24123,24142,FieldReferenceMutator,defaultLongOptPrefix,key,2,0.07618367,<mask>," string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" +<mask>).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName"
1753,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24123,24142,FieldReferenceMutator,defaultLongOptPrefix,max,3,0.050012767,<mask>," string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" +<mask>).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName"
1754,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24123,24142,FieldReferenceMutator,defaultLongOptPrefix,name,4,0.038394384,<mask>," string this list will be then used to 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" +<mask>).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName"
1755,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24159,24168,MethodCallMutator,getLongOpt,help,0,0.4192888,option.<mask>(),"        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.<mask>());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
"
1756,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24159,24168,MethodCallMutator,getLongOpt,get,1,0.29560694,option.<mask>(),"        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.<mask>());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
"
1757,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24159,24168,MethodCallMutator,getLongOpt,opt,2,0.079963624,option.<mask>(),"        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.<mask>());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
"
1758,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24159,24168,MethodCallMutator,getLongOpt,name,3,0.022709703,option.<mask>(),"        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.<mask>());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
"
1759,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24159,24168,MethodCallMutator,getLongOpt,option,4,0.020422688,option.<mask>(),"        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.<mask>());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
"
1760,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24152,24157,IdentifierMutator-Variable,option,options,2,2.3832217E-4,<mask>," 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(<mask>.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.get"
1761,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24152,24157,IdentifierMutator-Variable,option,Option,3,2.2867999E-4,<mask>," 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(<mask>.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.get"
1762,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,774,24152,24157,IdentifierMutator-Variable,option,section,4,4.166312E-5,<mask>," 
        // sort options ascending
        int max = 0;
        StringBuffer optBuf;
        List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(<mask>.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.get"
1763,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24280,24285,MethodCallMutator,append,join,1,1.7112483E-4,optBuf.<mask>(lpad).<mask>(defaultOptPrefix).<mask>(option.getOpt()),"     Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).<mask>(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a"
1764,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24280,24285,MethodCallMutator,append,end,2,4.2106745E-5,optBuf.<mask>(lpad).<mask>(defaultOptPrefix).<mask>(option.getOpt()),"     Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).<mask>(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a"
1765,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24280,24285,MethodCallMutator,append,add,3,2.538726E-5,optBuf.<mask>(lpad).<mask>(defaultOptPrefix).<mask>(option.getOpt()),"     Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).<mask>(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a"
1766,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24255,24260,MethodCallMutator,append,join,1,1.9529916E-4,optBuf.<mask>(lpad).<mask>(defaultOptPrefix),"helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).<mask>(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                  "
1767,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24255,24260,MethodCallMutator,append,end,2,3.1717103E-5,optBuf.<mask>(lpad).<mask>(defaultOptPrefix),"helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).<mask>(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                  "
1768,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24255,24260,MethodCallMutator,append,replace,3,2.2220544E-5,optBuf.<mask>(lpad).<mask>(defaultOptPrefix),"helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).<mask>(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                  "
1769,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24242,24247,MethodCallMutator,append,replace,1,1.7836497E-5,optBuf.<mask>(lpad)," optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.<mask>(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
             "
1770,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24242,24247,MethodCallMutator,append,end,2,1.5621315E-5,optBuf.<mask>(lpad)," optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.<mask>(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
             "
1771,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24242,24247,MethodCallMutator,append,add,3,1.12568705E-5,optBuf.<mask>(lpad)," optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.<mask>(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
             "
1772,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24242,24247,MethodCallMutator,append,push,4,1.0466234E-5,optBuf.<mask>(lpad)," optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.<mask>(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
             "
1773,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24235,24240,IdentifierMutator-Variable,optBuf,buf,0,0.17145988,<mask>,"    List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {<mask>.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
           "
1774,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24235,24240,IdentifierMutator-Variable,optBuf,buf,1,0.16328426,<mask>,"    List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {<mask>.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
           "
1775,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24235,24240,IdentifierMutator-Variable,optBuf,buffer,2,0.040416807,<mask>,"    List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {<mask>.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
           "
1776,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24235,24240,IdentifierMutator-Variable,optBuf,out,3,0.029575773,<mask>,"    List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {<mask>.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
           "
1777,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24235,24240,IdentifierMutator-Variable,optBuf,output,4,0.020707715,<mask>,"    List prefixList = new ArrayList();

        List optList = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {<mask>.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
           "
1778,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24249,24252,IdentifierMutator-Variable,lpad,pad,0,0.22698995,<mask>," = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(<mask>).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                "
1779,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24249,24252,IdentifierMutator-Variable,lpad,"''",1,0.16773286,<mask>," = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(<mask>).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                "
1780,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24249,24252,IdentifierMutator-Variable,lpad,prefix,2,0.09896985,<mask>," = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(<mask>).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                "
1781,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24249,24252,IdentifierMutator-Variable,lpad,"','",3,0.05714415,<mask>," = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(<mask>).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                "
1782,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24249,24252,IdentifierMutator-Variable,lpad,"',",4,0.025446858,<mask>," = options.helpOptions();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(<mask>).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                "
1783,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24262,24277,IdentifierMutator-Variable,defaultOptPrefix,"''",0,0.19708242,<mask>,"();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(<mask>).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option"
1784,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24262,24277,IdentifierMutator-Variable,defaultOptPrefix,"','",1,0.15645164,<mask>,"();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(<mask>).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option"
1785,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24262,24277,IdentifierMutator-Variable,defaultOptPrefix,"'",2,0.13728411,<mask>,"();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(<mask>).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option"
1786,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24262,24277,IdentifierMutator-Variable,defaultOptPrefix,"'",3,0.0649285,<mask>,"();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(<mask>).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option"
1787,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24262,24277,IdentifierMutator-Variable,defaultOptPrefix,"\""",4,0.037766494,<mask>,"();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(<mask>).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option"
1788,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24262,24277,FieldReferenceMutator,defaultOptPrefix,"''",0,0.19708242,<mask>,"();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(<mask>).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option"
1789,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24262,24277,FieldReferenceMutator,defaultOptPrefix,"','",1,0.15645164,<mask>,"();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(<mask>).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option"
1790,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24262,24277,FieldReferenceMutator,defaultOptPrefix,"'",2,0.13728411,<mask>,"();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(<mask>).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option"
1791,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24262,24277,FieldReferenceMutator,defaultOptPrefix,"'",3,0.0649285,<mask>,"();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(<mask>).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option"
1792,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24262,24277,FieldReferenceMutator,defaultOptPrefix,"\""",4,0.037766494,<mask>,"();

        Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(<mask>).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option"
1793,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24294,24299,MethodCallMutator,getOpt,name,0,0.22668363,option.<mask>()," Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.<mask>());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
 "
1794,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24294,24299,MethodCallMutator,getOpt,get,1,0.18661253,option.<mask>()," Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.<mask>());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
 "
1795,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24294,24299,MethodCallMutator,getOpt,help,2,0.1646944,option.<mask>()," Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.<mask>());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
 "
1796,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24294,24299,MethodCallMutator,getOpt,value,3,0.03433251,option.<mask>()," Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.<mask>());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
 "
1797,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24294,24299,MethodCallMutator,getOpt,opt,4,0.028098019,option.<mask>()," Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.<mask>());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
 "
1798,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24287,24292,IdentifierMutator-Variable,option,Option,2,2.9931267E-4,<mask>,"   Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(<mask>.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank arg"
1799,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24287,24292,IdentifierMutator-Variable,option,options,3,1.9400308E-4,<mask>,"   Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(<mask>.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank arg"
1800,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,778,24287,24292,IdentifierMutator-Variable,option,section,4,7.5421594E-5,<mask>,"   Collections.sort(optList, getOptionComparator());

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(<mask>.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank arg"
1801,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,780,24333,24342,MethodCallMutator,hasLongOpt,optional,0,0.15242906,option.<mask>()," i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.<mask>())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append('"
1802,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,780,24333,24342,MethodCallMutator,hasLongOpt,has,1,0.115230575,option.<mask>()," i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.<mask>())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append('"
1803,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,780,24333,24342,MethodCallMutator,hasLongOpt,help,2,0.10261749,option.<mask>()," i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.<mask>())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append('"
1804,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,780,24333,24342,MethodCallMutator,hasLongOpt,long,3,0.09877968,option.<mask>()," i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.<mask>())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append('"
1805,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,780,24333,24342,MethodCallMutator,hasLongOpt,flag,4,0.047987264,option.<mask>()," i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.<mask>())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append('"
1806,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,780,24326,24331,IdentifierMutator-Variable,option,options,1,2.469156E-4,<mask>," (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (<mask>.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optB"
1807,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,780,24326,24331,IdentifierMutator-Variable,option,Option,3,6.309972E-5,<mask>," (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (<mask>.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optB"
1808,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,780,24326,24331,IdentifierMutator-Variable,option,section,4,5.3273805E-5,<mask>," (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (<mask>.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optB"
1809,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24433,24438,MethodCallMutator,append,join,1,4.4586742E-4,"optBuf.<mask>(',').<mask>(defaultLongOptPrefix).<mask>(option.getLongOpt())","Buf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).<mask>(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
 "
1810,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24433,24438,MethodCallMutator,append,end,2,1.3426953E-4,"optBuf.<mask>(',').<mask>(defaultLongOptPrefix).<mask>(option.getLongOpt())","Buf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).<mask>(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
 "
1811,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24433,24438,MethodCallMutator,append,add,3,6.0582384E-5,"optBuf.<mask>(',').<mask>(defaultLongOptPrefix).<mask>(option.getLongOpt())","Buf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).<mask>(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
 "
1812,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24433,24438,MethodCallMutator,append,replace,4,3.3786644E-5,"optBuf.<mask>(',').<mask>(defaultLongOptPrefix).<mask>(option.getLongOpt())","Buf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).<mask>(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
 "
1813,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24404,24409,MethodCallMutator,append,join,1,0.0021154508,"optBuf.<mask>(',').<mask>(defaultLongOptPrefix)","        optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').<mask>(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
          "
1814,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24404,24409,MethodCallMutator,append,replace,2,9.946241E-5,"optBuf.<mask>(',').<mask>(defaultLongOptPrefix)","        optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').<mask>(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
          "
1815,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24404,24409,MethodCallMutator,append,add,3,9.884457E-5,"optBuf.<mask>(',').<mask>(defaultLongOptPrefix)","        optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').<mask>(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
          "
1816,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24404,24409,MethodCallMutator,append,end,4,9.680414E-5,"optBuf.<mask>(',').<mask>(defaultLongOptPrefix)","        optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').<mask>(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
          "
1817,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24392,24397,MethodCallMutator,append,replace,1,0.0021242185,"optBuf.<mask>(',')","            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.<mask>(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
      "
1818,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24392,24397,MethodCallMutator,append,join,2,4.167194E-4,"optBuf.<mask>(',')","            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.<mask>(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
      "
1819,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24392,24397,MethodCallMutator,append,repeat,3,6.727158E-5,"optBuf.<mask>(',')","            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.<mask>(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
      "
1820,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24392,24397,MethodCallMutator,append,push,4,6.212841E-5,"optBuf.<mask>(',')","            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.<mask>(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
      "
1821,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24385,24390,IdentifierMutator-Variable,optBuf,buf,0,0.22380987,<mask>," {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {<mask>.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
    "
1822,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24385,24390,IdentifierMutator-Variable,optBuf,out,1,0.091954894,<mask>," {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {<mask>.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
    "
1823,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24385,24390,IdentifierMutator-Variable,optBuf,ret,2,0.051375043,<mask>," {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {<mask>.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
    "
1824,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24385,24390,IdentifierMutator-Variable,optBuf,buffer,3,0.044358898,<mask>," {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {<mask>.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
    "
1825,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24385,24390,IdentifierMutator-Variable,optBuf,b,4,0.042611882,<mask>," {
            Option option = (Option) i.next();
            optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {<mask>.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
    "
1826,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24399,24401,IdentifierMutator-Literal,"','",pad,0,0.5299732,<mask>,"          optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(<mask>).append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
        "
1827,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24399,24401,IdentifierMutator-Literal,"','",prefix,1,0.043053184,<mask>,"          optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(<mask>).append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
        "
1828,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24399,24401,IdentifierMutator-Literal,"','",format,2,0.013580245,<mask>,"          optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(<mask>).append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
        "
1829,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24399,24401,IdentifierMutator-Literal,"','","''",3,0.013242553,<mask>,"          optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(<mask>).append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
        "
1830,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24399,24401,IdentifierMutator-Literal,"','",ln,4,0.011811611,<mask>,"          optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(<mask>).append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
        "
1831,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24411,24430,IdentifierMutator-Variable,defaultLongOptPrefix,prefix,0,0.20082007,<mask>,"      optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(<mask>).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {"
1832,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24411,24430,IdentifierMutator-Variable,defaultLongOptPrefix,pad,1,0.15191068,<mask>,"      optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(<mask>).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {"
1833,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24411,24430,IdentifierMutator-Variable,defaultLongOptPrefix,"''",2,0.06996236,<mask>,"      optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(<mask>).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {"
1834,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24411,24430,IdentifierMutator-Variable,defaultLongOptPrefix,format,3,0.028057992,<mask>,"      optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(<mask>).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {"
1835,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24411,24430,IdentifierMutator-Variable,defaultLongOptPrefix,padding,4,0.016563391,<mask>,"      optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(<mask>).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {"
1836,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24411,24430,FieldReferenceMutator,defaultLongOptPrefix,prefix,0,0.20082007,<mask>,"      optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(<mask>).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {"
1837,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24411,24430,FieldReferenceMutator,defaultLongOptPrefix,pad,1,0.15191068,<mask>,"      optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(<mask>).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {"
1838,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24411,24430,FieldReferenceMutator,defaultLongOptPrefix,"''",2,0.06996236,<mask>,"      optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(<mask>).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {"
1839,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24411,24430,FieldReferenceMutator,defaultLongOptPrefix,format,3,0.028057992,<mask>,"      optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(<mask>).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {"
1840,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24411,24430,FieldReferenceMutator,defaultLongOptPrefix,padding,4,0.016563391,<mask>,"      optBuf = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(<mask>).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {"
1841,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24447,24456,MethodCallMutator,getLongOpt,get,0,0.3122432,option.<mask>()," StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.<mask>());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
       "
1842,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24447,24456,MethodCallMutator,getLongOpt,help,1,0.12053556,option.<mask>()," StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.<mask>());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
       "
1843,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24447,24456,MethodCallMutator,getLongOpt,opt,2,0.07046981,option.<mask>()," StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.<mask>());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
       "
1844,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24447,24456,MethodCallMutator,getLongOpt,long,3,0.06825663,option.<mask>()," StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.<mask>());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
       "
1845,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24447,24456,MethodCallMutator,getLongOpt,val,4,0.047384616,option.<mask>()," StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.<mask>());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
       "
1846,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24440,24445,IdentifierMutator-Variable,option,Option,2,1.16947194E-4,<mask>," = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(<mask>.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
   "
1847,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24440,24445,IdentifierMutator-Variable,option,options,3,1.0514799E-4,<mask>," = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(<mask>.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
   "
1848,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,782,24440,24445,IdentifierMutator-Variable,option,section,4,1.8810368E-5,<mask>," = new StringBuffer();
            
            if (option.getOpt() == null)
            {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(<mask>.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
   "
1849,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,786,24518,24523,MethodCallMutator,hasArg,optional,0,0.20488127,option.<mask>()," {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.<mask>())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
              "
1850,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,786,24518,24523,MethodCallMutator,hasArg,has,1,0.111668564,option.<mask>()," {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.<mask>())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
              "
1851,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,786,24518,24523,MethodCallMutator,hasArg,get,2,0.06069103,option.<mask>()," {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.<mask>())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
              "
1852,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,786,24518,24523,MethodCallMutator,hasArg,help,3,0.059726518,option.<mask>()," {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.<mask>())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
              "
1853,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,786,24518,24523,MethodCallMutator,hasArg,long,4,0.03641116,option.<mask>()," {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.<mask>())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
              "
1854,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,786,24511,24516,IdentifierMutator-Variable,option,options,1,0.0016264918,<mask>,"   {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (<mask>.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
           "
1855,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,786,24511,24516,IdentifierMutator-Variable,option,Option,3,3.3606574E-4,<mask>,"   {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (<mask>.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
           "
1856,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,786,24511,24516,IdentifierMutator-Variable,option,argument,4,2.0704806E-4,<mask>,"   {
                optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (<mask>.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
           "
1857,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,788,24582,24591,MethodCallMutator,getArgName,arg,0,0.5730844,option.<mask>(),"append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.<mask>();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
  "
1858,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,788,24582,24591,MethodCallMutator,getArgName,name,1,0.13853943,option.<mask>(),"append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.<mask>();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
  "
1859,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,788,24582,24591,MethodCallMutator,getArgName,get,2,0.047840796,option.<mask>(),"append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.<mask>();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
  "
1860,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,788,24582,24591,MethodCallMutator,getArgName,args,3,0.047360964,option.<mask>(),"append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.<mask>();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
  "
1861,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,788,24582,24591,MethodCallMutator,getArgName,Arg,4,0.029097605,option.<mask>(),"append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.<mask>();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
  "
1862,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,788,24575,24580,IdentifierMutator-Variable,option,argument,2,0.0017959304,<mask>,"ix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName =<mask>.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"
1863,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,788,24575,24580,IdentifierMutator-Variable,option,options,3,0.0013479058,<mask>,"ix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName =<mask>.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"
1864,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,788,24575,24580,IdentifierMutator-Variable,option,command,4,3.0318525E-4,<mask>,"ix).append(option.getLongOpt());
            }
            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName =<mask>.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"
1865,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24631,24634,BinaryOperatorMutator,&&,&,2,0.0073740473,(argName != null) <mask> (argName.length() == 0),"        else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null<mask>argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
         "
1866,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24631,24634,BinaryOperatorMutator,&&,?,3,0.0018971417,(argName != null) <mask> (argName.length() == 0),"        else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null<mask>argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
         "
1867,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24631,24634,BinaryOperatorMutator,&&,AND,4,9.983982E-4,(argName != null) <mask> (argName.length() == 0),"        else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null<mask>argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
         "
1868,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24623,24626,BinaryOperatorMutator,!=,==,1,0.007829419,argName <mask> null,"          else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName<mask>null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
       "
1869,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24623,24626,BinaryOperatorMutator,!=,=,2,0.0027845288,argName <mask> null,"          else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName<mask>null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
       "
1870,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24623,24626,BinaryOperatorMutator,!=,==,3,5.4319325E-4,argName <mask> null,"          else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName<mask>null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
       "
1871,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24623,24626,BinaryOperatorMutator,!=,!,4,1.8902498E-4,argName <mask> null,"          else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName<mask>null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
       "
1872,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24616,24622,IdentifierMutator-Variable,argName,name,0,0.66747826,<mask>,"            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (<mask> != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
      "
1873,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24616,24622,IdentifierMutator-Variable,argName,arg,1,0.07816448,<mask>,"            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (<mask> != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
      "
1874,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24616,24622,IdentifierMutator-Variable,argName,argument,2,0.06398073,<mask>,"            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (<mask> != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
      "
1875,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24616,24622,IdentifierMutator-Variable,argName,default,3,0.023554597,<mask>,"            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (<mask> != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
      "
1876,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24616,24622,IdentifierMutator-Variable,argName,null,4,0.023069466,<mask>,"            else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (<mask> != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
      "
1877,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24627,24630,IdentifierMutator-Literal,null,"""""",2,1.461758E-4,<mask>,"         else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName !=<mask> && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
        "
1878,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24627,24630,IdentifierMutator-Literal,null,NULL,3,1.1959581E-4,<mask>,"         else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName !=<mask> && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
        "
1879,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24627,24630,IdentifierMutator-Literal,null,"''",4,3.027454E-5,<mask>,"         else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName !=<mask> && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
        "
1880,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24651,24654,BinaryOperatorMutator,==,>,0,0.60873663,argName.length() <mask> 0,"  else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length()<mask>0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

  "
1881,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24651,24654,BinaryOperatorMutator,==,>,2,0.041368354,argName.length() <mask> 0,"  else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length()<mask>0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

  "
1882,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24651,24654,BinaryOperatorMutator,==,=,3,0.003971947,argName.length() <mask> 0,"  else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length()<mask>0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

  "
1883,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24651,24654,BinaryOperatorMutator,==,!=,4,0.0038655922,argName.length() <mask> 0,"  else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length()<mask>0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

  "
1884,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24643,24648,MethodCallMutator,length,width,2,8.687649E-5,argName.<mask>(),"    else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.<mask>() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

"
1885,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24643,24648,MethodCallMutator,length,len,3,6.7376546E-5,argName.<mask>(),"    else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.<mask>() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

"
1886,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24643,24648,MethodCallMutator,length,size,4,5.6180328E-5,argName.<mask>(),"    else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.<mask>() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

"
1887,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24635,24641,IdentifierMutator-Variable,argName,name,0,0.5175432,<mask>,"       else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null &&<mask>.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
           "
1888,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24635,24641,IdentifierMutator-Variable,argName,arg,1,0.11487602,<mask>,"       else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null &&<mask>.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
           "
1889,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24635,24641,IdentifierMutator-Variable,argName,argument,2,0.08317025,<mask>,"       else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null &&<mask>.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
           "
1890,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24635,24641,IdentifierMutator-Variable,argName,option,3,0.03777981,<mask>,"       else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null &&<mask>.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
           "
1891,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24635,24641,IdentifierMutator-Variable,argName,Name,4,0.026196104,<mask>,"       else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null &&<mask>.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
           "
1892,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24655,24655,IdentifierMutator-Literal,0,1,1,0.011164109,<mask>," else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() ==<mask>)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

   "
1893,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24655,24655,IdentifierMutator-Literal,0,2,2,6.2296964E-4,<mask>," else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() ==<mask>)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

   "
1894,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24655,24655,IdentifierMutator-Literal,0,3,3,3.5206112E-4,<mask>," else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() ==<mask>)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

   "
1895,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,789,24655,24655,IdentifierMutator-Literal,0,4,4,3.2326084E-4,<mask>," else
            {
                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() ==<mask>)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

   "
1896,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,792,24760,24765,MethodCallMutator,append,end,1,1.6665168E-4,"optBuf.<mask>(' ')",".hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.<mask>(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0"
1897,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,792,24760,24765,MethodCallMutator,append,join,2,1.6550752E-4,"optBuf.<mask>(' ')",".hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.<mask>(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0"
1898,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,792,24760,24765,MethodCallMutator,append,push,3,1.4594458E-4,"optBuf.<mask>(' ')",".hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.<mask>(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0"
1899,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,792,24760,24765,MethodCallMutator,append,add,4,7.735211E-5,"optBuf.<mask>(' ')",".hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.<mask>(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0"
1900,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,792,24753,24758,IdentifierMutator-Variable,optBuf,buf,0,0.21682581,<mask>,"option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname<mask>.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x"
1901,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,792,24753,24758,IdentifierMutator-Variable,optBuf,out,1,0.09007795,<mask>,"option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname<mask>.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x"
1902,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,792,24753,24758,IdentifierMutator-Variable,optBuf,buffer,2,0.050494563,<mask>,"option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname<mask>.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x"
1903,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,792,24753,24758,IdentifierMutator-Variable,optBuf,option,3,0.045509145,<mask>,"option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname<mask>.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x"
1904,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,792,24753,24758,IdentifierMutator-Variable,optBuf,args,4,0.037045877,<mask>,"option.getOpt());

                if (option.hasLongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname<mask>.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x"
1905,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,792,24767,24769,IdentifierMutator-Literal,"''",null,1,0.13946682,<mask>,"LongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(<mask>);
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

"
1906,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,792,24767,24769,IdentifierMutator-Literal,"''",default,2,0.035607222,<mask>,"LongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(<mask>);
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

"
1907,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,792,24767,24769,IdentifierMutator-Literal,"''","\""",3,0.034436285,<mask>,"LongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(<mask>);
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

"
1908,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,792,24767,24769,IdentifierMutator-Literal,"''",empty,4,0.029023904,<mask>,"LongOpt())
                {
                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(<mask>);
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

"
1909,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24857,24862,MethodCallMutator,append,write,1,7.932925E-5,"optBuf.<mask>(option.hasLongOpt() ? longOptSeparator : "" "")","    }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.<mask>(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList."
1910,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24857,24862,MethodCallMutator,append,end,2,6.123078E-5,"optBuf.<mask>(option.hasLongOpt() ? longOptSeparator : "" "")","    }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.<mask>(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList."
1911,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24857,24862,MethodCallMutator,append,push,3,5.8911468E-5,"optBuf.<mask>(option.hasLongOpt() ? longOptSeparator : "" "")","    }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.<mask>(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList."
1912,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24850,24855,IdentifierMutator-Variable,optBuf,prefix,0,0.09955566,<mask>,"Prefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {<mask>.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefix"
1913,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24850,24855,IdentifierMutator-Variable,optBuf,buf,1,0.09373917,<mask>,"Prefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {<mask>.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefix"
1914,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24850,24855,IdentifierMutator-Variable,optBuf,out,2,0.065313175,<mask>,"Prefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {<mask>.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefix"
1915,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24850,24855,IdentifierMutator-Variable,optBuf,buffer,3,0.0426369,<mask>,"Prefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {<mask>.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefix"
1916,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24850,24855,IdentifierMutator-Variable,optBuf,prefix,4,0.02825948,<mask>,"Prefix).append(option.getLongOpt());
                }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {<mask>.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefix"
1917,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24864,24907,IdentifierMutator-Conditional,"option.hasLongOpt()?longOptSeparator:""""",option,0,0.079165235,<mask>,"  }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(<mask>);
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

       "
1918,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24864,24907,IdentifierMutator-Conditional,"option.hasLongOpt()?longOptSeparator:""""",prefix,1,0.04271964,<mask>,"  }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(<mask>);
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

       "
1919,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24864,24907,IdentifierMutator-Conditional,"option.hasLongOpt()?longOptSeparator:""""","\""",2,0.039691355,<mask>,"  }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(<mask>);
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

       "
1920,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24864,24907,IdentifierMutator-Conditional,"option.hasLongOpt()?longOptSeparator:""""",opt,3,0.036713403,<mask>,"  }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(<mask>);
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

       "
1921,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24864,24907,IdentifierMutator-Conditional,"option.hasLongOpt()?longOptSeparator:""""",value,4,0.028963972,<mask>,"  }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(<mask>);
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

       "
1922,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24871,24880,MethodCallMutator,hasLongOpt,long,0,0.91780406,option.<mask>(),"
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.<mask>() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).to"
1923,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24871,24880,MethodCallMutator,hasLongOpt,help,1,0.0119653195,option.<mask>(),"
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.<mask>() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).to"
1924,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24871,24880,MethodCallMutator,hasLongOpt,optional,2,0.010159852,option.<mask>(),"
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.<mask>() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).to"
1925,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24871,24880,MethodCallMutator,hasLongOpt,short,3,0.0038219793,option.<mask>(),"
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.<mask>() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).to"
1926,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24871,24880,MethodCallMutator,hasLongOpt,Long,4,0.0036977255,option.<mask>(),"
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.<mask>() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).to"
1927,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24864,24869,IdentifierMutator-Variable,option,Option,2,0.00580756,<mask>,"  }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(<mask>.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get("
1928,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24864,24869,IdentifierMutator-Variable,option,options,3,0.004762231,<mask>,"  }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(<mask>.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get("
1929,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24864,24869,IdentifierMutator-Variable,option,this,4,0.0014827742,<mask>,"  }
            }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(<mask>.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get("
1930,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24886,24901,IdentifierMutator-Variable,longOptSeparator,"""""",0,0.75123405,<mask>,"        }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ?<mask> : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

    "
1931,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24886,24901,IdentifierMutator-Variable,longOptSeparator,"''",1,0.051704854,<mask>,"        }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ?<mask> : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

    "
1932,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24886,24901,IdentifierMutator-Variable,longOptSeparator,"""",2,0.039546218,<mask>,"        }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ?<mask> : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

    "
1933,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24886,24901,IdentifierMutator-Variable,longOptSeparator,"""+",3,0.019509643,<mask>,"        }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ?<mask> : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

    "
1934,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24886,24901,IdentifierMutator-Variable,longOptSeparator,NL,4,0.008014168,<mask>,"        }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ?<mask> : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

    "
1935,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24886,24901,FieldReferenceMutator,longOptSeparator,"""""",0,0.75123405,<mask>,"        }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ?<mask> : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

    "
1936,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24886,24901,FieldReferenceMutator,longOptSeparator,"''",1,0.051704854,<mask>,"        }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ?<mask> : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

    "
1937,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24886,24901,FieldReferenceMutator,longOptSeparator,"""",2,0.039546218,<mask>,"        }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ?<mask> : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

    "
1938,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24886,24901,FieldReferenceMutator,longOptSeparator,"""+",3,0.019509643,<mask>,"        }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ?<mask> : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

    "
1939,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24886,24901,FieldReferenceMutator,longOptSeparator,NL,4,0.008014168,<mask>,"        }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ?<mask> : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

    "
1940,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24905,24907,IdentifierMutator-Literal,"""""","''",1,0.26428327,<mask>,"  }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator :<mask>);
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

       "
1941,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24905,24907,IdentifierMutator-Literal,"""""",null,2,0.05740239,<mask>,"  }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator :<mask>);
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

       "
1942,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24905,24907,IdentifierMutator-Literal,"""""","""",3,0.0067571136,<mask>,"  }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator :<mask>);
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

       "
1943,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,796,24905,24907,IdentifierMutator-Literal,"""""",sep,4,0.006688449,<mask>,"  }

            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator :<mask>);
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

       "
1944,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,25011,25016,MethodCallMutator,append,join,1,0.016993184,"optBuf.<mask>(""<"").<mask>(argName != null ? option.getArgName() : getArgName()).<mask>("">"")"," String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).<mask>("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append"
1945,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,25011,25016,MethodCallMutator,append,format,2,9.2368614E-4,"optBuf.<mask>(""<"").<mask>(argName != null ? option.getArgName() : getArgName()).<mask>("">"")"," String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).<mask>("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append"
1946,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,25011,25016,MethodCallMutator,append,replace,3,9.021737E-4,"optBuf.<mask>(""<"").<mask>(argName != null ? option.getArgName() : getArgName()).<mask>("">"")"," String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).<mask>("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append"
1947,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,25011,25016,MethodCallMutator,append,escape,4,3.7693224E-4,"optBuf.<mask>(""<"").<mask>(argName != null ? option.getArgName() : getArgName()).<mask>("">"")"," String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).<mask>("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append"
1948,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24950,24955,MethodCallMutator,append,+,1,0.026254382,"optBuf.<mask>(""<"").<mask>(argName != null ? option.getArgName() : getArgName())","   {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").<mask>(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
 "
1949,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24950,24955,MethodCallMutator,append,escape,2,0.011442311,"optBuf.<mask>(""<"").<mask>(argName != null ? option.getArgName() : getArgName())","   {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").<mask>(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
 "
1950,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24950,24955,MethodCallMutator,append,add,3,0.011106313,"optBuf.<mask>(""<"").<mask>(argName != null ? option.getArgName() : getArgName())","   {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").<mask>(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
 "
1951,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24950,24955,MethodCallMutator,append,format,4,0.0075601656,"optBuf.<mask>(""<"").<mask>(argName != null ? option.getArgName() : getArgName())","   {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").<mask>(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
 "
1952,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24938,24943,MethodCallMutator,append,join,1,1.5628434E-4,"optBuf.<mask>(""<"")","       {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.<mask>(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
          "
1953,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24938,24943,MethodCallMutator,append,end,2,1.2738876E-4,"optBuf.<mask>(""<"")","       {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.<mask>(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
          "
1954,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24938,24943,MethodCallMutator,append,add,3,1.2386263E-4,"optBuf.<mask>(""<"")","       {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.<mask>(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
          "
1955,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24931,24936,IdentifierMutator-Variable,optBuf,buf,0,0.21636751,<mask>,"            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");<mask>.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
        "
1956,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24931,24936,IdentifierMutator-Variable,optBuf,buffer,1,0.08995796,<mask>,"            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");<mask>.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
        "
1957,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24931,24936,IdentifierMutator-Variable,optBuf,out,2,0.08565123,<mask>,"            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");<mask>.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
        "
1958,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24931,24936,IdentifierMutator-Variable,optBuf,prefix,3,0.07743096,<mask>,"            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");<mask>.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
        "
1959,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24931,24936,IdentifierMutator-Variable,optBuf,builder,4,0.044937626,<mask>,"            if (option.hasArg())
            {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");<mask>.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
        "
1960,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24945,24947,IdentifierMutator-Literal,"""<""",prefix,0,0.24820405,<mask>,"     {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(<mask>).append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {"
1961,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24945,24947,IdentifierMutator-Literal,"""<""",option,1,0.10821682,<mask>,"     {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(<mask>).append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {"
1962,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24945,24947,IdentifierMutator-Literal,"""<""",opt,2,0.042828817,<mask>,"     {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(<mask>).append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {"
1963,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24945,24947,IdentifierMutator-Literal,"""<""",tag,3,0.027339457,<mask>,"     {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(<mask>).append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {"
1964,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24945,24947,IdentifierMutator-Literal,"""<""","\""",4,0.02711227,<mask>,"     {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(<mask>).append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {"
1965,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24957,25008,IdentifierMutator-Conditional,argName!=null?option.getArgName():getArgName(),option,0,0.7197366,<mask>," {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(<mask>).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf"
1966,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24957,25008,IdentifierMutator-Conditional,argName!=null?option.getArgName():getArgName(),prefix,1,0.05893664,<mask>," {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(<mask>).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf"
1967,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24957,25008,IdentifierMutator-Conditional,argName!=null?option.getArgName():getArgName(),opt,2,0.04363989,<mask>," {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(<mask>).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf"
1968,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24957,25008,IdentifierMutator-Conditional,argName!=null?option.getArgName():getArgName(),name,3,0.030645402,<mask>," {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(<mask>).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf"
1969,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24957,25008,IdentifierMutator-Conditional,argName!=null?option.getArgName():getArgName(),key,4,0.010408304,<mask>," {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(<mask>).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf"
1970,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24964,24967,BinaryOperatorMutator,!=,==,1,0.019458143,argName <mask> null,"                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName<mask>null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
     "
1971,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24964,24967,BinaryOperatorMutator,!=,==,2,0.009839114,argName <mask> null,"                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName<mask>null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
     "
1972,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24964,24967,BinaryOperatorMutator,!=,=,3,0.0027321137,argName <mask> null,"                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName<mask>null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
     "
1973,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24964,24967,BinaryOperatorMutator,!=,.,4,2.4213809E-4,argName <mask> null,"                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName<mask>null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
     "
1974,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24957,24963,IdentifierMutator-Variable,argName,option,0,0.97209585,<mask>," {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(<mask> != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
    "
1975,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24957,24963,IdentifierMutator-Variable,argName,option,1,0.019414485,<mask>," {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(<mask> != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
    "
1976,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24957,24963,IdentifierMutator-Variable,argName,Option,2,0.0029443502,<mask>," {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(<mask> != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
    "
1977,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24957,24963,IdentifierMutator-Variable,argName,argument,3,0.0011898587,<mask>," {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(<mask> != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
    "
1978,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24957,24963,IdentifierMutator-Variable,argName,optional,4,6.266122E-4,<mask>," {
                String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(<mask> != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
    "
1979,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24968,24971,IdentifierMutator-Literal,null,"""""",1,4.9965683E-4,<mask>,"               String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName !=<mask> ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
      "
1980,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24968,24971,IdentifierMutator-Literal,null,NULL,3,8.899784E-5,<mask>,"               String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName !=<mask> ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
      "
1981,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24968,24971,IdentifierMutator-Literal,null,0,4,8.0225305E-5,<mask>,"               String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName !=<mask> ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
      "
1982,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24982,24991,MethodCallMutator,getArgName,name,0,0.5004166,option.<mask>(),"           String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.<mask>() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
            "
1983,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24982,24991,MethodCallMutator,getArgName,value,1,0.1470912,option.<mask>(),"           String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.<mask>() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
            "
1984,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24982,24991,MethodCallMutator,getArgName,help,2,0.045157485,option.<mask>(),"           String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.<mask>() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
            "
1985,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24982,24991,MethodCallMutator,getArgName,get,3,0.03083993,option.<mask>(),"           String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.<mask>() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
            "
1986,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24982,24991,MethodCallMutator,getArgName,key,4,0.025701215,option.<mask>(),"           String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.<mask>() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
            "
1987,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24975,24980,IdentifierMutator-Variable,option,argument,2,0.0010372578,<mask>,"             String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ?<mask>.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
        "
1988,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24975,24980,IdentifierMutator-Variable,option,options,3,2.131261E-4,<mask>,"             String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ?<mask>.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
        "
1989,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24975,24980,IdentifierMutator-Variable,option,parameter,4,5.5642457E-5,<mask>,"             String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ?<mask>.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
        "
1990,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24997,25006,MethodCallMutator,getArgName,name,0,0.464201,<mask>(),"      String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() :<mask>()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optB"
1991,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24997,25006,MethodCallMutator,getArgName,empty,1,0.046047017,<mask>(),"      String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() :<mask>()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optB"
1992,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24997,25006,MethodCallMutator,getArgName,trim,2,0.032084867,<mask>(),"      String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() :<mask>()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optB"
1993,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24997,25006,MethodCallMutator,getArgName,help,3,0.02990707,<mask>(),"      String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() :<mask>()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optB"
1994,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,24997,25006,MethodCallMutator,getArgName,option,4,0.028384794,<mask>(),"      String argName = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() :<mask>()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optB"
1995,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,25018,25020,IdentifierMutator-Literal,""">""",>,0,0.35958007,<mask>,"Name = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append(<mask>);
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(create"
1996,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,25018,25020,IdentifierMutator-Literal,""">""",>>,1,0.23078045,<mask>,"Name = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append(<mask>);
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(create"
1997,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,25018,25020,IdentifierMutator-Literal,""">""",">""",2,0.08623488,<mask>,"Name = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append(<mask>);
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(create"
1998,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,25018,25020,IdentifierMutator-Literal,""">""",/>,3,0.03625536,<mask>,"Name = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append(<mask>);
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(create"
1999,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,797,25018,25020,IdentifierMutator-Literal,""">""","\""",4,0.035672955,<mask>,"Name = option.getArgName();
                if (argName != null && argName.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append(<mask>);
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(create"
2000,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,801,25080,25082,MethodCallMutator,add,append,1,0.0086443545,prefixList.<mask>(optBuf),"         {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.<mask>(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

"
2001,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,801,25080,25082,MethodCallMutator,add,push,2,0.008046259,prefixList.<mask>(optBuf),"         {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.<mask>(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

"
2002,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,801,25080,25082,MethodCallMutator,add,remove,3,0.0047845864,prefixList.<mask>(optBuf),"         {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.<mask>(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

"
2003,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,801,25080,25082,MethodCallMutator,add,set,4,0.0025901648,prefixList.<mask>(optBuf),"         {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.<mask>(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

"
2004,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,801,25069,25078,IdentifierMutator-Variable,prefixList,list,0,0.34240484,<mask>,"Name.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }<mask>.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad"
2005,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,801,25069,25078,IdentifierMutator-Variable,prefixList,result,1,0.06490416,<mask>,"Name.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }<mask>.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad"
2006,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,801,25069,25078,IdentifierMutator-Variable,prefixList,List,2,0.05659287,<mask>,"Name.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }<mask>.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad"
2007,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,801,25069,25078,IdentifierMutator-Variable,prefixList,options,3,0.0486361,<mask>,"Name.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }<mask>.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad"
2008,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,801,25069,25078,IdentifierMutator-Variable,prefixList,prefix,4,0.027489882,<mask>,"Name.length() == 0)
                {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }<mask>.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad"
2009,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,801,25084,25089,IdentifierMutator-Variable,optBuf,prefix,0,0.9242675,<mask>,"       {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(<mask>);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

    "
2010,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,801,25084,25089,IdentifierMutator-Variable,optBuf,option,1,0.00995873,<mask>,"       {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(<mask>);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

    "
2011,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,801,25084,25089,IdentifierMutator-Variable,optBuf,max,2,0.0066220104,<mask>,"       {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(<mask>);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

    "
2012,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,801,25084,25089,IdentifierMutator-Variable,optBuf,name,3,0.0045576566,<mask>,"       {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(<mask>);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

    "
2013,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,801,25084,25089,IdentifierMutator-Variable,optBuf,opt,4,0.0040810998,<mask>,"       {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(<mask>);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

    "
2014,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25108,25108,AssignmentMutator,max=(optBuf.length()>max)?optBuf.length():max,*,0,0.31562886,max <mask>= (optBuf.length() > max) ? optBuf.length() : max,"           // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max<mask>= (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max"
2015,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25108,25108,AssignmentMutator,max=(optBuf.length()>max)?optBuf.length():max,<,1,0.1645432,max <mask>= (optBuf.length() > max) ? optBuf.length() : max,"           // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max<mask>= (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max"
2016,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25108,25108,AssignmentMutator,max=(optBuf.length()>max)?optBuf.length():max,<,2,0.11421055,max <mask>= (optBuf.length() > max) ? optBuf.length() : max,"           // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max<mask>= (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max"
2017,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25108,25108,AssignmentMutator,max=(optBuf.length()>max)?optBuf.length():max,|,3,0.069234885,max <mask>= (optBuf.length() > max) ? optBuf.length() : max,"           // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max<mask>= (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max"
2018,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25108,25108,AssignmentMutator,max=(optBuf.length()>max)?optBuf.length():max,!,4,0.053000305,max <mask>= (optBuf.length() > max) ? optBuf.length() : max,"           // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max<mask>= (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max"
2019,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25105,25107,IdentifierMutator-Variable,max,x,2,0.034703273,<mask>,"   {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);<mask> = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max"
2020,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25105,25107,IdentifierMutator-Variable,max,x,3,0.005960767,<mask>,"   {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);<mask> = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max"
2021,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25105,25107,IdentifierMutator-Variable,max,Max,4,0.0026272472,<mask>,"   {
                    // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);<mask> = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max"
2022,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25111,25157,IdentifierMutator-Conditional,(optBuf.length()>max)?optBuf.length():max,0,0,0.35265082,<mask>,"          // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max =<mask>;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option."
2023,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25111,25157,IdentifierMutator-Conditional,(optBuf.length()>max)?optBuf.length():max,max,1,0.16275716,<mask>,"          // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max =<mask>;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option."
2024,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25111,25157,IdentifierMutator-Conditional,(optBuf.length()>max)?optBuf.length():max,1,2,0.15287244,<mask>,"          // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max =<mask>;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option."
2025,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25111,25157,IdentifierMutator-Conditional,(optBuf.length()>max)?optBuf.length():max,i,3,0.027445372,<mask>,"          // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max =<mask>;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option."
2026,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25111,25157,IdentifierMutator-Conditional,(optBuf.length()>max)?optBuf.length():max,x,4,0.020211913,<mask>,"          // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max =<mask>;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option."
2027,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25127,25129,BinaryOperatorMutator,>,<,0,0.5514908,optBuf.length() <mask> max,"   // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length()<mask>max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

    "
2028,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25127,25129,BinaryOperatorMutator,>,<,3,0.04811911,optBuf.length() <mask> max,"   // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length()<mask>max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

    "
2029,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25127,25129,BinaryOperatorMutator,>,<=,4,0.010040534,optBuf.length() <mask> max,"   // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length()<mask>max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

    "
2030,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25119,25124,MethodCallMutator,length,len,1,9.277856E-6,optBuf.<mask>(),"     // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.<mask>() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

  "
2031,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25119,25124,MethodCallMutator,length,Length,2,7.667883E-6,optBuf.<mask>(),"     // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.<mask>() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

  "
2032,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25119,25124,MethodCallMutator,length,position,3,7.6078345E-6,optBuf.<mask>(),"     // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.<mask>() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

  "
2033,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25119,25124,MethodCallMutator,length,size,4,7.215837E-6,optBuf.<mask>(),"     // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.<mask>() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

  "
2034,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25112,25117,IdentifierMutator-Variable,optBuf,max,0,0.9283513,<mask>,"         // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (<mask>.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

"
2035,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25112,25117,IdentifierMutator-Variable,optBuf,prefix,1,0.011524543,<mask>,"         // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (<mask>.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

"
2036,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25112,25117,IdentifierMutator-Variable,optBuf,opt,2,0.004410217,<mask>,"         // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (<mask>.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

"
2037,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25112,25117,IdentifierMutator-Variable,optBuf,buf,3,0.0032989916,<mask>,"         // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (<mask>.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

"
2038,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25112,25117,IdentifierMutator-Variable,optBuf,Max,4,0.0032426303,<mask>,"         // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (<mask>.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

"
2039,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25130,25132,IdentifierMutator-Variable,max,0,1,0.00986149,<mask>,"  // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() ><mask>) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

     "
2040,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25130,25132,IdentifierMutator-Variable,max,1,2,0.0015248122,<mask>,"  // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() ><mask>) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

     "
2041,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25130,25132,IdentifierMutator-Variable,max,min,3,9.2542765E-4,<mask>,"  // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() ><mask>) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

     "
2042,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25130,25132,IdentifierMutator-Variable,max,MAX,4,5.9500523E-4,<mask>,"  // if the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() ><mask>) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

     "
2043,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25144,25149,MethodCallMutator,length,position,1,1.3543702E-4,optBuf.<mask>()," blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.<mask>() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if"
2044,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25144,25149,MethodCallMutator,length,limit,2,4.1090567E-5,optBuf.<mask>()," blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.<mask>() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if"
2045,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25144,25149,MethodCallMutator,length,size,3,1.8756384E-5,optBuf.<mask>()," blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.<mask>() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if"
2046,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25144,25149,MethodCallMutator,length,len,4,1.1060515E-5,optBuf.<mask>()," blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.<mask>() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if"
2047,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25137,25142,IdentifierMutator-Variable,optBuf,max,0,0.44078118,<mask>," the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ?<mask>.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

          "
2048,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25137,25142,IdentifierMutator-Variable,optBuf,buf,1,0.1775912,<mask>," the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ?<mask>.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

          "
2049,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25137,25142,IdentifierMutator-Variable,optBuf,buffer,2,0.0748859,<mask>," the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ?<mask>.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

          "
2050,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25137,25142,IdentifierMutator-Variable,optBuf,prefix,3,0.069115676,<mask>," the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ?<mask>.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

          "
2051,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25137,25142,IdentifierMutator-Variable,optBuf,default,4,0.013174752,<mask>," the option has a blank argname
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ?<mask>.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

          "
2052,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25155,25157,IdentifierMutator-Variable,max,0,1,0.027897486,<mask>,"
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() :<mask>;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option."
2053,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25155,25157,IdentifierMutator-Variable,max,1,2,0.0043928665,<mask>,"
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() :<mask>;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option."
2054,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25155,25157,IdentifierMutator-Variable,max,null,3,0.0026342687,<mask>,"
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() :<mask>;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option."
2055,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,802,25155,25157,IdentifierMutator-Variable,max,default,4,0.0017705894,<mask>,"
                    optBuf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() :<mask>;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option."
2056,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,805,25187,25187,IdentifierMutator-Literal,0,1,1,0.080994375,<mask>,"uf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x =<mask>;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
  "
2057,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,805,25187,25187,IdentifierMutator-Literal,0,2,2,0.0040021907,<mask>,"uf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x =<mask>;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
  "
2058,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,805,25187,25187,IdentifierMutator-Literal,0,max,3,0.001608877,<mask>,"uf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x =<mask>;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
  "
2059,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,805,25187,25187,IdentifierMutator-Literal,0,3,4,0.0013612119,<mask>,"uf.append(' ');
                }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x =<mask>;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
  "
2060,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,807,25225,25232,MethodCallMutator,iterator,iter,1,0.072648175,optList.<mask>(),"     }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.<mask>(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append"
2061,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,807,25225,25232,MethodCallMutator,iterator,Iterator,2,0.0074359025,optList.<mask>(),"     }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.<mask>(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append"
2062,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,807,25225,25232,MethodCallMutator,iterator,wind,3,0.0023428116,optList.<mask>(),"     }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.<mask>(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append"
2063,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,807,25225,25232,MethodCallMutator,iterator,index,4,8.271314E-4,optList.<mask>(),"     }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.<mask>(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append"
2064,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,807,25217,25223,IdentifierMutator-Variable,optList,options,0,0.37729323,<mask>,"        }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i =<mask>.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf"
2065,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,807,25217,25223,IdentifierMutator-Variable,optList,list,1,0.17129824,<mask>,"        }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i =<mask>.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf"
2066,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,807,25217,25223,IdentifierMutator-Variable,optList,args,2,0.02903148,<mask>,"        }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i =<mask>.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf"
2067,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,807,25217,25223,IdentifierMutator-Variable,optList,prefix,3,0.017643277,<mask>,"        }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i =<mask>.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf"
2068,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,807,25217,25223,IdentifierMutator-Variable,optList,commands,4,0.017278513,<mask>,"        }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i =<mask>.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf"
2069,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,807,25239,25245,MethodCallMutator,hasNext,next,0,0.9796211,i.<mask>()," }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.<mask>();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription"
2070,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,807,25239,25245,MethodCallMutator,hasNext,Next,1,0.0056712613,i.<mask>()," }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.<mask>();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription"
2071,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,807,25239,25245,MethodCallMutator,hasNext,valid,2,0.0036487784,i.<mask>()," }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.<mask>();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription"
2072,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,807,25239,25245,MethodCallMutator,hasNext,more,3,0.0015238364,i.<mask>()," }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.<mask>();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription"
2073,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,807,25239,25245,MethodCallMutator,hasNext,continue,4,0.0014307775,i.<mask>()," }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.<mask>();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription"
2074,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,807,25237,25237,IdentifierMutator-Variable,i,I,2,2.0870422E-4,<mask>,"   }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator();<mask>.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option"
2075,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,807,25237,25237,IdentifierMutator-Variable,i,it,3,1.01624915E-4,<mask>,"   }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator();<mask>.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option"
2076,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,807,25237,25237,IdentifierMutator-Variable,i,I,4,6.87805E-5,<mask>,"   }
                else
                {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator();<mask>.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option"
2077,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,809,25300,25303,MethodCallMutator,next,current,2,2.966119E-4,((Option) (i.<mask>())),"  {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.<mask>();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb"
2078,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,809,25300,25303,MethodCallMutator,next,value,3,1.8659077E-4,((Option) (i.<mask>())),"  {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.<mask>();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb"
2079,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,809,25300,25303,MethodCallMutator,next,object,4,3.250003E-5,((Option) (i.<mask>())),"  {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.<mask>();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb"
2080,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,809,25298,25298,IdentifierMutator-Variable,i,it,2,2.0706204E-4,<mask>,"    {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option)<mask>.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText"
2081,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,809,25298,25298,IdentifierMutator-Variable,i,I,3,5.9865033E-5,<mask>,"    {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option)<mask>.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText"
2082,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,809,25298,25298,IdentifierMutator-Variable,i,iter,4,4.7581772E-5,<mask>,"    {
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option)<mask>.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText"
2083,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25326,25326,AssignmentMutator,optBuf=newjava.lang.StringBuffer(prefixList.get(x++).toString()),*,0,0.31054017,optBuf <mask>= new java.lang.StringBuffer(prefixList.get(x++).toString()),"      optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf<mask>= new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

"
2084,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25326,25326,AssignmentMutator,optBuf=newjava.lang.StringBuffer(prefixList.get(x++).toString()),||,1,0.16125831,optBuf <mask>= new java.lang.StringBuffer(prefixList.get(x++).toString()),"      optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf<mask>= new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

"
2085,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25326,25326,AssignmentMutator,optBuf=newjava.lang.StringBuffer(prefixList.get(x++).toString()),+,2,0.08805185,optBuf <mask>= new java.lang.StringBuffer(prefixList.get(x++).toString()),"      optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf<mask>= new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

"
2086,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25326,25326,AssignmentMutator,optBuf=newjava.lang.StringBuffer(prefixList.get(x++).toString()),.,3,0.0869623,optBuf <mask>= new java.lang.StringBuffer(prefixList.get(x++).toString()),"      optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf<mask>= new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

"
2087,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25326,25326,AssignmentMutator,optBuf=newjava.lang.StringBuffer(prefixList.get(x++).toString()),|,4,0.06398124,optBuf <mask>= new java.lang.StringBuffer(prefixList.get(x++).toString()),"      optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf<mask>= new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

"
2088,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25320,25325,IdentifierMutator-Variable,optBuf,buf,0,0.29020122,<mask>,"
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();<mask> = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

"
2089,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25320,25325,IdentifierMutator-Variable,optBuf,text,1,0.06208149,<mask>,"
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();<mask> = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

"
2090,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25320,25325,IdentifierMutator-Variable,optBuf,prefix,2,0.05817651,<mask>,"
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();<mask> = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

"
2091,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25320,25325,IdentifierMutator-Variable,optBuf,buffer,3,0.043722752,<mask>,"
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();<mask> = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

"
2092,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25320,25325,IdentifierMutator-Variable,optBuf,b,4,0.0347464,<mask>,"
                    optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();<mask> = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

"
2093,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25366,25373,MethodCallMutator,toString,string,0,0.25270852,prefixList.get(x++).<mask>(),"hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).<mask>());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i."
2094,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25366,25373,MethodCallMutator,toString,text,1,0.16142926,prefixList.get(x++).<mask>(),"hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).<mask>());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i."
2095,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25366,25373,MethodCallMutator,toString,value,2,0.10222585,prefixList.get(x++).<mask>(),"hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).<mask>());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i."
2096,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25366,25373,MethodCallMutator,toString,name,3,0.03465861,prefixList.get(x++).<mask>(),"hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).<mask>());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i."
2097,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25366,25373,MethodCallMutator,toString,format,4,0.023635121,prefixList.get(x++).<mask>(),"hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).<mask>());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i."
2098,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25357,25359,MethodCallMutator,get,item,1,0.11376087,prefixList.<mask>(x++),".append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.<mask>(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

         "
2099,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25357,25359,MethodCallMutator,get,remove,2,0.0074714962,prefixList.<mask>(x++),".append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.<mask>(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

         "
2100,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25357,25359,MethodCallMutator,get,element,3,0.0033605127,prefixList.<mask>(x++),".append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.<mask>(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

         "
2101,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25357,25359,MethodCallMutator,get,column,4,0.0023616485,prefixList.<mask>(x++),".append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.<mask>(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

         "
2102,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25346,25355,IdentifierMutator-Variable,prefixList,prefix,0,0.16002928,<mask>," optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(<mask>.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

       "
2103,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25346,25355,IdentifierMutator-Variable,prefixList,options,1,0.15802692,<mask>," optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(<mask>.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

       "
2104,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25346,25355,IdentifierMutator-Variable,prefixList,list,2,0.14368467,<mask>," optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(<mask>.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

       "
2105,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25346,25355,IdentifierMutator-Variable,prefixList,List,3,0.021991387,<mask>," optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(<mask>.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

       "
2106,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25346,25355,IdentifierMutator-Variable,prefixList,strings,4,0.021566529,<mask>," optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(<mask>.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

       "
2107,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25362,25363,UnaryOperatorMutator,++,0,2,0.004574217,x<mask>,"option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x<mask>).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if"
2108,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25362,25363,UnaryOperatorMutator,++,),3,0.0032116335,x<mask>,"option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x<mask>).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if"
2109,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25362,25363,UnaryOperatorMutator,++,+,4,0.0022374464,x<mask>,"option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x<mask>).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if"
2110,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25361,25361,IdentifierMutator-Variable,x,i,2,0.0014437048,<mask>,"(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(<mask>++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

           "
2111,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25361,25361,IdentifierMutator-Variable,x,index,3,6.012595E-4,<mask>,"(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(<mask>++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

           "
2112,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,810,25361,25361,IdentifierMutator-Variable,x,X,4,4.6508992E-4,<mask>,"(option.hasLongOpt() ? longOptSeparator : "" "");
                    optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(<mask>++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

           "
2113,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,812,25411,25413,BinaryOperatorMutator,<,>,0,0.46310785,optBuf.length() <mask> max,"            optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length()<mask>max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
     "
2114,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,812,25411,25413,BinaryOperatorMutator,<,>,1,0.25633067,optBuf.length() <mask> max,"            optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length()<mask>max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
     "
2115,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,812,25411,25413,BinaryOperatorMutator,<,==,4,0.023912009,optBuf.length() <mask> max,"            optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length()<mask>max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
     "
2116,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,812,25403,25408,MethodCallMutator,length,position,1,1.659196E-5,optBuf.<mask>(),"              optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.<mask>() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
   "
2117,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,812,25403,25408,MethodCallMutator,length,Length,2,8.556837E-6,optBuf.<mask>(),"              optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.<mask>() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
   "
2118,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,812,25403,25408,MethodCallMutator,length,len,3,7.221773E-6,optBuf.<mask>(),"              optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.<mask>() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
   "
2119,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,812,25403,25408,MethodCallMutator,length,size,4,4.9303385E-6,optBuf.<mask>(),"              optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.<mask>() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
   "
2120,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,812,25396,25401,IdentifierMutator-Variable,optBuf,buf,0,0.09451204,<mask>,"                  optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (<mask>.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
 "
2121,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,812,25396,25401,IdentifierMutator-Variable,optBuf,buffer,1,0.081014544,<mask>,"                  optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (<mask>.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
 "
2122,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,812,25396,25401,IdentifierMutator-Variable,optBuf,text,2,0.07777166,<mask>,"                  optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (<mask>.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
 "
2123,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,812,25396,25401,IdentifierMutator-Variable,optBuf,sb,3,0.052346095,<mask>,"                  optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (<mask>.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
 "
2124,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,812,25396,25401,IdentifierMutator-Variable,optBuf,bp,4,0.041431528,<mask>,"                  optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (<mask>.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
 "
2125,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,812,25414,25416,IdentifierMutator-Variable,max,0,1,0.0040587685,<mask>,"           optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() <<mask>)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
      "
2126,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,812,25414,25416,IdentifierMutator-Variable,max,min,2,0.0025875291,<mask>,"           optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() <<mask>)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
      "
2127,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,812,25414,25416,IdentifierMutator-Variable,max,width,3,0.0025721297,<mask>,"           optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() <<mask>)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
      "
2128,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,812,25414,25416,IdentifierMutator-Variable,max,1,4,0.0024019193,<mask>,"           optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() <<mask>)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
      "
2129,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25456,25461,MethodCallMutator,append,write,1,5.7865586E-4,optBuf.<mask>(createPadding(max - optBuf.length())),"()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.<mask>(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
   "
2130,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25456,25461,MethodCallMutator,append,replace,2,1.7749007E-4,optBuf.<mask>(createPadding(max - optBuf.length())),"()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.<mask>(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
   "
2131,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25456,25461,MethodCallMutator,append,add,3,1.2928463E-4,optBuf.<mask>(createPadding(max - optBuf.length())),"()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.<mask>(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
   "
2132,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25456,25461,MethodCallMutator,append,push,4,9.272374E-5,optBuf.<mask>(createPadding(max - optBuf.length())),"()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.<mask>(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
   "
2133,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25449,25454,IdentifierMutator-Variable,optBuf,sb,0,0.8766913,<mask>,"(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {<mask>.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
 "
2134,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25449,25454,IdentifierMutator-Variable,optBuf,buf,1,0.019839505,<mask>,"(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {<mask>.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
 "
2135,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25449,25454,IdentifierMutator-Variable,optBuf,b,2,0.0151000805,<mask>,"(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {<mask>.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
 "
2136,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25449,25454,IdentifierMutator-Variable,optBuf,b,3,0.009803814,<mask>,"(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {<mask>.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
 "
2137,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25449,25454,IdentifierMutator-Variable,optBuf,SB,4,0.0046037147,<mask>,"(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {<mask>.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
 "
2138,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25463,25475,MethodCallMutator,createPadding,pad,0,0.26469275,<mask>(max - optBuf.length()),"append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(<mask>(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
       "
2139,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25463,25475,MethodCallMutator,createPadding,round,1,0.056321956,<mask>(max - optBuf.length()),"append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(<mask>(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
       "
2140,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25463,25475,MethodCallMutator,createPadding,word,2,0.04710612,<mask>(max - optBuf.length()),"append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(<mask>(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
       "
2141,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25463,25475,MethodCallMutator,createPadding,string,3,0.040282052,<mask>(max - optBuf.length()),"append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(<mask>(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
       "
2142,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25463,25475,MethodCallMutator,createPadding,short,4,0.031077517,<mask>(max - optBuf.length()),"append("">"");
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(<mask>(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
       "
2143,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25480,25482,BinaryOperatorMutator,-,",",1,0.33670688,max <mask> optBuf.length(),"                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max<mask>optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

 "
2144,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25480,25482,BinaryOperatorMutator,-,/,3,0.051401407,max <mask> optBuf.length(),"                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max<mask>optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

 "
2145,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25480,25482,BinaryOperatorMutator,-,+,4,0.025845313,max <mask> optBuf.length(),"                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max<mask>optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

 "
2146,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25477,25479,IdentifierMutator-Variable,max,width,1,0.0091690095,<mask>,"
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(<mask> - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

"
2147,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25477,25479,IdentifierMutator-Variable,max,1,2,0.006202465,<mask>,"
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(<mask> - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

"
2148,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25477,25479,IdentifierMutator-Variable,max,4,3,0.0037645905,<mask>,"
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(<mask> - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

"
2149,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25477,25479,IdentifierMutator-Variable,max,6,4,0.0032622472,<mask>,"
                }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(<mask> - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

"
2150,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25490,25495,MethodCallMutator,length,position,1,6.1894394E-4,optBuf.<mask>(),"           }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.<mask>()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

      "
2151,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25490,25495,MethodCallMutator,length,width,2,1.5212405E-4,optBuf.<mask>(),"           }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.<mask>()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

      "
2152,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25490,25495,MethodCallMutator,length,size,3,9.3899114E-5,optBuf.<mask>(),"           }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.<mask>()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

      "
2153,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25490,25495,MethodCallMutator,length,len,4,7.950683E-5,optBuf.<mask>(),"           }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.<mask>()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

      "
2154,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25483,25488,IdentifierMutator-Variable,optBuf,max,0,0.24374934,<mask>,"               }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max -<mask>.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

    "
2155,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25483,25488,IdentifierMutator-Variable,optBuf,text,1,0.07044714,<mask>,"               }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max -<mask>.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

    "
2156,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25483,25488,IdentifierMutator-Variable,optBuf,prefix,2,0.057514504,<mask>,"               }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max -<mask>.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

    "
2157,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25483,25488,IdentifierMutator-Variable,optBuf,buf,3,0.049204756,<mask>,"               }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max -<mask>.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

    "
2158,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,814,25483,25488,IdentifierMutator-Variable,optBuf,option,4,0.039187085,<mask>,"               }
            }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max -<mask>.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

    "
2159,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,817,25536,25541,MethodCallMutator,append,length,2,4.49183E-5,optBuf.<mask>(dpad),"     prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.<mask>(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2160,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,817,25536,25541,MethodCallMutator,append,replace,3,4.2206415E-5,optBuf.<mask>(dpad),"     prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.<mask>(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2161,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,817,25536,25541,MethodCallMutator,append,strip,4,1.8596387E-5,optBuf.<mask>(dpad),"     prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.<mask>(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2162,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,817,25529,25534,IdentifierMutator-Variable,optBuf,width,0,0.2730142,<mask>,"        }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }<mask>.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2163,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,817,25529,25534,IdentifierMutator-Variable,optBuf,text,1,0.09902423,<mask>,"        }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }<mask>.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2164,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,817,25529,25534,IdentifierMutator-Variable,optBuf,buf,2,0.063708186,<mask>,"        }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }<mask>.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2165,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,817,25529,25534,IdentifierMutator-Variable,optBuf,w,3,0.028719883,<mask>,"        }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }<mask>.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2166,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,817,25529,25534,IdentifierMutator-Variable,optBuf,description,4,0.02458391,<mask>,"        }

            prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }<mask>.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2167,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,817,25543,25546,IdentifierMutator-Variable,dpad,desc,0,0.09070255,<mask>,"   prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(<mask>);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2168,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,817,25543,25546,IdentifierMutator-Variable,dpad,wrap,1,0.08663065,<mask>,"   prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(<mask>);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2169,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,817,25543,25546,IdentifierMutator-Variable,dpad,default,2,0.042120505,<mask>,"   prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(<mask>);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2170,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,817,25543,25546,IdentifierMutator-Variable,dpad,"''",3,0.040166683,<mask>,"   prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(<mask>);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2171,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,817,25543,25546,IdentifierMutator-Variable,dpad,description,4,0.039099585,<mask>,"   prefixList.add(optBuf);
            max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(<mask>);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2172,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,819,25588,25590,BinaryOperatorMutator,+,-,0,0.6021854,max <mask> descPad,"  max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max<mask>descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2173,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,819,25588,25590,BinaryOperatorMutator,+,-,2,0.0503859,max <mask> descPad,"  max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max<mask>descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2174,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,819,25588,25590,BinaryOperatorMutator,+,_,4,0.03773287,max <mask> descPad,"  max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max<mask>descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2175,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,819,25585,25587,IdentifierMutator-Variable,max,width,0,0.39631575,<mask>,"   max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop =<mask> + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2176,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,819,25585,25587,IdentifierMutator-Variable,max,x,1,0.15198082,<mask>,"   max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop =<mask> + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2177,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,819,25585,25587,IdentifierMutator-Variable,max,1,2,0.04168299,<mask>,"   max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop =<mask> + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2178,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,819,25585,25587,IdentifierMutator-Variable,max,indent,3,0.03164477,<mask>,"   max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop =<mask> + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2179,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,819,25591,25597,IdentifierMutator-Variable,descPad,1,0,0.77362657,<mask>," max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max +<mask>;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2180,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,819,25591,25597,IdentifierMutator-Variable,descPad,2,1,0.10656347,<mask>," max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max +<mask>;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2181,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,819,25591,25597,IdentifierMutator-Variable,descPad,4,2,0.020847537,<mask>," max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max +<mask>;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2182,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,819,25591,25597,IdentifierMutator-Variable,descPad,width,3,0.016469395,<mask>," max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max +<mask>;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2183,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,819,25591,25597,IdentifierMutator-Variable,descPad,5,4,0.011640487,<mask>," max = (optBuf.length() > max) ? optBuf.length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max +<mask>;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2184,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,821,25640,25643,BinaryOperatorMutator,!=,==,1,0.27598017,option.getDescription() <mask> null,"
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription()<mask>null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2185,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,821,25640,25643,BinaryOperatorMutator,!=,=,2,0.024976509,option.getDescription() <mask> null,"
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription()<mask>null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2186,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,821,25640,25643,BinaryOperatorMutator,!=,==,3,0.0024892981,option.getDescription() <mask> null,"
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription()<mask>null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2187,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,821,25640,25643,BinaryOperatorMutator,!=,!,4,0.0015535465,option.getDescription() <mask> null,"
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription()<mask>null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2188,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,821,25624,25637,MethodCallMutator,getDescription,description,0,0.9658194,option.<mask>()," : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.<mask>() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2189,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,821,25624,25637,MethodCallMutator,getDescription,desc,1,0.014509441,option.<mask>()," : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.<mask>() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2190,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,821,25624,25637,MethodCallMutator,getDescription,Description,2,0.0066743903,option.<mask>()," : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.<mask>() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2191,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,821,25624,25637,MethodCallMutator,getDescription,name,3,0.0011898042,option.<mask>()," : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.<mask>() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2192,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,821,25624,25637,MethodCallMutator,getDescription,help,4,0.001105271,option.<mask>()," : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.<mask>() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2193,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,821,25617,25622,IdentifierMutator-Variable,option,options,1,5.1944407E-5,<mask>,"length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (<mask>.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2194,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,821,25617,25622,IdentifierMutator-Variable,option,opt,3,3.2862816E-5,<mask>,"length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (<mask>.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2195,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,821,25617,25622,IdentifierMutator-Variable,option,Option,4,2.8796725E-5,<mask>,"length() : max;
        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (<mask>.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2196,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,821,25644,25647,IdentifierMutator-Literal,null,"""""",1,0.019107247,<mask>,"        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() !=<mask>)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2197,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,821,25644,25647,IdentifierMutator-Literal,null,"''",2,0.002869343,<mask>,"        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() !=<mask>)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2198,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,821,25644,25647,IdentifierMutator-Literal,null,0,3,0.0019733743,<mask>,"        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() !=<mask>)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2199,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,821,25644,25647,IdentifierMutator-Literal,null,undefined,4,0.0017722613,<mask>,"        }

        int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() !=<mask>)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2200,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,823,25687,25692,MethodCallMutator,append,replace,1,2.9707165E-4,optBuf.<mask>(option.getDescription()),"List.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.<mask>(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2201,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,823,25687,25692,MethodCallMutator,append,write,3,1.8335105E-4,optBuf.<mask>(option.getDescription()),"List.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.<mask>(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2202,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,823,25687,25692,MethodCallMutator,append,add,4,1.673259E-4,optBuf.<mask>(option.getDescription()),"List.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.<mask>(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2203,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,823,25680,25685,IdentifierMutator-Variable,optBuf,sb,0,0.9863247,<mask>,"  int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {<mask>.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2204,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,823,25680,25685,IdentifierMutator-Variable,optBuf,b,1,0.0032618726,<mask>,"  int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {<mask>.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2205,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,823,25680,25685,IdentifierMutator-Variable,optBuf,SB,2,0.0017814774,<mask>,"  int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {<mask>.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2206,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,823,25680,25685,IdentifierMutator-Variable,optBuf,b,3,5.418354E-4,<mask>,"  int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {<mask>.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2207,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,823,25680,25685,IdentifierMutator-Variable,optBuf,pb,4,4.2709243E-4,<mask>,"  int x = 0;

        for (Iterator i = optList.iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {<mask>.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2208,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,823,25701,25714,MethodCallMutator,getDescription,description,0,0.82398075,option.<mask>()," i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.<mask>());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2209,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,823,25701,25714,MethodCallMutator,getDescription,desc,1,0.053792175,option.<mask>()," i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.<mask>());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2210,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,823,25701,25714,MethodCallMutator,getDescription,get,2,0.015116422,option.<mask>()," i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.<mask>());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2211,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,823,25701,25714,MethodCallMutator,getDescription,summary,3,0.0124758845,option.<mask>()," i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.<mask>());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2212,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,823,25701,25714,MethodCallMutator,getDescription,name,4,0.011605029,option.<mask>()," i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.<mask>());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2213,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,823,25694,25699,IdentifierMutator-Variable,option,Option,2,6.899285E-5,<mask>,"iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(<mask>.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2214,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,823,25694,25699,IdentifierMutator-Variable,option,options,3,5.8509373E-5,<mask>,"iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(<mask>.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2215,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,823,25694,25699,IdentifierMutator-Variable,option,opt,4,2.6588612E-5,<mask>,"iterator(); i.hasNext();)
        {
            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(<mask>.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2216,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25747,25763,MethodCallMutator,renderWrappedText,print,0,0.3271046,"<mask>(sb, width, nextLineTabStop, optBuf.toString())","            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }<mask>(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2217,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25747,25763,MethodCallMutator,renderWrappedText,write,1,0.12927438,"<mask>(sb, width, nextLineTabStop, optBuf.toString())","            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }<mask>(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2218,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25747,25763,MethodCallMutator,renderWrappedText,format,2,0.07690214,"<mask>(sb, width, nextLineTabStop, optBuf.toString())","            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }<mask>(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2219,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25747,25763,MethodCallMutator,renderWrappedText,append,3,0.06560034,"<mask>(sb, width, nextLineTabStop, optBuf.toString())","            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }<mask>(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2220,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25747,25763,MethodCallMutator,renderWrappedText,wrap,4,0.0329145,"<mask>(sb, width, nextLineTabStop, optBuf.toString())","            Option option = (Option) i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }<mask>(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2221,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25765,25766,IdentifierMutator-Variable,sb,text,0,0.11693119,<mask>," i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(<mask>, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2222,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25765,25766,IdentifierMutator-Variable,sb,x,1,0.09723649,<mask>," i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(<mask>, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2223,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25765,25766,IdentifierMutator-Variable,sb,i,2,0.06216189,<mask>," i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(<mask>, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2224,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25765,25766,IdentifierMutator-Variable,sb,options,3,0.03917089,<mask>," i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(<mask>, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2225,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25765,25766,IdentifierMutator-Variable,sb,font,4,0.022844017,<mask>," i.next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(<mask>, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2226,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25769,25773,IdentifierMutator-Variable,width,i,0,0.76632047,<mask>,"next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb,<mask>, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2227,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25769,25773,IdentifierMutator-Variable,width,0,1,0.027519489,<mask>,"next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb,<mask>, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2228,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25769,25773,IdentifierMutator-Variable,width,index,2,0.021757236,<mask>,"next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb,<mask>, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2229,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25769,25773,IdentifierMutator-Variable,width,x,3,0.018282471,<mask>,"next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb,<mask>, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2230,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25769,25773,IdentifierMutator-Variable,width,option,4,0.009203162,<mask>,"next();
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb,<mask>, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2231,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25776,25790,IdentifierMutator-Variable,nextLineTabStop,height,0,0.6175012,<mask>,"
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width,<mask>, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2232,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25776,25790,IdentifierMutator-Variable,nextLineTabStop,max,1,0.06332003,<mask>,"
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width,<mask>, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2233,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25776,25790,IdentifierMutator-Variable,nextLineTabStop,indent,2,0.021337269,<mask>,"
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width,<mask>, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2234,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25776,25790,IdentifierMutator-Variable,nextLineTabStop,padding,3,0.01641001,<mask>,"
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width,<mask>, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2235,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25776,25790,IdentifierMutator-Variable,nextLineTabStop,"''",4,0.013811921,<mask>,"
            optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width,<mask>, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2236,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25800,25807,MethodCallMutator,toString,length,0,0.91275495,optBuf.<mask>(),"    optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.<mask>());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2237,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25800,25807,MethodCallMutator,toString,string,1,0.032479405,optBuf.<mask>(),"    optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.<mask>());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2238,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25800,25807,MethodCallMutator,toString,value,2,0.0053417864,optBuf.<mask>(),"    optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.<mask>());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2239,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25800,25807,MethodCallMutator,toString,close,3,0.0048043374,optBuf.<mask>(),"    optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.<mask>());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2240,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25800,25807,MethodCallMutator,toString,get,4,0.0043709963,optBuf.<mask>(),"    optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.<mask>());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2241,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25793,25798,IdentifierMutator-Variable,optBuf,text,0,0.22820148,<mask>,"        optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop,<mask>.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2242,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25793,25798,IdentifierMutator-Variable,optBuf,option,1,0.089125566,<mask>,"        optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop,<mask>.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2243,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25793,25798,IdentifierMutator-Variable,optBuf,buf,2,0.058562797,<mask>,"        optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop,<mask>.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2244,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25793,25798,IdentifierMutator-Variable,optBuf,opt,3,0.04293266,<mask>,"        optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop,<mask>.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2245,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,826,25793,25798,IdentifierMutator-Variable,optBuf,str,4,0.03795839,<mask>,"        optBuf = new StringBuffer(prefixList.get(x++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop,<mask>.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2246,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,828,25832,25838,MethodCallMutator,hasNext,next,0,0.92963564,i.<mask>(),"toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.<mask>())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2247,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,828,25832,25838,MethodCallMutator,hasNext,show,1,0.007380081,i.<mask>(),"toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.<mask>())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2248,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,828,25832,25838,MethodCallMutator,hasNext,search,2,0.003901251,i.<mask>(),"toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.<mask>())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2249,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,828,25832,25838,MethodCallMutator,hasNext,value,3,0.0034829997,i.<mask>(),"toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.<mask>())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2250,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,828,25832,25838,MethodCallMutator,hasNext,step,4,0.0031476605,i.<mask>(),"toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.<mask>())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2251,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,828,25830,25830,IdentifierMutator-Variable,i,iter,0,0.10523473,<mask>,"++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (<mask>.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2252,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,828,25830,25830,IdentifierMutator-Variable,i,option,1,0.0684156,<mask>,"++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (<mask>.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2253,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,828,25830,25830,IdentifierMutator-Variable,i,options,2,0.06499686,<mask>,"++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (<mask>.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2254,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,828,25830,25830,IdentifierMutator-Variable,i,iterator,4,0.049517076,<mask>,"++).toString());

            if (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (<mask>.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return sb;
   "
2255,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,830,25876,25881,MethodCallMutator,append,write,1,0.0023777895,sb.<mask>(defaultNewLine),"    {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.<mask>(defaultNewLine);
            }
        }

        return sb;
   "
2256,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,830,25876,25881,MethodCallMutator,append,add,2,2.8384023E-4,sb.<mask>(defaultNewLine),"    {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.<mask>(defaultNewLine);
            }
        }

        return sb;
   "
2257,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,830,25876,25881,MethodCallMutator,append,insert,3,2.7089234E-4,sb.<mask>(defaultNewLine),"    {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.<mask>(defaultNewLine);
            }
        }

        return sb;
   "
2258,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,830,25876,25881,MethodCallMutator,append,print,4,2.6396787E-4,sb.<mask>(defaultNewLine),"    {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.<mask>(defaultNewLine);
            }
        }

        return sb;
   "
2259,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,830,25873,25874,IdentifierMutator-Variable,sb,SB,1,0.0038792395,<mask>," (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {<mask>.append(defaultNewLine);
            }
        }

        return sb;
   "
2260,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,830,25873,25874,IdentifierMutator-Variable,sb,SB,2,0.0028504976,<mask>," (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {<mask>.append(defaultNewLine);
            }
        }

        return sb;
   "
2261,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,830,25873,25874,IdentifierMutator-Variable,sb,b,3,0.002554887,<mask>," (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {<mask>.append(defaultNewLine);
            }
        }

        return sb;
   "
2262,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,830,25873,25874,IdentifierMutator-Variable,sb,s,4,0.0020354828,<mask>," (optBuf.length() < max)
            {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {<mask>.append(defaultNewLine);
            }
        }

        return sb;
   "
2263,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,830,25883,25896,IdentifierMutator-Variable,defaultNewLine,esc,0,0.09596806,<mask>,"  {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(<mask>);
            }
        }

        return sb;
   "
2264,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,830,25883,25896,IdentifierMutator-Variable,defaultNewLine,desc,1,0.08578378,<mask>,"  {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(<mask>);
            }
        }

        return sb;
   "
2265,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,830,25883,25896,IdentifierMutator-Variable,defaultNewLine,pad,2,0.057786882,<mask>,"  {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(<mask>);
            }
        }

        return sb;
   "
2266,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,830,25883,25896,IdentifierMutator-Variable,defaultNewLine,description,3,0.03470996,<mask>,"  {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(<mask>);
            }
        }

        return sb;
   "
2267,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,830,25883,25896,IdentifierMutator-Variable,defaultNewLine,wrap,4,0.030769598,<mask>,"  {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(<mask>);
            }
        }

        return sb;
   "
2268,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,830,25883,25896,FieldReferenceMutator,defaultNewLine,esc,0,0.09596806,<mask>,"  {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(<mask>);
            }
        }

        return sb;
   "
2269,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,830,25883,25896,FieldReferenceMutator,defaultNewLine,desc,1,0.08578378,<mask>,"  {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(<mask>);
            }
        }

        return sb;
   "
2270,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,830,25883,25896,FieldReferenceMutator,defaultNewLine,pad,2,0.057786882,<mask>,"  {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(<mask>);
            }
        }

        return sb;
   "
2271,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,830,25883,25896,FieldReferenceMutator,defaultNewLine,description,3,0.03470996,<mask>,"  {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(<mask>);
            }
        }

        return sb;
   "
2272,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,830,25883,25896,FieldReferenceMutator,defaultNewLine,wrap,4,0.030769598,<mask>,"  {
                optBuf.append(createPadding(max - optBuf.length()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(<mask>);
            }
        }

        return sb;
   "
2273,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,834,25940,25941,IdentifierMutator-Variable,sb,s,0,0.11811425,<mask>,"()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return<mask>;
   "
2274,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,834,25940,25941,IdentifierMutator-Variable,sb,text,1,0.08548285,<mask>,"()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return<mask>;
   "
2275,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,834,25940,25941,IdentifierMutator-Variable,sb,true,2,0.08159896,<mask>,"()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return<mask>;
   "
2276,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,834,25940,25941,IdentifierMutator-Variable,sb,null,3,0.0661263,<mask>,"()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return<mask>;
   "
2277,HelpFormatter.java,renderOptions,"StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)",750,834,25940,25941,IdentifierMutator-Variable,sb,b,4,0.062399812,<mask>,"()));
            }

            optBuf.append(dpad);

            int nextLineTabStop = max + descPad;

            if (option.getDescription() != null)
            {
                optBuf.append(option.getDescription());
            }

            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());

            if (i.hasNext())
            {
                sb.append(defaultNewLine);
            }
        }

        return<mask>;
   "
2278,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,851,26572,26582,MethodCallMutator,findWrapPos,find,0,0.7551732,"<mask>(text, width, 0)","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos =<mask>(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && ("
2279,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,851,26572,26582,MethodCallMutator,findWrapPos,search,1,0.08525835,"<mask>(text, width, 0)","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos =<mask>(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && ("
2280,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,851,26572,26582,MethodCallMutator,findWrapPos,pos,2,0.06775384,"<mask>(text, width, 0)","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos =<mask>(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && ("
2281,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,851,26572,26582,MethodCallMutator,findWrapPos,index,3,0.03261684,"<mask>(text, width, 0)","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos =<mask>(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && ("
2282,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,851,26572,26582,MethodCallMutator,findWrapPos,position,4,0.03221299,"<mask>(text, width, 0)","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos =<mask>(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && ("
2283,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,851,26584,26587,IdentifierMutator-Variable,text,Text,2,1.0535568E-4,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(<mask>, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2284,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,851,26584,26587,IdentifierMutator-Variable,text,txt,3,9.156201E-5,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(<mask>, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2285,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,851,26584,26587,IdentifierMutator-Variable,text,this,4,5.3378622E-5,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(<mask>, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2286,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,851,26590,26594,IdentifierMutator-Variable,width,0,1,0.017354423,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text,<mask>, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2287,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,851,26590,26594,IdentifierMutator-Variable,width,1,2,0.0022135456,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text,<mask>, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2288,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,851,26590,26594,IdentifierMutator-Variable,width,Width,3,0.0011219458,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text,<mask>, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2289,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,851,26590,26594,IdentifierMutator-Variable,width,height,4,8.950529E-4,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text,<mask>, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2290,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,851,26597,26597,IdentifierMutator-Literal,0,pos,1,0.07003216,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width,<mask>);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2291,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,851,26597,26597,IdentifierMutator-Literal,0,1,2,0.031614017,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width,<mask>);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2292,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,851,26597,26597,IdentifierMutator-Literal,0,2,3,0.0023432756,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width,<mask>);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2293,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,851,26597,26597,IdentifierMutator-Literal,0,false,4,0.0021787724,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width,<mask>);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2294,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,853,26617,26620,BinaryOperatorMutator,==,!=,1,0.06768926,pos <mask> (-1),"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos<mask>-1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2295,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,853,26617,26620,BinaryOperatorMutator,==,>,3,0.002125628,pos <mask> (-1),"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos<mask>-1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2296,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,853,26617,26620,BinaryOperatorMutator,==,>,4,7.1507803E-4,pos <mask> (-1),"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos<mask>-1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2297,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,853,26614,26616,IdentifierMutator-Variable,pos,Pos,2,1.4495746E-4,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (<mask> == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2298,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,853,26614,26616,IdentifierMutator-Variable,pos,position,3,2.467041E-5,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (<mask> == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2299,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,853,26614,26616,IdentifierMutator-Variable,pos,len,4,8.212141E-6,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (<mask> == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2300,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,853,26621,26621,UnaryOperatorMutator,-,+,1,1.741846E-4,<mask>1,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos ==<mask>1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2301,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,853,26621,26621,UnaryOperatorMutator,-,"""-",3,5.7254447E-6,<mask>1,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos ==<mask>1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2302,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,853,26621,26621,UnaryOperatorMutator,-,(-,4,2.4289711E-6,<mask>1,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos ==<mask>1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2303,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,853,26622,26622,IdentifierMutator-Literal,1,2,2,3.5707018E-4,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -<mask>)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2304,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,853,26622,26622,IdentifierMutator-Literal,1,3,3,4.111497E-5,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -<mask>)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2305,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,853,26622,26622,IdentifierMutator-Literal,1,5,4,1.9123154E-5,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -<mask>)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2306,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,855,26650,26655,MethodCallMutator,append,write,1,5.442926E-4,sb.<mask>(rtrim(text)),"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.<mask>(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2307,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,855,26650,26655,MethodCallMutator,append,insert,2,1.6179611E-4,sb.<mask>(rtrim(text)),"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.<mask>(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2308,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,855,26650,26655,MethodCallMutator,append,end,3,1.5956927E-4,sb.<mask>(rtrim(text)),"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.<mask>(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2309,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,855,26647,26648,IdentifierMutator-Variable,sb,b,1,0.40979788,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {<mask>.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
"
2310,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,855,26647,26648,IdentifierMutator-Variable,sb,bb,2,0.0057668374,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {<mask>.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
"
2311,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,855,26647,26648,IdentifierMutator-Variable,sb,SB,3,0.0037161028,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {<mask>.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
"
2312,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,855,26647,26648,IdentifierMutator-Variable,sb,bs,4,0.003571036,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {<mask>.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
"
2313,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,855,26657,26661,MethodCallMutator,rtrim,escape,0,0.5205943,<mask>(text),"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(<mask>(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) &&"
2314,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,855,26657,26661,MethodCallMutator,rtrim,wrap,1,0.10874808,<mask>(text),"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(<mask>(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) &&"
2315,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,855,26657,26661,MethodCallMutator,rtrim,html,2,0.101543546,<mask>(text),"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(<mask>(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) &&"
2316,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,855,26657,26661,MethodCallMutator,rtrim,render,3,0.07481584,<mask>(text),"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(<mask>(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) &&"
2317,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,855,26657,26661,MethodCallMutator,rtrim,format,4,0.032890867,<mask>(text),"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(<mask>(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) &&"
2318,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,855,26663,26666,IdentifierMutator-Variable,text,word,2,6.5403484E-4,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(<mask>));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2319,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,855,26663,26666,IdentifierMutator-Variable,text,string,3,3.876747E-4,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(<mask>));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2320,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,855,26663,26666,IdentifierMutator-Variable,text,txt,4,3.1101293E-4,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(<mask>));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2321,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,857,26691,26692,IdentifierMutator-Variable,sb,text,0,0.33598536,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return<mask>;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width)"
2322,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,857,26691,26692,IdentifierMutator-Variable,sb,null,1,0.20035183,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return<mask>;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width)"
2323,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,857,26691,26692,IdentifierMutator-Variable,sb,s,2,0.066609316,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return<mask>;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width)"
2324,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,857,26691,26692,IdentifierMutator-Variable,sb,this,3,0.051418405,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return<mask>;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width)"
2325,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,857,26691,26692,IdentifierMutator-Variable,sb,b,4,0.049019404,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return<mask>;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width)"
2326,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26754,26759,MethodCallMutator,append,strip,1,0.004679975,"sb.<mask>(rtrim(text.substring(0, pos))).<mask>(defaultNewLine)","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).<mask>(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2327,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26754,26759,MethodCallMutator,append,add,2,0.0025217792,"sb.<mask>(rtrim(text.substring(0, pos))).<mask>(defaultNewLine)","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).<mask>(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2328,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26754,26759,MethodCallMutator,append,write,3,0.0024586262,"sb.<mask>(rtrim(text.substring(0, pos))).<mask>(defaultNewLine)","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).<mask>(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2329,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26754,26759,MethodCallMutator,append,join,4,0.0021481484,"sb.<mask>(rtrim(text.substring(0, pos))).<mask>(defaultNewLine)","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).<mask>(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2330,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26716,26721,MethodCallMutator,append,write,1,0.001312806,"sb.<mask>(rtrim(text.substring(0, pos)))","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.<mask>(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2331,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26716,26721,MethodCallMutator,append,replace,2,4.2873E-4,"sb.<mask>(rtrim(text.substring(0, pos)))","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.<mask>(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2332,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26716,26721,MethodCallMutator,append,insert,4,3.3333845E-4,"sb.<mask>(rtrim(text.substring(0, pos)))","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.<mask>(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2333,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26713,26714,IdentifierMutator-Variable,sb,buf,1,0.1260442,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }<mask>.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop"
2334,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26713,26714,IdentifierMutator-Variable,sb,text,2,0.10260885,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }<mask>.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop"
2335,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26713,26714,IdentifierMutator-Variable,sb,out,3,0.041321028,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }<mask>.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop"
2336,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26713,26714,IdentifierMutator-Variable,sb,b,4,0.038814183,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }<mask>.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop"
2337,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26723,26727,MethodCallMutator,rtrim,escape,0,0.57238144,"<mask>(text.substring(0, pos))","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(<mask>(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) &&"
2338,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26723,26727,MethodCallMutator,rtrim,wrap,1,0.14892638,"<mask>(text.substring(0, pos))","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(<mask>(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) &&"
2339,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26723,26727,MethodCallMutator,rtrim,strip,2,0.0668532,"<mask>(text.substring(0, pos))","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(<mask>(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) &&"
2340,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26723,26727,MethodCallMutator,rtrim,html,3,0.025210904,"<mask>(text.substring(0, pos))","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(<mask>(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) &&"
2341,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26723,26727,MethodCallMutator,rtrim,quote,4,0.023321902,"<mask>(text.substring(0, pos))","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(<mask>(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) &&"
2342,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26734,26742,MethodCallMutator,substring,slice,0,0.45428514,"text.<mask>(0, pos)","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.<mask>(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width)"
2343,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26734,26742,MethodCallMutator,substring,ring,1,0.21855746,"text.<mask>(0, pos)","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.<mask>(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width)"
2344,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26734,26742,MethodCallMutator,substring,fill,2,0.10267153,"text.<mask>(0, pos)","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.<mask>(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width)"
2345,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26734,26742,MethodCallMutator,substring,replace,3,0.072511494,"text.<mask>(0, pos)","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.<mask>(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width)"
2346,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26734,26742,MethodCallMutator,substring,copy,4,0.021151248,"text.<mask>(0, pos)","StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.<mask>(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width)"
2347,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26729,26732,IdentifierMutator-Variable,text,Text,2,0.0011383051,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(<mask>.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2348,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26729,26732,IdentifierMutator-Variable,text,string,3,5.455057E-4,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(<mask>.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2349,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26729,26732,IdentifierMutator-Variable,text,word,4,3.7324423E-4,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(<mask>.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2350,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26744,26744,IdentifierMutator-Literal,0,width,1,0.024826653,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(<mask>, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2351,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26744,26744,IdentifierMutator-Literal,0,1,2,0.013773723,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(<mask>, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2352,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26744,26744,IdentifierMutator-Literal,0,2,4,0.002486645,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(<mask>, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2353,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26747,26749,IdentifierMutator-Variable,pos,width,1,0.11133425,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0,<mask>))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2354,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26747,26749,IdentifierMutator-Variable,pos,1,3,0.016595012,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0,<mask>))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2355,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26747,26749,IdentifierMutator-Variable,pos,position,4,0.007790323,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0,<mask>))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2356,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26761,26774,IdentifierMutator-Variable,defaultNewLine,text,0,0.86445194,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(<mask>);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) &&"
2357,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26761,26774,IdentifierMutator-Variable,defaultNewLine,width,1,0.015859345,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(<mask>);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) &&"
2358,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26761,26774,IdentifierMutator-Variable,defaultNewLine,text,2,0.0067119333,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(<mask>);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) &&"
2359,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26761,26774,IdentifierMutator-Variable,defaultNewLine,html,3,0.004476914,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(<mask>);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) &&"
2360,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26761,26774,IdentifierMutator-Variable,defaultNewLine,"''",4,0.0040465803,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(<mask>);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) &&"
2361,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26761,26774,FieldReferenceMutator,defaultNewLine,text,0,0.86445194,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(<mask>);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) &&"
2362,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26761,26774,FieldReferenceMutator,defaultNewLine,width,1,0.015859345,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(<mask>);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) &&"
2363,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26761,26774,FieldReferenceMutator,defaultNewLine,text,2,0.0067119333,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(<mask>);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) &&"
2364,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26761,26774,FieldReferenceMutator,defaultNewLine,html,3,0.004476914,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(<mask>);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) &&"
2365,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,859,26761,26774,FieldReferenceMutator,defaultNewLine,"''",4,0.0040465803,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(<mask>);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) &&"
2366,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,861,26806,26809,BinaryOperatorMutator,>=,>,0,0.25988156,nextLineTabStop <mask> width,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop<mask>width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2367,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,861,26806,26809,BinaryOperatorMutator,>=,>,1,0.14699504,nextLineTabStop <mask> width,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop<mask>width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2368,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,861,26806,26809,BinaryOperatorMutator,>=,<,2,0.1295297,nextLineTabStop <mask> width,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop<mask>width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2369,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,861,26806,26809,BinaryOperatorMutator,>=,==,4,0.101724215,nextLineTabStop <mask> width,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop<mask>width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2370,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,861,26791,26805,IdentifierMutator-Variable,nextLineTabStop,pos,0,0.99178773,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (<mask> >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && ("
2371,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,861,26791,26805,IdentifierMutator-Variable,nextLineTabStop,position,1,0.0020321351,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (<mask> >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && ("
2372,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,861,26791,26805,IdentifierMutator-Variable,nextLineTabStop,pos,2,0.0010754286,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (<mask> >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && ("
2373,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,861,26791,26805,IdentifierMutator-Variable,nextLineTabStop,Pos,3,6.776643E-4,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (<mask> >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && ("
2374,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,861,26791,26805,IdentifierMutator-Variable,nextLineTabStop,len,4,4.3373532E-4,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (<mask> >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && ("
2375,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,861,26810,26814,IdentifierMutator-Variable,width,0,1,0.15503351,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >=<mask>)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2376,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,861,26810,26814,IdentifierMutator-Variable,width,1,2,0.042471528,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >=<mask>)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2377,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,861,26810,26814,IdentifierMutator-Variable,width,pos,3,0.028086718,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >=<mask>)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2378,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,861,26810,26814,IdentifierMutator-Variable,width,2,4,0.008486613,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >=<mask>)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width"
2379,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,864,26899,26899,AssignmentMutator,nextLineTabStop=1,*,0,0.8903604,nextLineTabStop <mask>= 1,"(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop<mask>= 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos =="
2380,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,864,26899,26899,AssignmentMutator,nextLineTabStop=1,<<,1,0.047960736,nextLineTabStop <mask>= 1,"(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop<mask>= 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos =="
2381,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,864,26899,26899,AssignmentMutator,nextLineTabStop=1,>>,2,0.024090657,nextLineTabStop <mask>= 1,"(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop<mask>= 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos =="
2382,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,864,26899,26899,AssignmentMutator,nextLineTabStop=1,|,3,0.010730613,nextLineTabStop <mask>= 1,"(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop<mask>= 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos =="
2383,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,864,26899,26899,AssignmentMutator,nextLineTabStop=1,/,4,0.007950471,nextLineTabStop <mask>= 1,"(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop<mask>= 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos =="
2384,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,864,26884,26898,IdentifierMutator-Variable,nextLineTabStop,pos,0,0.62130713,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening<mask> = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
  "
2385,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,864,26884,26898,IdentifierMutator-Variable,nextLineTabStop,width,1,0.057640687,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening<mask> = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
  "
2386,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,864,26884,26898,IdentifierMutator-Variable,nextLineTabStop,loop,2,0.056686148,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening<mask> = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
  "
2387,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,864,26884,26898,IdentifierMutator-Variable,nextLineTabStop,index,3,0.01626466,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening<mask> = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
  "
2388,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,864,26884,26898,IdentifierMutator-Variable,nextLineTabStop,position,4,0.01259163,<mask>,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening<mask> = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
  "
2389,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,864,26902,26902,IdentifierMutator-Literal,1,pos,0,0.7232421,<mask>,"StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop =<mask>;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLine"
2390,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,864,26902,26902,IdentifierMutator-Literal,1,0,1,0.22274524,<mask>,"StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop =<mask>;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLine"
2391,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,864,26902,26902,IdentifierMutator-Literal,1,width,2,0.015082704,<mask>,"StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop =<mask>;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLine"
2392,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,864,26902,26902,IdentifierMutator-Literal,1,position,3,0.007236774,<mask>,"StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop =<mask>;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLine"
2393,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,868,27031,27043,MethodCallMutator,createPadding,pad,0,0.69342434,<mask>(nextLineTabStop),"          int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding =<mask>(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
        "
2394,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,868,27031,27043,MethodCallMutator,createPadding,padding,1,0.13310699,<mask>(nextLineTabStop),"          int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding =<mask>(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
        "
2395,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,868,27031,27043,MethodCallMutator,createPadding,trim,2,0.025585951,<mask>(nextLineTabStop),"          int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding =<mask>(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
        "
2396,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,868,27031,27043,MethodCallMutator,createPadding,repeat,3,0.015795643,<mask>(nextLineTabStop),"          int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding =<mask>(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
        "
2397,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,868,27031,27043,MethodCallMutator,createPadding,wrap,4,0.009778309,<mask>(nextLineTabStop),"          int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding =<mask>(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
        "
2398,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,868,27045,27059,IdentifierMutator-Variable,nextLineTabStop,text,0,0.5484998,<mask>,"      int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(<mask>);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

"
2399,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,868,27045,27059,IdentifierMutator-Variable,nextLineTabStop,width,1,0.13012467,<mask>,"      int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(<mask>);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

"
2400,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,868,27045,27059,IdentifierMutator-Variable,nextLineTabStop,word,2,0.01669697,<mask>,"      int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(<mask>);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

"
2401,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,868,27045,27059,IdentifierMutator-Variable,nextLineTabStop,1,3,0.013660592,<mask>,"      int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(<mask>);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

"
2402,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,868,27045,27059,IdentifierMutator-Variable,nextLineTabStop,true,4,0.010912569,<mask>,"      int nextLineTabStop, String text)
    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(<mask>);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

"
2403,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,870,27079,27082,IdentifierMutator-Literal,true,running,1,0.027089056,<mask>,"    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (<mask>)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            s"
2404,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,870,27079,27082,IdentifierMutator-Literal,true,break,2,0.0048833713,<mask>,"    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (<mask>)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            s"
2405,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,870,27079,27082,IdentifierMutator-Literal,true,working,3,0.0038465287,<mask>,"    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (<mask>)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            s"
2406,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,870,27079,27082,IdentifierMutator-Literal,true,loop,4,0.0038222186,<mask>,"    {
        int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (<mask>)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            s"
2407,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27111,27111,AssignmentMutator,text=padding+text.substring(pos).trim(),.,0,0.43110967,text <mask>= padding + text.substring(pos).trim()," 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text<mask>= padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine"
2408,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27111,27111,AssignmentMutator,text=padding+text.substring(pos).trim(),.,1,0.17906384,text <mask>= padding + text.substring(pos).trim()," 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text<mask>= padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine"
2409,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27111,27111,AssignmentMutator,text=padding+text.substring(pos).trim(),+,2,0.13658817,text <mask>= padding + text.substring(pos).trim()," 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text<mask>= padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine"
2410,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27111,27111,AssignmentMutator,text=padding+text.substring(pos).trim(),|,3,0.031918824,text <mask>= padding + text.substring(pos).trim()," 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text<mask>= padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine"
2411,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27111,27111,AssignmentMutator,text=padding+text.substring(pos).trim(),,4,0.029493412,text <mask>= padding + text.substring(pos).trim()," 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text<mask>= padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine"
2412,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27107,27110,IdentifierMutator-Variable,text,string,2,0.0011720809,<mask>,"  int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {<mask> = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine"
2413,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27107,27110,IdentifierMutator-Variable,text,Text,3,0.0010952576,<mask>,"  int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {<mask> = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine"
2414,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27107,27110,IdentifierMutator-Variable,text,,4,6.2667544E-4,<mask>,"  int pos = findWrapPos(text, width, 0);

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {<mask> = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine"
2415,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27121,27123,BinaryOperatorMutator,+,.,2,0.024995308,padding <mask> text.substring(pos).trim(),"

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding<mask>text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 "
2416,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27121,27123,BinaryOperatorMutator,+,(,3,0.01378425,padding <mask> text.substring(pos).trim(),"

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding<mask>text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 "
2417,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27121,27123,BinaryOperatorMutator,+,||,4,0.0043448843,padding <mask> text.substring(pos).trim(),"

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding<mask>text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 "
2418,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27114,27120,IdentifierMutator-Variable,padding,prefix,1,0.018443141,<mask>,");

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text =<mask> + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
"
2419,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27114,27120,IdentifierMutator-Variable,padding,"""""",2,0.012648024,<mask>,");

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text =<mask> + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
"
2420,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27114,27120,IdentifierMutator-Variable,padding,"''",3,0.008176768,<mask>,");

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text =<mask> + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
"
2421,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27114,27120,IdentifierMutator-Variable,padding,text,4,0.005703358,<mask>,");

        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text =<mask> + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
"
2422,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27144,27147,MethodCallMutator,trim,length,0,0.33077073,text.substring(pos).<mask>()," if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).<mask>();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
 "
2423,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27144,27147,MethodCallMutator,trim,strip,1,0.30341363,text.substring(pos).<mask>()," if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).<mask>();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
 "
2424,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27144,27147,MethodCallMutator,trim,join,2,0.07774477,text.substring(pos).<mask>()," if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).<mask>();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
 "
2425,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27144,27147,MethodCallMutator,trim,replace,3,0.06480523,text.substring(pos).<mask>()," if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).<mask>();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
 "
2426,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27144,27147,MethodCallMutator,trim,value,4,0.041949276,text.substring(pos).<mask>()," if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).<mask>();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
 "
2427,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27129,27137,MethodCallMutator,substring,slice,0,0.71998227,text.<mask>(pos),"      if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.<mask>(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     "
2428,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27129,27137,MethodCallMutator,substring,get,1,0.10269002,text.<mask>(pos),"      if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.<mask>(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     "
2429,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27129,27137,MethodCallMutator,substring,ring,2,0.06280465,text.<mask>(pos),"      if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.<mask>(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     "
2430,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27129,27137,MethodCallMutator,substring,fill,3,0.012396252,text.<mask>(pos),"      if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.<mask>(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     "
2431,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27129,27137,MethodCallMutator,substring,remove,4,0.0077596107,text.<mask>(pos),"      if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.<mask>(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     "
2432,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27124,27127,IdentifierMutator-Variable,text,string,2,5.938598E-4,<mask>,"        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding +<mask>.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
  "
2433,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27124,27127,IdentifierMutator-Variable,text,word,3,4.9905054E-4,<mask>,"        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding +<mask>.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
  "
2434,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27124,27127,IdentifierMutator-Variable,text,line,4,4.4188727E-4,<mask>,"        if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding +<mask>.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
  "
2435,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27139,27141,IdentifierMutator-Variable,pos,width,1,0.15648368,<mask>,"   if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(<mask>).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
       "
2436,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27139,27141,IdentifierMutator-Variable,pos,1,2,0.14315121,<mask>,"   if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(<mask>).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
       "
2437,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27139,27141,IdentifierMutator-Variable,pos,2,3,0.023638034,<mask>,"   if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(<mask>).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
       "
2438,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,872,27139,27141,IdentifierMutator-Variable,pos,0,4,0.013839479,<mask>,"   if (pos == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(<mask>).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
       "
2439,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27167,27167,AssignmentMutator,"pos=findWrapPos(text,width,0)",*,0,0.3172814,"pos <mask>= findWrapPos(text, width, 0)","
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos<mask>= findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2440,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27167,27167,AssignmentMutator,"pos=findWrapPos(text,width,0)",|,1,0.21958543,"pos <mask>= findWrapPos(text, width, 0)","
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos<mask>= findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2441,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27167,27167,AssignmentMutator,"pos=findWrapPos(text,width,0)",^,2,0.09410536,"pos <mask>= findWrapPos(text, width, 0)","
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos<mask>= findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2442,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27167,27167,AssignmentMutator,"pos=findWrapPos(text,width,0)",&,3,0.05755207,"pos <mask>= findWrapPos(text, width, 0)","
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos<mask>= findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2443,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27167,27167,AssignmentMutator,"pos=findWrapPos(text,width,0)",~,4,0.040825244,"pos <mask>= findWrapPos(text, width, 0)","
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos<mask>= findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2444,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27164,27166,IdentifierMutator-Variable,pos,position,2,0.0059843496,<mask>," == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();<mask> = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2445,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27164,27166,IdentifierMutator-Variable,pos,index,3,2.3750254E-4,<mask>," == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();<mask> = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2446,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27164,27166,IdentifierMutator-Variable,pos,text,4,2.3393727E-4,<mask>," == -1)
        {
            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();<mask> = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2447,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27170,27180,MethodCallMutator,findWrapPos,search,0,0.4786859,"<mask>(text, width, 0)","            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos =<mask>(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2448,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27170,27180,MethodCallMutator,findWrapPos,find,1,0.33306557,"<mask>(text, width, 0)","            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos =<mask>(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2449,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27170,27180,MethodCallMutator,findWrapPos,index,2,0.08130069,"<mask>(text, width, 0)","            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos =<mask>(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2450,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27170,27180,MethodCallMutator,findWrapPos,pos,3,0.021508852,"<mask>(text, width, 0)","            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos =<mask>(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2451,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27170,27180,MethodCallMutator,findWrapPos,position,4,0.011965417,"<mask>(text, width, 0)","            sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos =<mask>(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2452,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27182,27185,IdentifierMutator-Variable,text,word,1,0.0040876023,<mask>,"       sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(<mask>, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2453,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27182,27185,IdentifierMutator-Variable,text,pos,2,0.0029426229,<mask>,"       sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(<mask>, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2454,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27182,27185,IdentifierMutator-Variable,text,string,4,0.0011868811,<mask>,"       sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(<mask>, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2455,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27188,27192,IdentifierMutator-Variable,width,pos,0,0.5754058,<mask>,"     sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text,<mask>, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2456,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27188,27192,IdentifierMutator-Variable,width,0,2,0.073698305,<mask>,"     sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text,<mask>, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2457,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27188,27192,IdentifierMutator-Variable,width,padding,3,0.030637702,<mask>,"     sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text,<mask>, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2458,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27188,27192,IdentifierMutator-Variable,width,w,4,0.02845564,<mask>,"     sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text,<mask>, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2459,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27195,27195,IdentifierMutator-Literal,0,pos,0,0.3655208,<mask>,"   sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width,<mask>);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2460,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27195,27195,IdentifierMutator-Literal,0,padding,1,0.13349178,<mask>,"   sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width,<mask>);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2461,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27195,27195,IdentifierMutator-Literal,0,true,2,0.08482722,<mask>,"   sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width,<mask>);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2462,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27195,27195,IdentifierMutator-Literal,0,false,3,0.04727902,<mask>,"   sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width,<mask>);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2463,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,873,27195,27195,IdentifierMutator-Literal,0,1,4,0.025684206,<mask>,"   sb.append(rtrim(text));

            return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width,<mask>);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2464,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,875,27219,27222,BinaryOperatorMutator,==,!=,1,0.30664328,pos <mask> (-1),"         return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos<mask>-1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2465,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,875,27219,27222,BinaryOperatorMutator,==,>,3,0.045922395,pos <mask> (-1),"         return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos<mask>-1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2466,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,875,27219,27222,BinaryOperatorMutator,==,>,4,0.023393007,pos <mask> (-1),"         return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos<mask>-1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2467,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,875,27216,27218,IdentifierMutator-Variable,pos,position,2,4.0055925E-4,<mask>,"          return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (<mask> == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2468,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,875,27216,27218,IdentifierMutator-Variable,pos,Pos,3,8.774089E-5,<mask>,"          return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (<mask> == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2469,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,875,27216,27218,IdentifierMutator-Variable,pos,index,4,5.0486266E-5,<mask>,"          return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (<mask> == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2470,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,875,27223,27223,UnaryOperatorMutator,-,+,1,6.8487605E-4,<mask>1,"        return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos ==<mask>1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2471,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,875,27223,27223,UnaryOperatorMutator,-,$,2,6.578485E-4,<mask>1,"        return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos ==<mask>1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2472,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,875,27223,27223,UnaryOperatorMutator,-,"""-",4,1.4417963E-4,<mask>1,"        return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos ==<mask>1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2473,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,875,27224,27224,IdentifierMutator-Literal,1,2,2,0.0015262937,<mask>,"       return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -<mask>)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2474,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,875,27224,27224,IdentifierMutator-Literal,1,3,3,1.3101073E-4,<mask>,"       return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -<mask>)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2475,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,875,27224,27224,IdentifierMutator-Literal,1,4,4,6.0379327E-5,<mask>,"       return sb;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -<mask>)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2476,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,877,27260,27265,MethodCallMutator,append,write,1,2.5418834E-4,sb.<mask>(text),"im(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.<mask>(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2477,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,877,27260,27265,MethodCallMutator,append,end,2,2.537248E-4,sb.<mask>(text),"im(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.<mask>(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2478,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,877,27260,27265,MethodCallMutator,append,add,3,2.0490123E-4,sb.<mask>(text),"im(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.<mask>(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2479,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,877,27260,27265,MethodCallMutator,append,insert,4,1.9637958E-4,sb.<mask>(text),"im(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.<mask>(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2480,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,877,27257,27258,IdentifierMutator-Variable,sb,b,0,0.3819037,<mask>,"    }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {<mask>.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2481,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,877,27257,27258,IdentifierMutator-Variable,sb,buf,2,0.061304037,<mask>,"    }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {<mask>.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2482,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,877,27257,27258,IdentifierMutator-Variable,sb,buffer,3,0.046162143,<mask>,"    }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {<mask>.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2483,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,877,27257,27258,IdentifierMutator-Variable,sb,output,4,0.04032536,<mask>,"    }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {<mask>.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2484,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,877,27267,27270,IdentifierMutator-Variable,text,Text,2,0.0011916112,<mask>,"text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(<mask>);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2485,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,877,27267,27270,IdentifierMutator-Variable,text,padding,3,0.0011533455,<mask>,"text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(<mask>);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2486,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,877,27267,27270,IdentifierMutator-Variable,text,word,4,9.692452E-4,<mask>,"text.substring(0, pos))).append(defaultNewLine);

        if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(<mask>);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2487,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,879,27298,27299,IdentifierMutator-Variable,sb,text,0,0.44605792,<mask>,"      if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return<mask>;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2488,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,879,27298,27299,IdentifierMutator-Variable,sb,true,1,0.120375186,<mask>,"      if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return<mask>;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2489,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,879,27298,27299,IdentifierMutator-Variable,sb,pos,2,0.10936177,<mask>,"      if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return<mask>;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2490,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,879,27298,27299,IdentifierMutator-Variable,sb,false,3,0.07760333,<mask>,"      if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return<mask>;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2491,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,879,27298,27299,IdentifierMutator-Variable,sb,null,4,0.029171469,<mask>,"      if (nextLineTabStop >= width)
        {
            // stops infinite loop happening
            nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return<mask>;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2492,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27368,27371,BinaryOperatorMutator,&&,||,0,0.5033633,(text.length() > width) <mask> (pos == (nextLineTabStop - 1)),"   nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width)<mask>(pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2493,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27368,27371,BinaryOperatorMutator,&&,||,3,0.017813284,(text.length() > width) <mask> (pos == (nextLineTabStop - 1)),"   nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width)<mask>(pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2494,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27368,27371,BinaryOperatorMutator,&&,|,4,0.010535328,(text.length() > width) <mask> (pos == (nextLineTabStop - 1)),"   nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width)<mask>(pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2495,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27359,27361,BinaryOperatorMutator,>,==,1,0.23609805,text.length() <mask> width,"      nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length()<mask>width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2496,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27359,27361,BinaryOperatorMutator,>,<,2,0.13839835,text.length() <mask> width,"      nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length()<mask>width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2497,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27359,27361,BinaryOperatorMutator,>,<,4,0.04912114,text.length() <mask> width,"      nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length()<mask>width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2498,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27351,27356,MethodCallMutator,length,width,1,0.0025266216,text.<mask>(),"        nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.<mask>() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2499,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27351,27356,MethodCallMutator,length,len,2,2.2596485E-4,text.<mask>(),"        nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.<mask>() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2500,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27351,27356,MethodCallMutator,length,size,3,6.173848E-5,text.<mask>(),"        nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.<mask>() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2501,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27346,27349,IdentifierMutator-Variable,text,string,2,7.475154E-4,<mask>,"          nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((<mask>.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2502,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27346,27349,IdentifierMutator-Variable,text,Text,3,7.351939E-4,<mask>,"          nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((<mask>.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2503,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27346,27349,IdentifierMutator-Variable,text,word,4,6.8867236E-4,<mask>,"          nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((<mask>.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2504,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27362,27366,IdentifierMutator-Variable,width,0,1,0.08965554,<mask>,"     nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() ><mask>) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2505,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27362,27366,IdentifierMutator-Variable,width,1,2,0.01070202,<mask>,"     nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() ><mask>) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2506,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27362,27366,IdentifierMutator-Variable,width,w,3,0.005337796,<mask>,"     nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() ><mask>) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2507,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27362,27366,IdentifierMutator-Variable,width,pos,4,0.0034024133,<mask>,"     nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() ><mask>) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2508,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27376,27379,BinaryOperatorMutator,==,<,0,0.34800038,pos <mask> (nextLineTabStop - 1),"LineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos<mask>nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2509,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27376,27379,BinaryOperatorMutator,==,>,2,0.19236082,pos <mask> (nextLineTabStop - 1),"LineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos<mask>nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2510,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27376,27379,BinaryOperatorMutator,==,<,3,0.02713813,pos <mask> (nextLineTabStop - 1),"LineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos<mask>nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2511,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27376,27379,BinaryOperatorMutator,==,>,4,0.026168168,pos <mask> (nextLineTabStop - 1),"LineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos<mask>nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2512,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27373,27375,IdentifierMutator-Variable,pos,position,1,0.0020938031,<mask>," nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (<mask> == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2513,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27373,27375,IdentifierMutator-Variable,pos,width,2,0.0013446631,<mask>," nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (<mask> == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2514,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27373,27375,IdentifierMutator-Variable,pos,index,3,3.8786652E-4,<mask>," nextLineTabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (<mask> == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2515,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27395,27397,BinaryOperatorMutator,-,+,1,0.13279267,nextLineTabStop <mask> 1,";
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop<mask>1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2516,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27395,27397,BinaryOperatorMutator,-,+,3,0.00820529,nextLineTabStop <mask> 1,";
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop<mask>1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2517,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27395,27397,BinaryOperatorMutator,-,(-,4,0.0070512164,nextLineTabStop <mask> 1,";
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop<mask>1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2518,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27380,27394,IdentifierMutator-Variable,nextLineTabStop,width,0,0.97323245,<mask>,"TabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos ==<mask> - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2519,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27380,27394,IdentifierMutator-Variable,nextLineTabStop,height,1,0.007356011,<mask>,"TabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos ==<mask> - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2520,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27380,27394,IdentifierMutator-Variable,nextLineTabStop,w,2,0.0053550783,<mask>,"TabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos ==<mask> - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2521,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27380,27394,IdentifierMutator-Variable,nextLineTabStop,pos,3,0.0019543346,<mask>,"TabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos ==<mask> - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2522,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27380,27394,IdentifierMutator-Variable,nextLineTabStop,length,4,0.0012228618,<mask>,"TabStop = 1;
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos ==<mask> - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2523,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27398,27398,IdentifierMutator-Literal,1,width,1,0.083286576,<mask>,"
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop -<mask>))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2524,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27398,27398,IdentifierMutator-Literal,1,2,2,0.016064819,<mask>,"
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop -<mask>))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2525,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27398,27398,IdentifierMutator-Literal,1,4,3,0.0027933328,<mask>,"
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop -<mask>))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2526,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,882,27398,27398,IdentifierMutator-Literal,1,w,4,0.0017927302,<mask>,"
        }

        // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop -<mask>))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2527,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,884,27435,27435,AssignmentMutator,pos=width,*,0,0.7994727,pos <mask>= width,"        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos<mask>= width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2528,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,884,27435,27435,AssignmentMutator,pos=width,%,1,0.071269065,pos <mask>= width,"        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos<mask>= width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2529,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,884,27435,27435,AssignmentMutator,pos=width,/,2,0.061846692,pos <mask>= width,"        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos<mask>= width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2530,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,884,27435,27435,AssignmentMutator,pos=width,*,3,0.008919783,pos <mask>= width,"        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos<mask>= width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2531,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,884,27435,27435,AssignmentMutator,pos=width,>>,4,0.0075361077,pos <mask>= width,"        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos<mask>= width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2532,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,884,27432,27434,IdentifierMutator-Variable,pos,position,2,7.035593E-4,<mask>,"   // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {<mask> = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2533,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,884,27432,27434,IdentifierMutator-Variable,pos,Pos,3,5.4005015E-4,<mask>,"   // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {<mask> = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2534,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,884,27432,27434,IdentifierMutator-Variable,pos,offset,4,2.8978262E-4,<mask>,"   // all following lines must be padded with nextLineTabStop space characters
        final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {<mask> = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2535,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,884,27438,27442,IdentifierMutator-Variable,width,0,0,0.76859844,<mask>,"       final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos =<mask>;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2536,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,884,27438,27442,IdentifierMutator-Variable,width,1,2,0.013782017,<mask>,"       final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos =<mask>;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2537,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,884,27438,27442,IdentifierMutator-Variable,width,length,3,0.0071127196,<mask>,"       final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos =<mask>;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2538,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,884,27438,27442,IdentifierMutator-Variable,width,null,4,0.005662119,<mask>,"       final String padding = createPadding(nextLineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos =<mask>;
            }

            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2539,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27513,27518,MethodCallMutator,append,strip,1,0.028589262,"sb.<mask>(rtrim(text.substring(0, pos))).<mask>(defaultNewLine)","       text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).<mask>(defaultNewLine);
        }
   "
2540,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27513,27518,MethodCallMutator,append,join,2,0.025747873,"sb.<mask>(rtrim(text.substring(0, pos))).<mask>(defaultNewLine)","       text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).<mask>(defaultNewLine);
        }
   "
2541,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27513,27518,MethodCallMutator,append,split,3,0.0054392316,"sb.<mask>(rtrim(text.substring(0, pos))).<mask>(defaultNewLine)","       text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).<mask>(defaultNewLine);
        }
   "
2542,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27513,27518,MethodCallMutator,append,replace,4,0.0045650727,"sb.<mask>(rtrim(text.substring(0, pos))).<mask>(defaultNewLine)","       text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).<mask>(defaultNewLine);
        }
   "
2543,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27475,27480,MethodCallMutator,append,escape,1,0.0013880997,"sb.<mask>(rtrim(text.substring(0, pos)))",")
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.<mask>(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2544,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27475,27480,MethodCallMutator,append,write,2,8.8579E-4,"sb.<mask>(rtrim(text.substring(0, pos)))",")
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.<mask>(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2545,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27475,27480,MethodCallMutator,append,replace,3,6.668845E-4,"sb.<mask>(rtrim(text.substring(0, pos)))",")
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.<mask>(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2546,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27475,27480,MethodCallMutator,append,end,4,6.6597946E-4,"sb.<mask>(rtrim(text.substring(0, pos)))",")
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.<mask>(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2547,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27472,27473,IdentifierMutator-Variable,sb,out,0,0.105508894,<mask>,"LineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }<mask>.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2548,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27472,27473,IdentifierMutator-Variable,sb,output,1,0.1002343,<mask>,"LineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }<mask>.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2549,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27472,27473,IdentifierMutator-Variable,sb,result,2,0.09629764,<mask>,"LineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }<mask>.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2550,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27472,27473,IdentifierMutator-Variable,sb,buf,3,0.065689325,<mask>,"LineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }<mask>.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2551,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27472,27473,IdentifierMutator-Variable,sb,text,4,0.061665345,<mask>,"LineTabStop);

        while (true)
        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }<mask>.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2552,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27482,27486,MethodCallMutator,rtrim,escape,0,0.64744836,"<mask>(text.substring(0, pos))","        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(<mask>(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2553,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27482,27486,MethodCallMutator,rtrim,trim,1,0.09638974,"<mask>(text.substring(0, pos))","        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(<mask>(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2554,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27482,27486,MethodCallMutator,rtrim,quote,2,0.025045615,"<mask>(text.substring(0, pos))","        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(<mask>(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2555,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27482,27486,MethodCallMutator,rtrim,escape,3,0.022750158,"<mask>(text.substring(0, pos))","        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(<mask>(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2556,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27482,27486,MethodCallMutator,rtrim,strip,4,0.02112702,"<mask>(text.substring(0, pos))","        {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(<mask>(text.substring(0, pos))).append(defaultNewLine);
        }
   "
2557,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27493,27501,MethodCallMutator,substring,slice,0,0.57212937,"text.<mask>(0, pos)","  {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.<mask>(0, pos))).append(defaultNewLine);
        }
   "
2558,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27493,27501,MethodCallMutator,substring,ring,1,0.13613261,"text.<mask>(0, pos)","  {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.<mask>(0, pos))).append(defaultNewLine);
        }
   "
2559,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27493,27501,MethodCallMutator,substring,fill,2,0.13083433,"text.<mask>(0, pos)","  {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.<mask>(0, pos))).append(defaultNewLine);
        }
   "
2560,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27493,27501,MethodCallMutator,substring,string,3,0.031641923,"text.<mask>(0, pos)","  {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.<mask>(0, pos))).append(defaultNewLine);
        }
   "
2561,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27493,27501,MethodCallMutator,substring,replace,4,0.023926161,"text.<mask>(0, pos)","  {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.<mask>(0, pos))).append(defaultNewLine);
        }
   "
2562,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27488,27491,IdentifierMutator-Variable,text,Text,2,6.196283E-4,<mask>,"    {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(<mask>.substring(0, pos))).append(defaultNewLine);
        }
   "
2563,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27488,27491,IdentifierMutator-Variable,text,word,3,4.885404E-4,<mask>,"    {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(<mask>.substring(0, pos))).append(defaultNewLine);
        }
   "
2564,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27488,27491,IdentifierMutator-Variable,text,source,4,3.6744442E-4,<mask>,"    {
            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(<mask>.substring(0, pos))).append(defaultNewLine);
        }
   "
2565,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27503,27503,IdentifierMutator-Literal,0,width,1,0.13529891,<mask>,"            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(<mask>, pos))).append(defaultNewLine);
        }
   "
2566,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27503,27503,IdentifierMutator-Literal,0,pos,2,0.0290662,<mask>,"            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(<mask>, pos))).append(defaultNewLine);
        }
   "
2567,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27503,27503,IdentifierMutator-Literal,0,1,4,0.019231932,<mask>,"            text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(<mask>, pos))).append(defaultNewLine);
        }
   "
2568,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27506,27508,IdentifierMutator-Variable,pos,width,1,0.030027457,<mask>,"          text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0,<mask>))).append(defaultNewLine);
        }
   "
2569,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27506,27508,IdentifierMutator-Variable,pos,position,3,0.0038057268,<mask>,"          text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0,<mask>))).append(defaultNewLine);
        }
   "
2570,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27506,27508,IdentifierMutator-Variable,pos,len,4,0.0033314144,<mask>,"          text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0,<mask>))).append(defaultNewLine);
        }
   "
2571,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27520,27533,IdentifierMutator-Variable,defaultNewLine,padding,0,0.24900666,<mask>,"     text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(<mask>);
        }
   "
2572,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27520,27533,IdentifierMutator-Variable,defaultNewLine,text,1,0.15949227,<mask>,"     text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(<mask>);
        }
   "
2573,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27520,27533,IdentifierMutator-Variable,defaultNewLine,width,2,0.0754643,<mask>,"     text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(<mask>);
        }
   "
2574,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27520,27533,IdentifierMutator-Variable,defaultNewLine,end,3,0.063675255,<mask>,"     text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(<mask>);
        }
   "
2575,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27520,27533,IdentifierMutator-Variable,defaultNewLine,pad,4,0.041106854,<mask>,"     text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(<mask>);
        }
   "
2576,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27520,27533,FieldReferenceMutator,defaultNewLine,padding,0,0.24900666,<mask>,"     text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(<mask>);
        }
   "
2577,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27520,27533,FieldReferenceMutator,defaultNewLine,text,1,0.15949227,<mask>,"     text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(<mask>);
        }
   "
2578,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27520,27533,FieldReferenceMutator,defaultNewLine,width,2,0.0754643,<mask>,"     text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(<mask>);
        }
   "
2579,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27520,27533,FieldReferenceMutator,defaultNewLine,end,3,0.063675255,<mask>,"     text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(<mask>);
        }
   "
2580,HelpFormatter.java,renderWrappedText,"StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                             int nextLineTabStop, String text)",848,887,27520,27533,FieldReferenceMutator,defaultNewLine,pad,4,0.041106854,<mask>,"     text = padding + text.substring(pos).trim();
            pos = findWrapPos(text, width, 0);

            if (pos == -1)
            {
                sb.append(text);

                return sb;
            }
            
            if ((text.length() > width) && (pos == nextLineTabStop - 1))
            {
                pos = width;
            }

            sb.append(rtrim(text.substring(0, pos))).append(<mask>);
        }
   "
2581,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,902,28182,28185,IdentifierMutator-Variable,text,txt,2,5.4531195E-4,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(<mask>));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2582,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,902,28182,28185,IdentifierMutator-Variable,text,string,3,2.843458E-4,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(<mask>));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2583,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,902,28182,28185,IdentifierMutator-Variable,text,Text,4,1.4663272E-4,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(<mask>));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2584,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,904,28247,28250,IdentifierMutator-Literal,true,false,1,0.022569831,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine =<mask>;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2585,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,904,28247,28250,IdentifierMutator-Literal,true,TRUE,3,6.685246E-5,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine =<mask>;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2586,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,904,28247,28250,IdentifierMutator-Literal,true,True,4,3.5451347E-5,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine =<mask>;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2587,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28294,28297,BinaryOperatorMutator,!=,==,0,0.88623625,(line = in.readLine()) <mask> null,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine())<mask>null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2588,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28294,28297,BinaryOperatorMutator,!=,=,1,0.047295574,(line = in.readLine()) <mask> null,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine())<mask>null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2589,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28294,28297,BinaryOperatorMutator,!=,...,3,0.0032893412,(line = in.readLine()) <mask> null,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine())<mask>null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2590,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28294,28297,BinaryOperatorMutator,!=,|,4,0.0029711507,(line = in.readLine()) <mask> null,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine())<mask>null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2591,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28277,28277,AssignmentMutator,(line=in.readLine()),|,0,0.31881148,line <mask>= in.readLine(),"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line<mask>= in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2592,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28277,28277,AssignmentMutator,(line=in.readLine()),=,1,0.18417147,line <mask>= in.readLine(),"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line<mask>= in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2593,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28277,28277,AssignmentMutator,(line=in.readLine()),=,2,0.11400338,line <mask>= in.readLine(),"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line<mask>= in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2594,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28277,28277,AssignmentMutator,(line=in.readLine()),&,3,0.08435732,line <mask>= in.readLine(),"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line<mask>= in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2595,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28277,28277,AssignmentMutator,(line=in.readLine()),,4,0.03975386,line <mask>= in.readLine(),"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line<mask>= in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2596,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28273,28276,IdentifierMutator-Variable,line,Line,2,9.6809113E-4,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((<mask> = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2597,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28273,28276,IdentifierMutator-Variable,line,block,3,7.147231E-5,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((<mask> = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2598,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28273,28276,IdentifierMutator-Variable,line,LINE,4,3.135996E-5,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((<mask> = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2599,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28283,28290,MethodCallMutator,readLine,read,0,0.4703728,in.<mask>(),"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.<mask>()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2600,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28283,28290,MethodCallMutator,readLine,next,1,0.3032897,in.<mask>(),"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.<mask>()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2601,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28283,28290,MethodCallMutator,readLine,line,2,0.19381647,in.<mask>(),"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.<mask>()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2602,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28283,28290,MethodCallMutator,readLine,Line,3,0.012338767,in.<mask>(),"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.<mask>()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2603,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28283,28290,MethodCallMutator,readLine,get,4,0.0029872577,in.<mask>(),"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.<mask>()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2604,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28280,28281,IdentifierMutator-Variable,in,reader,2,6.7362393E-4,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line =<mask>.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2605,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28280,28281,IdentifierMutator-Variable,in,is,3,1.0248128E-4,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line =<mask>.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2606,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28280,28281,IdentifierMutator-Variable,in,out,4,9.129054E-5,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line =<mask>.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2607,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28298,28301,IdentifierMutator-Literal,null,"""""",1,0.0021309212,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) !=<mask>) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2608,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28298,28301,IdentifierMutator-Literal,null,"''",2,0.0015704398,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) !=<mask>) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2609,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28298,28301,IdentifierMutator-Literal,null,text,3,6.406685E-4,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) !=<mask>) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2610,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,905,28298,28301,IdentifierMutator-Literal,null,0,4,4.6747935E-4,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) !=<mask>) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2611,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,906,28326,28326,UnaryOperatorMutator,!,...,2,0.0040569855,<mask>firstLine,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (<mask>firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2612,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,906,28326,28326,UnaryOperatorMutator,!,!!,3,0.0030464337,<mask>firstLine,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (<mask>firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2613,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,906,28326,28326,UnaryOperatorMutator,!,?,4,0.0012197065,<mask>firstLine,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (<mask>firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2614,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,906,28327,28335,IdentifierMutator-Variable,firstLine,first,0,0.63527066,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!<mask>) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2615,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,906,28327,28335,IdentifierMutator-Variable,firstLine,last,1,0.11463593,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!<mask>) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2616,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,906,28327,28335,IdentifierMutator-Variable,firstLine,break,2,0.028515281,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!<mask>) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2617,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,906,28327,28335,IdentifierMutator-Variable,firstLine,interrupted,3,0.016914204,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!<mask>) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2618,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,906,28327,28335,IdentifierMutator-Variable,firstLine,next,4,0.010222097,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!<mask>) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2619,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,907,28363,28368,MethodCallMutator,append,write,1,0.029556941,sb.<mask>(getNewLine()),"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.<mask>(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2620,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,907,28363,28368,MethodCallMutator,append,print,3,7.203969E-4,sb.<mask>(getNewLine()),"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.<mask>(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2621,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,907,28363,28368,MethodCallMutator,append,insert,4,4.006379E-4,sb.<mask>(getNewLine()),"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.<mask>(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2622,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,907,28360,28361,IdentifierMutator-Variable,sb,out,1,0.18270844,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {<mask>.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2623,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,907,28360,28361,IdentifierMutator-Variable,sb,buf,2,0.15313105,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {<mask>.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2624,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,907,28360,28361,IdentifierMutator-Variable,sb,line,3,0.12069372,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {<mask>.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2625,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,907,28360,28361,IdentifierMutator-Variable,sb,buffer,4,0.095878065,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {<mask>.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2626,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,907,28370,28379,MethodCallMutator,getNewLine,line,0,0.26468554,<mask>(),"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(<mask>());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2627,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,907,28370,28379,MethodCallMutator,getNewLine,text,1,0.08883654,<mask>(),"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(<mask>());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2628,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,907,28370,28379,MethodCallMutator,getNewLine,escape,2,0.048285678,<mask>(),"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(<mask>());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2629,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,907,28370,28379,MethodCallMutator,getNewLine,next,3,0.036151823,<mask>(),"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(<mask>());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2630,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,907,28370,28379,MethodCallMutator,getNewLine,format,4,0.02102051,<mask>(),"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(<mask>());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2631,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,909,28439,28439,AssignmentMutator,firstLine=false,|,0,0.78294426,firstLine <mask>= false,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine<mask>= false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2632,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,909,28439,28439,AssignmentMutator,firstLine=false,&,1,0.1287183,firstLine <mask>= false,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine<mask>= false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2633,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,909,28439,28439,AssignmentMutator,firstLine=false,*,2,0.02711537,firstLine <mask>= false,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine<mask>= false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2634,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,909,28439,28439,AssignmentMutator,firstLine=false,^,3,0.016343048,firstLine <mask>= false,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine<mask>= false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2635,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,909,28439,28439,AssignmentMutator,firstLine=false,=,4,0.010515299,firstLine <mask>= false,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine<mask>= false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2636,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,909,28430,28438,IdentifierMutator-Variable,firstLine,first,0,0.31627142,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {<mask> = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2637,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,909,28430,28438,IdentifierMutator-Variable,firstLine,line,1,0.1705452,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {<mask> = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2638,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,909,28430,28438,IdentifierMutator-Variable,firstLine,line,2,0.032003812,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {<mask> = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2639,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,909,28430,28438,IdentifierMutator-Variable,firstLine,found,3,0.031715535,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {<mask> = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2640,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,909,28430,28438,IdentifierMutator-Variable,firstLine,last,4,0.025060788,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {<mask> = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2641,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,909,28442,28446,IdentifierMutator-Literal,false,true,1,0.006187859,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine =<mask>;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2642,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,909,28442,28446,IdentifierMutator-Literal,false,False,3,2.1506437E-5,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine =<mask>;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2643,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,909,28442,28446,IdentifierMutator-Literal,false,FALSE,4,1.694075E-5,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine =<mask>;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2644,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,911,28483,28499,MethodCallMutator,renderWrappedText,render,0,0.5731133,"<mask>(sb, width, nextLineTabStop, line)","StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }<mask>(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2645,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,911,28483,28499,MethodCallMutator,renderWrappedText,print,1,0.081238724,"<mask>(sb, width, nextLineTabStop, line)","StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }<mask>(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2646,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,911,28483,28499,MethodCallMutator,renderWrappedText,write,2,0.06741198,"<mask>(sb, width, nextLineTabStop, line)","StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }<mask>(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2647,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,911,28483,28499,MethodCallMutator,renderWrappedText,wrap,3,0.062712155,"<mask>(sb, width, nextLineTabStop, line)","StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }<mask>(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2648,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,911,28483,28499,MethodCallMutator,renderWrappedText,append,4,0.021765595,"<mask>(sb, width, nextLineTabStop, line)","StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }<mask>(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2649,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,911,28501,28502,IdentifierMutator-Variable,sb,in,1,0.0355199,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(<mask>, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2650,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,911,28501,28502,IdentifierMutator-Variable,sb,b,2,0.029394789,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(<mask>, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2651,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,911,28501,28502,IdentifierMutator-Variable,sb,this,3,0.015411516,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(<mask>, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2652,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,911,28501,28502,IdentifierMutator-Variable,sb,out,4,0.012762664,<mask>,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(<mask>, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2653,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,911,28505,28509,IdentifierMutator-Variable,width,height,2,2.3954421E-4,<mask>," renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb,<mask>, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2654,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,911,28505,28509,IdentifierMutator-Variable,width,Width,3,1.9157708E-4,<mask>," renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb,<mask>, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2655,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,911,28505,28509,IdentifierMutator-Variable,width,Width,4,8.428455E-5,<mask>," renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb,<mask>, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2656,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,911,28512,28526,IdentifierMutator-Variable,nextLineTabStop,height,0,0.07955203,<mask>,"ppedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width,<mask>, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2657,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,911,28512,28526,IdentifierMutator-Variable,nextLineTabStop,next,1,0.061355207,<mask>,"ppedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width,<mask>, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2658,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,911,28512,28526,IdentifierMutator-Variable,nextLineTabStop,tab,2,0.054613974,<mask>,"ppedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width,<mask>, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2659,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,911,28512,28526,IdentifierMutator-Variable,nextLineTabStop,1,3,0.053969875,<mask>,"ppedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width,<mask>, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2660,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,911,28512,28526,IdentifierMutator-Variable,nextLineTabStop,0,4,0.051033225,<mask>,"ppedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width,<mask>, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2661,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,911,28529,28532,IdentifierMutator-Variable,line,text,0,0.912359,<mask>,"Buffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop,<mask>);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2662,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,911,28529,28532,IdentifierMutator-Variable,line,true,2,0.0010500961,<mask>,"Buffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop,<mask>);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2663,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,911,28529,28532,IdentifierMutator-Variable,line,content,3,8.0283644E-4,<mask>,"Buffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop,<mask>);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2664,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,911,28529,28532,IdentifierMutator-Variable,line,lines,4,5.687758E-4,<mask>,"Buffer sb, int width, int nextLineTabStop, String text) {
        try {
            BufferedReader in = new BufferedReader(new StringReader(text));
            String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop,<mask>);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return sb;
    }"
2665,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,917,28639,28640,IdentifierMutator-Variable,sb,line,0,0.23198228,<mask>,"    String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return<mask>;
    }"
2666,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,917,28639,28640,IdentifierMutator-Variable,sb,null,1,0.18659721,<mask>,"    String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return<mask>;
    }"
2667,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,917,28639,28640,IdentifierMutator-Variable,sb,false,2,0.15654892,<mask>,"    String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return<mask>;
    }"
2668,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,917,28639,28640,IdentifierMutator-Variable,sb,true,3,0.06642925,<mask>,"    String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return<mask>;
    }"
2669,HelpFormatter.java,renderWrappedTextBlock,"StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)",900,917,28639,28640,IdentifierMutator-Variable,sb,"""""",4,0.05721733,<mask>,"    String line;
            boolean firstLine = true;
            while ((line = in.readLine()) != null) {
                if (!firstLine) {
                    sb.append(getNewLine());
                } else {
                    firstLine = false;
                }
                renderWrappedText(sb, width, nextLineTabStop, line);
            }
        } catch (IOException e) {
            // cannot happen
        }

        return<mask>;
    }"
2670,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29607,29626,BinaryOperatorMutator,||,//,1,0.06413288,"(((pos = text.indexOf('\n', startPos)) != (-1)) && (pos <= width)) <mask> (((pos = text.indexOf('\t', startPos)) != (-1)) && (pos <= width))","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)<mask>((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
    }"
2671,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29607,29626,BinaryOperatorMutator,||,|,2,0.023352882,"(((pos = text.indexOf('\n', startPos)) != (-1)) && (pos <= width)) <mask> (((pos = text.indexOf('\t', startPos)) != (-1)) && (pos <= width))","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)<mask>((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
    }"
2672,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29607,29626,BinaryOperatorMutator,||,^,3,0.020615587,"(((pos = text.indexOf('\n', startPos)) != (-1)) && (pos <= width)) <mask> (((pos = text.indexOf('\t', startPos)) != (-1)) && (pos <= width))","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)<mask>((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
    }"
2673,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29607,29626,BinaryOperatorMutator,||,OR,4,0.01770599,"(((pos = text.indexOf('\n', startPos)) != (-1)) && (pos <= width)) <mask> (((pos = text.indexOf('\t', startPos)) != (-1)) && (pos <= width))","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)<mask>((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
    }"
2674,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29590,29593,BinaryOperatorMutator,&&,&,2,0.0024418202,"((pos = text.indexOf('\n', startPos)) != (-1)) <mask> (pos <= width)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1<mask>pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2675,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29590,29593,BinaryOperatorMutator,&&,?,3,0.0018275174,"((pos = text.indexOf('\n', startPos)) != (-1)) <mask> (pos <= width)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1<mask>pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2676,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29590,29593,BinaryOperatorMutator,&&,&,4,6.4901594E-4,"((pos = text.indexOf('\n', startPos)) != (-1)) <mask> (pos <= width)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1<mask>pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2677,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29584,29587,BinaryOperatorMutator,!=,==,1,0.064968854,"(pos = text.indexOf('\n', startPos)) <mask> (-1)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos))<mask>-1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2678,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29584,29587,BinaryOperatorMutator,!=,==,2,0.052560624,"(pos = text.indexOf('\n', startPos)) <mask> (-1)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos))<mask>-1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2679,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29584,29587,BinaryOperatorMutator,!=,>,3,0.019652199,"(pos = text.indexOf('\n', startPos)) <mask> (-1)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos))<mask>-1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2680,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29584,29587,BinaryOperatorMutator,!=,>,4,0.006400331,"(pos = text.indexOf('\n', startPos)) <mask> (-1)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos))<mask>-1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2681,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29552,29552,AssignmentMutator,"(pos=text.indexOf('\n',startPos))",|,0,0.5004966,"pos <mask>= text.indexOf('\n', startPos)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos<mask>= text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos"
2682,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29552,29552,AssignmentMutator,"(pos=text.indexOf('\n',startPos))",!,1,0.08958856,"pos <mask>= text.indexOf('\n', startPos)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos<mask>= text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos"
2683,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29552,29552,AssignmentMutator,"(pos=text.indexOf('\n',startPos))",|,2,0.07702951,"pos <mask>= text.indexOf('\n', startPos)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos<mask>= text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos"
2684,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29552,29552,AssignmentMutator,"(pos=text.indexOf('\n',startPos))",=,3,0.043418366,"pos <mask>= text.indexOf('\n', startPos)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos<mask>= text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos"
2685,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29552,29552,AssignmentMutator,"(pos=text.indexOf('\n',startPos))",*,4,0.037065975,"pos <mask>= text.indexOf('\n', startPos)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos<mask>= text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos"
2686,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29549,29551,IdentifierMutator-Variable,pos,Pos,2,4.4867465E-6,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((<mask> = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2687,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29549,29551,IdentifierMutator-Variable,pos,position,3,3.706874E-6,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((<mask> = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2688,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29549,29551,IdentifierMutator-Variable,pos,po,4,1.6842736E-6,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((<mask> = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2689,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29560,29566,MethodCallMutator,indexOf,find,0,0.7143173,"text.<mask>('\n', startPos)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.<mask>('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2690,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29560,29566,MethodCallMutator,indexOf,index,1,0.2240846,"text.<mask>('\n', startPos)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.<mask>('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2691,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29560,29566,MethodCallMutator,indexOf,search,2,0.051973462,"text.<mask>('\n', startPos)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.<mask>('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2692,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29560,29566,MethodCallMutator,indexOf,count,3,0.0031756186,"text.<mask>('\n', startPos)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.<mask>('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2693,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29560,29566,MethodCallMutator,indexOf,match,4,0.0010050348,"text.<mask>('\n', startPos)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.<mask>('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2694,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29555,29558,IdentifierMutator-Variable,text,Text,2,2.523909E-6,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos =<mask>.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2695,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29555,29558,IdentifierMutator-Variable,text,string,3,2.0487653E-6,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos =<mask>.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2696,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29555,29558,IdentifierMutator-Variable,text,word,4,1.7404967E-6,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos =<mask>.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2697,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29568,29571,IdentifierMutator-Literal,"'\n'",break,0,0.20534429,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf(<mask>, startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2698,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29568,29571,IdentifierMutator-Literal,"'\n'","\""",1,0.09255107,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf(<mask>, startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2699,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29568,29571,IdentifierMutator-Literal,"'\n'",br,2,0.046911813,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf(<mask>, startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2700,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29568,29571,IdentifierMutator-Literal,"'\n'","\\",3,0.029768981,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf(<mask>, startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2701,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29568,29571,IdentifierMutator-Literal,"'\n'",space,4,0.027902741,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf(<mask>, startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2702,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29574,29581,IdentifierMutator-Variable,startPos,pos,0,0.89714277,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n',<mask>)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2703,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29574,29581,IdentifierMutator-Variable,startPos,width,1,0.023593076,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n',<mask>)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2704,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29574,29581,IdentifierMutator-Variable,startPos,start,2,0.023282275,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n',<mask>)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2705,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29574,29581,IdentifierMutator-Variable,startPos,0,3,0.015112475,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n',<mask>)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2706,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29574,29581,IdentifierMutator-Variable,startPos,position,4,0.014482166,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n',<mask>)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2707,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29588,29588,UnaryOperatorMutator,-,+,1,4.085185E-4,<mask>1,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) !=<mask>1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2708,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29588,29588,UnaryOperatorMutator,-,"""-",3,6.6347234E-6,<mask>1,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) !=<mask>1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2709,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29588,29588,UnaryOperatorMutator,-,(-,4,3.913849E-6,<mask>1,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) !=<mask>1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2710,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29589,29589,IdentifierMutator-Literal,1,2,2,4.5264247E-4,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -<mask> && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2711,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29589,29589,IdentifierMutator-Literal,1,3,3,4.330815E-5,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -<mask> && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2712,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29589,29589,IdentifierMutator-Literal,1,5,4,1.5744086E-5,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -<mask> && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2713,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29597,29600,BinaryOperatorMutator,<=,<,1,0.08726527,pos <mask> width,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos<mask>width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2714,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29597,29600,BinaryOperatorMutator,<=,<,2,0.058135856,pos <mask> width,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos<mask>width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2715,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29597,29600,BinaryOperatorMutator,<=,>=,3,0.053171348,pos <mask> width,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos<mask>width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2716,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29597,29600,BinaryOperatorMutator,<=,>,4,0.018782966,pos <mask> width,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos<mask>width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2717,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29594,29596,IdentifierMutator-Variable,pos,position,1,9.552453E-5,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 &&<mask> <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2718,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29594,29596,IdentifierMutator-Variable,pos,len,3,3.9657927E-5,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 &&<mask> <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2719,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29594,29596,IdentifierMutator-Variable,pos,p,4,1.8982424E-5,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 &&<mask> <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2720,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29601,29605,IdentifierMutator-Variable,width,0,1,0.004328307,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <=<mask>)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2721,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29601,29605,IdentifierMutator-Variable,width,w,2,0.0013948547,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <=<mask>)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2722,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,939,29601,29605,IdentifierMutator-Variable,width,height,3,0.0011670041,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <=<mask>)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2723,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29670,29673,BinaryOperatorMutator,&&,&,2,9.5526763E-4,"((pos = text.indexOf('\t', startPos)) != (-1)) <mask> (pos <= width)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1<mask>pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2724,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29670,29673,BinaryOperatorMutator,&&,?,3,7.7387085E-4,"((pos = text.indexOf('\t', startPos)) != (-1)) <mask> (pos <= width)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1<mask>pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2725,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29670,29673,BinaryOperatorMutator,&&,&,4,5.68803E-4,"((pos = text.indexOf('\t', startPos)) != (-1)) <mask> (pos <= width)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1<mask>pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2726,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29664,29667,BinaryOperatorMutator,!=,==,1,0.024025928,"(pos = text.indexOf('\t', startPos)) <mask> (-1)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos))<mask>-1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2727,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29664,29667,BinaryOperatorMutator,!=,>,2,0.014264626,"(pos = text.indexOf('\t', startPos)) <mask> (-1)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos))<mask>-1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2728,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29664,29667,BinaryOperatorMutator,!=,==,3,0.012373907,"(pos = text.indexOf('\t', startPos)) <mask> (-1)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos))<mask>-1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2729,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29664,29667,BinaryOperatorMutator,!=,>,4,4.7173374E-4,"(pos = text.indexOf('\t', startPos)) <mask> (-1)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos))<mask>-1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2730,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29632,29632,AssignmentMutator,"(pos=text.indexOf('\t',startPos))",|,0,0.33520824,"pos <mask>= text.indexOf('\t', startPos)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos<mask>= text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos"
2731,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29632,29632,AssignmentMutator,"(pos=text.indexOf('\t',startPos))",!,1,0.1638227,"pos <mask>= text.indexOf('\t', startPos)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos<mask>= text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos"
2732,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29632,29632,AssignmentMutator,"(pos=text.indexOf('\t',startPos))",<,2,0.09784502,"pos <mask>= text.indexOf('\t', startPos)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos<mask>= text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos"
2733,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29632,29632,AssignmentMutator,"(pos=text.indexOf('\t',startPos))",*,3,0.049996514,"pos <mask>= text.indexOf('\t', startPos)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos<mask>= text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos"
2734,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29632,29632,AssignmentMutator,"(pos=text.indexOf('\t',startPos))",>,4,0.043488707,"pos <mask>= text.indexOf('\t', startPos)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos<mask>= text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos"
2735,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29629,29631,IdentifierMutator-Variable,pos,Pos,2,1.5967875E-5,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((<mask> = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2736,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29629,29631,IdentifierMutator-Variable,pos,position,3,5.6657777E-6,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((<mask> = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2737,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29629,29631,IdentifierMutator-Variable,pos,len,4,3.9657903E-6,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((<mask> = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2738,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29640,29646,MethodCallMutator,indexOf,index,0,0.68776315,"text.<mask>('\t', startPos)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.<mask>('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2739,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29640,29646,MethodCallMutator,indexOf,find,1,0.23494774,"text.<mask>('\t', startPos)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.<mask>('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2740,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29640,29646,MethodCallMutator,indexOf,search,2,0.043886628,"text.<mask>('\t', startPos)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.<mask>('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2741,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29640,29646,MethodCallMutator,indexOf,count,3,0.0077019134,"text.<mask>('\t', startPos)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.<mask>('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2742,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29640,29646,MethodCallMutator,indexOf,replace,4,0.0073767286,"text.<mask>('\t', startPos)","int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.<mask>('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2743,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29635,29638,IdentifierMutator-Variable,text,Text,2,6.5343265E-6,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos =<mask>.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2744,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29635,29638,IdentifierMutator-Variable,text,word,3,4.3566497E-6,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos =<mask>.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2745,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29635,29638,IdentifierMutator-Variable,text,string,4,4.3067885E-6,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos =<mask>.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2746,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29648,29651,IdentifierMutator-Literal,"'\t'","\""",0,0.123691514,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf(<mask>, startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2747,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29648,29651,IdentifierMutator-Literal,"'\t'",break,1,0.057843044,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf(<mask>, startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2748,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29648,29651,IdentifierMutator-Literal,"'\t'","''",2,0.05012486,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf(<mask>, startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2749,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29648,29651,IdentifierMutator-Literal,"'\t'",br,3,0.042142797,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf(<mask>, startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2750,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29648,29651,IdentifierMutator-Literal,"'\t'",#,4,0.03234598,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf(<mask>, startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2751,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29654,29661,IdentifierMutator-Variable,startPos,pos,0,0.9453965,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t',<mask>)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2752,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29654,29661,IdentifierMutator-Variable,startPos,0,1,0.015414499,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t',<mask>)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2753,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29654,29661,IdentifierMutator-Variable,startPos,width,2,0.009174289,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t',<mask>)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2754,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29654,29661,IdentifierMutator-Variable,startPos,position,3,0.007836095,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t',<mask>)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2755,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29654,29661,IdentifierMutator-Variable,startPos,pos,4,0.0018539951,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t',<mask>)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2756,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29668,29668,UnaryOperatorMutator,-,+,1,1.6126693E-4,<mask>1,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) !=<mask>1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2757,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29668,29668,UnaryOperatorMutator,-,"""-",3,2.6723992E-6,<mask>1,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) !=<mask>1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2758,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29668,29668,UnaryOperatorMutator,-,0,4,2.2145502E-6,<mask>1,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) !=<mask>1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2759,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29669,29669,IdentifierMutator-Literal,1,2,1,2.5307253E-4,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -<mask> && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2760,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29669,29669,IdentifierMutator-Literal,1,3,3,2.234336E-5,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -<mask> && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2761,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29669,29669,IdentifierMutator-Literal,1,0,4,1.4699518E-5,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -<mask> && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2762,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29677,29680,BinaryOperatorMutator,<=,<,1,0.07434729,pos <mask> width,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos<mask>width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2763,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29677,29680,BinaryOperatorMutator,<=,>=,2,0.06570818,pos <mask> width,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos<mask>width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2764,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29677,29680,BinaryOperatorMutator,<=,<,3,0.019510483,pos <mask> width,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos<mask>width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2765,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29677,29680,BinaryOperatorMutator,<=,>,4,0.015171815,pos <mask> width,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos<mask>width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2766,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29674,29676,IdentifierMutator-Variable,pos,len,1,1.1340437E-4,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 &&<mask> <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2767,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29674,29676,IdentifierMutator-Variable,pos,position,2,5.216001E-5,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 &&<mask> <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2768,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29674,29676,IdentifierMutator-Variable,pos,0,3,4.963416E-5,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 &&<mask> <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2769,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29681,29685,IdentifierMutator-Variable,width,0,1,0.005717729,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <=<mask>))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2770,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29681,29685,IdentifierMutator-Variable,width,height,2,0.0026014883,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <=<mask>))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2771,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29681,29685,IdentifierMutator-Variable,width,1,3,0.0014868975,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <=<mask>))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2772,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,940,29681,29685,IdentifierMutator-Variable,width,length,4,8.9803827E-4,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <=<mask>))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2773,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,942,29721,29723,BinaryOperatorMutator,+,-,1,0.37998208,pos <mask> 1,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos<mask>1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2774,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,942,29721,29723,BinaryOperatorMutator,+,-,3,0.029254053,pos <mask> 1,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos<mask>1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2775,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,942,29721,29723,BinaryOperatorMutator,+,=-,4,0.0014085561,pos <mask> 1,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos<mask>1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2776,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,942,29718,29720,IdentifierMutator-Variable,pos,position,1,0.0016006829,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return<mask> + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2777,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,942,29718,29720,IdentifierMutator-Variable,pos,index,2,0.0012119205,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return<mask> + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2778,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,942,29718,29720,IdentifierMutator-Variable,pos,width,3,5.13411E-4,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return<mask> + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2779,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,942,29718,29720,IdentifierMutator-Variable,pos,i,4,4.499978E-4,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return<mask> + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2780,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,942,29724,29724,IdentifierMutator-Literal,1,width,0,0.8261552,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos +<mask>;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2781,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,942,29724,29724,IdentifierMutator-Literal,1,2,2,0.0096214255,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos +<mask>;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2782,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,942,29724,29724,IdentifierMutator-Literal,1,w,3,0.0053542666,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos +<mask>;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2783,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,942,29724,29724,IdentifierMutator-Literal,1,4,4,0.0041676722,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos +<mask>;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2784,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29770,29773,BinaryOperatorMutator,>=,>,0,0.2870532,(startPos + width) <mask> text.length(),"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width<mask>text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2785,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29770,29773,BinaryOperatorMutator,>=,>,1,0.19145149,(startPos + width) <mask> text.length(),"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width<mask>text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2786,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29770,29773,BinaryOperatorMutator,>=,==,2,0.17134061,(startPos + width) <mask> text.length(),"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width<mask>text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2787,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29770,29773,BinaryOperatorMutator,>=,<,4,0.08811695,(startPos + width) <mask> text.length(),"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width<mask>text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2788,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29762,29764,BinaryOperatorMutator,+,-,2,0.018301005,startPos <mask> width,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos<mask>width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2789,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29762,29764,BinaryOperatorMutator,+,++,3,0.0052999137,startPos <mask> width,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos<mask>width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2790,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29762,29764,BinaryOperatorMutator,+,)+,4,6.38005E-4,startPos <mask> width,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos<mask>width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2791,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29754,29761,IdentifierMutator-Variable,startPos,pos,0,0.98442346,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (<mask> + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2792,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29754,29761,IdentifierMutator-Variable,startPos,position,1,0.0057468405,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (<mask> + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2793,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29754,29761,IdentifierMutator-Variable,startPos,pos,2,0.0015698632,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (<mask> + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2794,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29754,29761,IdentifierMutator-Variable,startPos,1,3,8.1098446E-4,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (<mask> + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2795,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29754,29761,IdentifierMutator-Variable,startPos,Pos,4,6.297729E-4,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (<mask> + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
"
2796,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29765,29769,IdentifierMutator-Variable,width,1,1,0.019889822,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos +<mask> >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2797,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29765,29769,IdentifierMutator-Variable,width,w,2,0.0042470912,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos +<mask> >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2798,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29765,29769,IdentifierMutator-Variable,width,2,3,0.0037484092,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos +<mask> >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2799,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29765,29769,IdentifierMutator-Variable,width,height,4,0.002172912,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos +<mask> >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2800,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29779,29784,MethodCallMutator,length,width,1,7.1382674E-5,text.<mask>(),"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.<mask>())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2801,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29779,29784,MethodCallMutator,length,len,2,2.4342988E-5,text.<mask>(),"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.<mask>())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2802,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29779,29784,MethodCallMutator,length,position,4,6.515835E-6,text.<mask>(),"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.<mask>())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2803,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29774,29777,IdentifierMutator-Variable,text,input,1,2.215273E-4,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >=<mask>.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2804,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29774,29777,IdentifierMutator-Variable,text,source,2,1.9862068E-4,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >=<mask>.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2805,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29774,29777,IdentifierMutator-Variable,text,string,3,1.8232109E-4,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >=<mask>.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2806,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,944,29774,29777,IdentifierMutator-Variable,text,line,4,1.5333235E-4,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >=<mask>.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2807,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,946,29818,29818,UnaryOperatorMutator,-,+,1,0.008118139,<mask>1,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return<mask>1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2808,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,946,29818,29818,UnaryOperatorMutator,-,$,3,1.4554625E-4,<mask>1,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return<mask>1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2809,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,946,29818,29818,UnaryOperatorMutator,-,(-,4,1.2031781E-4,<mask>1,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return<mask>1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2810,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,946,29819,29819,IdentifierMutator-Literal,1,2,2,0.0034683738,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -<mask>;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2811,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,946,29819,29819,IdentifierMutator-Literal,1,5,3,3.8230472E-4,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -<mask>;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2812,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,946,29819,29819,IdentifierMutator-Literal,1,3,4,2.8595643E-4,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -<mask>;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;"
2813,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,951,29917,29917,AssignmentMutator,pos=startPos+width,*,0,0.32441947,pos <mask>= startPos + width,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos<mask>= startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos"
2814,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,951,29917,29917,AssignmentMutator,pos=startPos+width,/,1,0.11138994,pos <mask>= startPos + width,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos<mask>= startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos"
2815,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,951,29917,29917,AssignmentMutator,pos=startPos+width,||,2,0.10180924,pos <mask>= startPos + width,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos<mask>= startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos"
2816,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,951,29917,29917,AssignmentMutator,pos=startPos+width,%,3,0.07046096,pos <mask>= startPos + width,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos<mask>= startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos"
2817,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,951,29917,29917,AssignmentMutator,pos=startPos+width,|,4,0.05720165,pos <mask>= startPos + width,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos<mask>= startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos"
2818,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,951,29914,29916,IdentifierMutator-Variable,pos,position,2,7.235852E-4,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width<mask> = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
    }"
2819,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,951,29914,29916,IdentifierMutator-Variable,pos,Pos,3,2.0570694E-4,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width<mask> = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
    }"
2820,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,951,29914,29916,IdentifierMutator-Variable,pos,Pos,4,6.0677037E-5,<mask>,"int findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width<mask> = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
    }"
2821,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,951,29928,29930,BinaryOperatorMutator,+,-,1,0.06428082,startPos <mask> width,"rapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos<mask>width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
  "
2822,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,951,29928,29930,BinaryOperatorMutator,+,+(,3,0.002578339,startPos <mask> width,"rapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos<mask>width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
  "
2823,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,951,29928,29930,BinaryOperatorMutator,+,++,4,0.0014089193,startPos <mask> width,"rapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos<mask>width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
  "
2824,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,951,29920,29927,IdentifierMutator-Variable,startPos,pos,0,0.64589304,<mask>," findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos =<mask> + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
 "
2825,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,951,29920,29927,IdentifierMutator-Variable,startPos,start,1,0.24787857,<mask>," findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos =<mask> + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
 "
2826,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,951,29920,29927,IdentifierMutator-Variable,startPos,0,2,0.02152983,<mask>," findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos =<mask> + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
 "
2827,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,951,29920,29927,IdentifierMutator-Variable,startPos,position,3,0.019729787,<mask>," findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos =<mask> + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
 "
2828,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,951,29920,29927,IdentifierMutator-Variable,startPos,1,4,0.010990384,<mask>," findWrapPos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos =<mask> + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
 "
2829,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,951,29931,29935,IdentifierMutator-Variable,width,1,2,0.0041726097,<mask>,"Pos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos +<mask>;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2830,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,951,29931,29935,IdentifierMutator-Variable,width,w,3,0.0022982568,<mask>,"Pos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos +<mask>;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2831,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,951,29931,29935,IdentifierMutator-Variable,width,Width,4,0.0020454535,<mask>,"Pos(String text, int width, int startPos)
    {
        int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos +<mask>;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2832,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30054,30057,BinaryOperatorMutator,&&,&,2,0.03307903,"(((pos >= startPos) && ((c = text.charAt(pos)) != ' ')) && (c != '\n')) <mask> (c != '\r')","  if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n')<mask>(c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2833,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30054,30057,BinaryOperatorMutator,&&,^,3,0.007796931,"(((pos >= startPos) && ((c = text.charAt(pos)) != ' ')) && (c != '\n')) <mask> (c != '\r')","  if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n')<mask>(c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2834,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30054,30057,BinaryOperatorMutator,&&,&,4,0.0069485107,"(((pos >= startPos) && ((c = text.charAt(pos)) != ' ')) && (c != '\n')) <mask> (c != '\r')","  if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n')<mask>(c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2835,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,30023,30042,BinaryOperatorMutator,&&,&,2,0.007099012,"((pos >= startPos) && ((c = text.charAt(pos)) != ' ')) <mask> (c != '\n')","   // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')<mask>(c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
    }"
2836,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,30023,30042,BinaryOperatorMutator,&&,&,3,0.007047248,"((pos >= startPos) && ((c = text.charAt(pos)) != ' ')) <mask> (c != '\n')","   // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')<mask>(c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
    }"
2837,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,30023,30042,BinaryOperatorMutator,&&,||,4,0.0069613596,"((pos >= startPos) && ((c = text.charAt(pos)) != ' ')) <mask> (c != '\n')","   // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')<mask>(c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
    }"
2838,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29988,29991,BinaryOperatorMutator,&&,&,1,0.14352813,"(pos >= startPos) <mask> ((c = text.charAt(pos)) != ' ')","
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos)<mask>((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2839,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29988,29991,BinaryOperatorMutator,&&,|,3,0.010733479,"(pos >= startPos) <mask> ((c = text.charAt(pos)) != ' ')","
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos)<mask>((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2840,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29988,29991,BinaryOperatorMutator,&&,||,4,0.009667443,"(pos >= startPos) <mask> ((c = text.charAt(pos)) != ' ')","
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos)<mask>((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2841,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29975,29978,BinaryOperatorMutator,>=,>,0,0.5972378,pos <mask> startPos,"  int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos<mask>startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2842,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29975,29978,BinaryOperatorMutator,>=,<,1,0.14212535,pos <mask> startPos,"  int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos<mask>startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2843,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29975,29978,BinaryOperatorMutator,>=,>,2,0.08334125,pos <mask> startPos,"  int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos<mask>startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2844,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29975,29978,BinaryOperatorMutator,>=,<=,4,0.034559257,pos <mask> startPos,"  int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos<mask>startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2845,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29972,29974,IdentifierMutator-Variable,pos,position,1,0.0033793405,<mask>,"   int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((<mask> >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2846,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29972,29974,IdentifierMutator-Variable,pos,Pos,3,2.14751E-4,<mask>,"   int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((<mask> >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2847,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29972,29974,IdentifierMutator-Variable,pos,size,4,1.1271442E-4,<mask>,"   int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((<mask> >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2848,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29979,29986,IdentifierMutator-Variable,startPos,0,0,0.98750544,<mask>," int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >=<mask>) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2849,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29979,29986,IdentifierMutator-Variable,startPos,width,1,0.0035435953,<mask>," int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >=<mask>) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2850,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29979,29986,IdentifierMutator-Variable,startPos,start,2,0.0026616445,<mask>," int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >=<mask>) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2851,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29979,29986,IdentifierMutator-Variable,startPos,1,3,0.0014253089,<mask>," int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >=<mask>) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2852,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29979,29986,IdentifierMutator-Variable,startPos,0,4,4.256609E-4,<mask>," int pos;
        
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >=<mask>) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2853,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,30015,30018,BinaryOperatorMutator,!=,==,0,0.84194535,"(c = text.charAt(pos)) <mask> ' '","       // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos))<mask>' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2854,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,30015,30018,BinaryOperatorMutator,!=,>,2,0.023040816,"(c = text.charAt(pos)) <mask> ' '","       // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos))<mask>' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2855,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,30015,30018,BinaryOperatorMutator,!=,<,3,0.015696926,"(c = text.charAt(pos)) <mask> ' '","       // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos))<mask>' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2856,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,30015,30018,BinaryOperatorMutator,!=,==,4,0.004917777,"(c = text.charAt(pos)) <mask> ' '","       // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos))<mask>' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2857,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29995,29995,AssignmentMutator,(c=text.charAt(pos)),|,0,0.40953186,c <mask>= text.charAt(pos),"      
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c<mask>= text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2858,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29995,29995,AssignmentMutator,(c=text.charAt(pos)),>>>,1,0.061625555,c <mask>= text.charAt(pos),"      
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c<mask>= text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2859,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29995,29995,AssignmentMutator,(c=text.charAt(pos)),^,2,0.05870714,c <mask>= text.charAt(pos),"      
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c<mask>= text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2860,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29995,29995,AssignmentMutator,(c=text.charAt(pos)),!,3,0.057557147,c <mask>= text.charAt(pos),"      
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c<mask>= text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2861,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29995,29995,AssignmentMutator,(c=text.charAt(pos)),|,4,0.053000465,c <mask>= text.charAt(pos),"      
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c<mask>= text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2862,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29994,29994,IdentifierMutator-Variable,c,C,2,5.7891342E-5,<mask>,"       
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((<mask> = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2863,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29994,29994,IdentifierMutator-Variable,c,ct,3,3.5909372E-5,<mask>,"       
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((<mask> = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2864,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29994,29994,IdentifierMutator-Variable,c,cc,4,1.8363324E-5,<mask>,"       
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((<mask> = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2865,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,30003,30008,MethodCallMutator,charAt,get,0,0.34674114,text.<mask>(pos),"   
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.<mask>(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2866,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,30003,30008,MethodCallMutator,charAt,At,1,0.19181947,text.<mask>(pos),"   
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.<mask>(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2867,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,30003,30008,MethodCallMutator,charAt,char,2,0.13397008,text.<mask>(pos),"   
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.<mask>(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2868,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,30003,30008,MethodCallMutator,charAt,item,3,0.1034086,text.<mask>(pos),"   
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.<mask>(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2869,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,30003,30008,MethodCallMutator,charAt,at,4,0.10141682,text.<mask>(pos),"   
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.<mask>(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2870,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29998,30001,IdentifierMutator-Variable,text,string,1,4.3058768E-4,<mask>,"     
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c =<mask>.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2871,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29998,30001,IdentifierMutator-Variable,text,line,2,3.700834E-4,<mask>,"     
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c =<mask>.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2872,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29998,30001,IdentifierMutator-Variable,text,input,3,3.6296478E-4,<mask>,"     
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c =<mask>.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2873,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,29998,30001,IdentifierMutator-Variable,text,word,4,2.736175E-4,<mask>,"     
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c =<mask>.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2874,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,30010,30012,IdentifierMutator-Variable,pos,0,2,7.354798E-5,<mask>,"
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(<mask>)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2875,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,30010,30012,IdentifierMutator-Variable,pos,position,3,7.210204E-5,<mask>,"
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(<mask>)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2876,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,30010,30012,IdentifierMutator-Variable,pos,Pos,4,4.374328E-5,<mask>,"
        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(<mask>)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2877,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,30019,30021,IdentifierMutator-Literal,"''",c,0,0.2565259,<mask>,"      // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) !=<mask>)
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2878,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,30019,30021,IdentifierMutator-Literal,"''",null,1,0.116869815,<mask>,"      // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) !=<mask>)
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2879,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,30019,30021,IdentifierMutator-Literal,"''","'",3,0.05126072,<mask>,"      // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) !=<mask>)
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2880,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,955,30019,30021,IdentifierMutator-Literal,"''",0,4,0.050574835,<mask>,"      // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) !=<mask>)
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2881,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30045,30048,BinaryOperatorMutator,!=,==,1,0.0010276296,"c <mask> '\n'","       if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c<mask>'\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2882,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30045,30048,BinaryOperatorMutator,!=,==,2,4.592698E-4,"c <mask> '\n'","       if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c<mask>'\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2883,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30045,30048,BinaryOperatorMutator,!=,>,3,4.018209E-5,"c <mask> '\n'","       if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c<mask>'\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2884,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30045,30048,BinaryOperatorMutator,!=,>=,4,2.5244932E-5,"c <mask> '\n'","       if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c<mask>'\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2885,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30044,30044,IdentifierMutator-Variable,c,f,2,5.0658505E-6,<mask>,"        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (<mask> != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2886,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30044,30044,IdentifierMutator-Variable,c,b,3,4.7977787E-6,<mask>,"        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (<mask> != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2887,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30044,30044,IdentifierMutator-Variable,c,C,4,2.7157519E-6,<mask>,"        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (<mask> != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2888,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30049,30052,IdentifierMutator-Literal,"'\n'",CR,0,0.18186791,<mask>,"      if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c !=<mask>) && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2889,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30049,30052,IdentifierMutator-Literal,"'\n'","'",1,0.082078174,<mask>,"      if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c !=<mask>) && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2890,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30049,30052,IdentifierMutator-Literal,"'\n'","''",2,0.060402967,<mask>,"      if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c !=<mask>) && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2891,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30049,30052,IdentifierMutator-Literal,"'\n'",c,3,0.059443712,<mask>,"      if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c !=<mask>) && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2892,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30049,30052,IdentifierMutator-Literal,"'\n'",ch,4,0.05847353,<mask>,"      if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c !=<mask>) && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2893,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30060,30063,BinaryOperatorMutator,!=,==,1,0.0139684975,"c <mask> '\r'","(pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c<mask>'\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2894,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30060,30063,BinaryOperatorMutator,!=,=,2,0.001303828,"c <mask> '\r'","(pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c<mask>'\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2895,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30060,30063,BinaryOperatorMutator,!=,==,3,7.2442426E-4,"c <mask> '\r'","(pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c<mask>'\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2896,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30060,30063,BinaryOperatorMutator,!=,nt,4,7.060669E-4,"c <mask> '\r'","(pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c<mask>'\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2897,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30059,30059,IdentifierMutator-Variable,c,f,2,5.233798E-6,<mask>," (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (<mask> != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2898,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30059,30059,IdentifierMutator-Variable,c,b,3,4.919306E-6,<mask>," (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (<mask> != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2899,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30059,30059,IdentifierMutator-Variable,c,C,4,4.183913E-6,<mask>," (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (<mask> != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2900,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30064,30067,IdentifierMutator-Literal,"'\r'","'",0,0.16949648,<mask>,"pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c !=<mask>))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2901,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30064,30067,IdentifierMutator-Literal,"'\r'",tab,1,0.112963386,<mask>,"pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c !=<mask>))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2902,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30064,30067,IdentifierMutator-Literal,"'\r'",CR,2,0.076331995,<mask>,"pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c !=<mask>))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2903,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30064,30067,IdentifierMutator-Literal,"'\r'","''",3,0.0697248,<mask>,"pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c !=<mask>))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2904,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,956,30064,30067,IdentifierMutator-Literal,"'\r'",ch,4,0.0499223,<mask>,"pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c !=<mask>))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2905,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,958,30093,30094,UnaryOperatorMutator,--,++,1,0.29382923,<mask>pos," -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {<mask>pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
    }"
2906,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,958,30093,30094,UnaryOperatorMutator,--,++,2,0.038313255,<mask>pos," -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {<mask>pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
    }"
2907,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,958,30093,30094,UnaryOperatorMutator,--,return,4,0.025690189,<mask>pos," -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {<mask>pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
    }"
2908,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,958,30095,30097,IdentifierMutator-Variable,pos,c,2,0.0025943515,<mask>,"           || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --<mask>;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2909,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,958,30095,30097,IdentifierMutator-Variable,pos,position,3,5.816067E-4,<mask>,"           || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --<mask>;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2910,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,958,30095,30097,IdentifierMutator-Variable,pos,c,4,5.660101E-4,<mask>,"           || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --<mask>;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2911,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,962,30166,30168,BinaryOperatorMutator,>,==,0,0.50670993,pos <mask> startPos,"    {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos<mask>startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2912,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,962,30166,30168,BinaryOperatorMutator,>,<,1,0.12915023,pos <mask> startPos,"    {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos<mask>startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2913,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,962,30166,30168,BinaryOperatorMutator,>,==,3,0.060609475,pos <mask> startPos,"    {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos<mask>startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2914,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,962,30163,30165,IdentifierMutator-Variable,pos,position,1,0.0014403269,<mask>,"     {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (<mask> > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2915,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,962,30163,30165,IdentifierMutator-Variable,pos,Pos,3,1.5161865E-4,<mask>,"     {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (<mask> > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2916,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,962,30163,30165,IdentifierMutator-Variable,pos,offset,4,8.572158E-5,<mask>,"     {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (<mask> > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2917,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,962,30169,30176,IdentifierMutator-Variable,startPos,0,0,0.7691981,<mask>,"   {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos ><mask>)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2918,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,962,30169,30176,IdentifierMutator-Variable,startPos,start,1,0.03912846,<mask>,"   {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos ><mask>)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2919,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,962,30169,30176,IdentifierMutator-Variable,startPos,pos,2,0.022325618,<mask>,"   {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos ><mask>)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2920,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,962,30169,30176,IdentifierMutator-Variable,startPos,limit,3,0.01840179,<mask>,"   {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos ><mask>)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2921,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,962,30169,30176,IdentifierMutator-Variable,startPos,end,4,0.013396285,<mask>,"   {
            return pos + 1;
        }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos ><mask>)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2922,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,964,30208,30210,IdentifierMutator-Variable,pos,0,1,0.090349935,<mask>,"    }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return<mask>;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2923,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,964,30208,30210,IdentifierMutator-Variable,pos,1,2,0.03082483,<mask>,"    }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return<mask>;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2924,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,964,30208,30210,IdentifierMutator-Variable,pos,position,3,0.009410811,<mask>,"    }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return<mask>;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2925,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,964,30208,30210,IdentifierMutator-Variable,pos,c,4,0.0076570734,<mask>,"    }
        else if (startPos + width >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return<mask>;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2926,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,968,30307,30307,AssignmentMutator,pos=startPos+width,*,0,0.38276425,pos <mask>= startPos + width,"      }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos<mask>= startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2927,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,968,30307,30307,AssignmentMutator,pos=startPos+width,%,1,0.118629575,pos <mask>= startPos + width,"      }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos<mask>= startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2928,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,968,30307,30307,AssignmentMutator,pos=startPos+width,/,2,0.07645727,pos <mask>= startPos + width,"      }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos<mask>= startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2929,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,968,30307,30307,AssignmentMutator,pos=startPos+width,||,3,0.053120907,pos <mask>= startPos + width,"      }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos<mask>= startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2930,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,968,30307,30307,AssignmentMutator,pos=startPos+width,>>>,4,0.047328427,pos <mask>= startPos + width,"      }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos<mask>= startPos + width;
        
        return pos == text.length() ? -1 : pos;
   "
2931,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,968,30304,30306,IdentifierMutator-Variable,pos,position,2,8.4366556E-4,<mask>,"   return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width<mask> = startPos + width;
        
        return pos == text.length() ? -1 : pos;
    }"
2932,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,968,30304,30306,IdentifierMutator-Variable,pos,Pos,3,1.4148958E-4,<mask>,"   return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width<mask> = startPos + width;
        
        return pos == text.length() ? -1 : pos;
    }"
2933,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,968,30304,30306,IdentifierMutator-Variable,pos,index,4,9.8390185E-5,<mask>,"   return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width<mask> = startPos + width;
        
        return pos == text.length() ? -1 : pos;
    }"
2934,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,968,30318,30320,BinaryOperatorMutator,+,-,1,0.04674135,startPos <mask> width,"   }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos<mask>width;
        
        return pos == text.length() ? -1 : pos;
   "
2935,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,968,30318,30320,BinaryOperatorMutator,+,++,3,0.0020461257,startPos <mask> width,"   }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos<mask>width;
        
        return pos == text.length() ? -1 : pos;
   "
2936,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,968,30318,30320,BinaryOperatorMutator,+,-,4,5.452909E-4,startPos <mask> width,"   }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos<mask>width;
        
        return pos == text.length() ? -1 : pos;
   "
2937,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,968,30310,30317,IdentifierMutator-Variable,startPos,pos,0,0.9218902,<mask>,"     }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos =<mask> + width;
        
        return pos == text.length() ? -1 : pos;
   "
2938,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,968,30310,30317,IdentifierMutator-Variable,startPos,start,1,0.042577915,<mask>,"     }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos =<mask> + width;
        
        return pos == text.length() ? -1 : pos;
   "
2939,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,968,30310,30317,IdentifierMutator-Variable,startPos,position,2,0.00455735,<mask>,"     }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos =<mask> + width;
        
        return pos == text.length() ? -1 : pos;
   "
2940,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,968,30310,30317,IdentifierMutator-Variable,startPos,0,3,0.003714932,<mask>,"     }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos =<mask> + width;
        
        return pos == text.length() ? -1 : pos;
   "
2941,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,968,30310,30317,IdentifierMutator-Variable,startPos,end,4,0.0014866496,<mask>,"     }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos =<mask> + width;
        
        return pos == text.length() ? -1 : pos;
   "
2942,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,968,30321,30325,IdentifierMutator-Variable,width,height,1,0.0032503433,<mask>,"  }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos +<mask>;
        
        return pos == text.length() ? -1 : pos;
   "
2943,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,968,30321,30325,IdentifierMutator-Variable,width,w,2,0.0015608113,<mask>,"  }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos +<mask>;
        
        return pos == text.length() ? -1 : pos;
   "
2944,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,968,30321,30325,IdentifierMutator-Variable,width,1,3,0.0013554022,<mask>,"  }


        // look for the last whitespace character before startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos +<mask>;
        
        return pos == text.length() ? -1 : pos;
   "
2945,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30352,30382,IdentifierMutator-Conditional,pos==text.length()?-1:pos,pos,0,0.93882376,<mask>," startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return<mask>;
    }"
2946,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30352,30382,IdentifierMutator-Conditional,pos==text.length()?-1:pos,0,1,0.020320544,<mask>," startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return<mask>;
    }"
2947,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30352,30382,IdentifierMutator-Conditional,pos==text.length()?-1:pos,position,2,0.0045940704,<mask>," startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return<mask>;
    }"
2948,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30352,30382,IdentifierMutator-Conditional,pos==text.length()?-1:pos,null,3,0.004238634,<mask>," startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return<mask>;
    }"
2949,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30352,30382,IdentifierMutator-Conditional,pos==text.length()?-1:pos,false,4,0.00339478,<mask>," startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return<mask>;
    }"
2950,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30355,30358,BinaryOperatorMutator,==,>=,0,0.74090344,pos <mask> text.length(),"Pos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos<mask>text.length() ? -1 : pos;
   "
2951,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30355,30358,BinaryOperatorMutator,==,>,1,0.10645587,pos <mask> text.length(),"Pos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos<mask>text.length() ? -1 : pos;
   "
2952,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30355,30358,BinaryOperatorMutator,==,<,4,0.016121158,pos <mask> text.length(),"Pos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos<mask>text.length() ? -1 : pos;
   "
2953,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30352,30354,IdentifierMutator-Variable,pos,position,1,7.349373E-4,<mask>," startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return<mask> == text.length() ? -1 : pos;
   "
2954,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30352,30354,IdentifierMutator-Variable,pos,0,2,6.781132E-4,<mask>," startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return<mask> == text.length() ? -1 : pos;
   "
2955,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30352,30354,IdentifierMutator-Variable,pos,index,4,4.998796E-4,<mask>," startPos+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return<mask> == text.length() ? -1 : pos;
   "
2956,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30364,30369,MethodCallMutator,length,size,1,9.312954E-4,text.<mask>(),"
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.<mask>() ? -1 : pos;
   "
2957,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30364,30369,MethodCallMutator,length,limit,2,4.9745594E-4,text.<mask>(),"
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.<mask>() ? -1 : pos;
   "
2958,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30364,30369,MethodCallMutator,length,width,3,3.0076734E-4,text.<mask>(),"
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.<mask>() ? -1 : pos;
   "
2959,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30364,30369,MethodCallMutator,length,space,4,2.9663404E-4,text.<mask>(),"
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.<mask>() ? -1 : pos;
   "
2960,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30359,30362,IdentifierMutator-Variable,text,input,1,6.029475E-4,<mask>,"+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos ==<mask>.length() ? -1 : pos;
   "
2961,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30359,30362,IdentifierMutator-Variable,text,source,2,5.370183E-4,<mask>,"+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos ==<mask>.length() ? -1 : pos;
   "
2962,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30359,30362,IdentifierMutator-Variable,text,string,3,4.9019145E-4,<mask>,"+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos ==<mask>.length() ? -1 : pos;
   "
2963,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30359,30362,IdentifierMutator-Variable,text,buffer,4,3.4277842E-4,<mask>,"+width
        pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos ==<mask>.length() ? -1 : pos;
   "
2964,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30375,30375,UnaryOperatorMutator,-,+,1,0.0045287334,<mask>1,"      pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ?<mask>1 : pos;
   "
2965,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30375,30375,UnaryOperatorMutator,-,$,2,0.0014169267,<mask>1,"      pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ?<mask>1 : pos;
   "
2966,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30375,30375,UnaryOperatorMutator,-,pos,4,4.0832092E-4,<mask>1,"      pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ?<mask>1 : pos;
   "
2967,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30376,30376,IdentifierMutator-Literal,1,2,2,0.0048323525,<mask>,"     pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -<mask> : pos;
   "
2968,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30376,30376,IdentifierMutator-Literal,1,pos,3,9.991971E-4,<mask>,"     pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -<mask> : pos;
   "
2969,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30376,30376,IdentifierMutator-Literal,1,5,4,4.6686325E-4,<mask>,"     pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -<mask> : pos;
   "
2970,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30380,30382,IdentifierMutator-Variable,pos,0,1,0.005016774,<mask>,"   pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 :<mask>;
   "
2971,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30380,30382,IdentifierMutator-Variable,pos,1,3,0.0015963442,<mask>,"   pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 :<mask>;
   "
2972,HelpFormatter.java,findWrapPos,"int findWrapPos(String text, int width, int startPos)",934,970,30380,30382,IdentifierMutator-Variable,pos,position,4,0.0014129141,<mask>,"   pos = startPos + width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // if we didn't find one, simply chop at startPos+width
        pos = startPos + width;
        
        return pos == text.length() ? -1 :<mask>;
   "
2973,HelpFormatter.java,createPadding,String createPadding(int len),980,982,30670,30672,IdentifierMutator-Variable,len,Len,1,0.028647186,<mask>,"String createPadding(int len)
    {
        char[] padding = new char[<mask>];
        Arrays.fill(padding, ' ');
        
        return new String(padding);
    }"
2974,HelpFormatter.java,createPadding,String createPadding(int len),980,982,30670,30672,IdentifierMutator-Variable,len,ln,3,5.642028E-4,<mask>,"String createPadding(int len)
    {
        char[] padding = new char[<mask>];
        Arrays.fill(padding, ' ');
        
        return new String(padding);
    }"
2975,HelpFormatter.java,createPadding,String createPadding(int len),980,982,30670,30672,IdentifierMutator-Variable,len,l,4,4.9321615E-4,<mask>,"String createPadding(int len)
    {
        char[] padding = new char[<mask>];
        Arrays.fill(padding, ' ');
        
        return new String(padding);
    }"
2976,HelpFormatter.java,createPadding,String createPadding(int len),980,983,30691,30694,MethodCallMutator,fill,push,0,0.3094678,"Arrays.<mask>(padding, ' ')","String createPadding(int len)
    {
        char[] padding = new char[len];
        Arrays.<mask>(padding, ' ');
        
        return new String(padding);
    }"
2977,HelpFormatter.java,createPadding,String createPadding(int len),980,983,30691,30694,MethodCallMutator,fill,append,2,0.18910605,"Arrays.<mask>(padding, ' ')","String createPadding(int len)
    {
        char[] padding = new char[len];
        Arrays.<mask>(padding, ' ');
        
        return new String(padding);
    }"
2978,HelpFormatter.java,createPadding,String createPadding(int len),980,983,30691,30694,MethodCallMutator,fill,add,3,0.13861074,"Arrays.<mask>(padding, ' ')","String createPadding(int len)
    {
        char[] padding = new char[len];
        Arrays.<mask>(padding, ' ');
        
        return new String(padding);
    }"
2979,HelpFormatter.java,createPadding,String createPadding(int len),980,983,30696,30702,IdentifierMutator-Variable,padding,pad,1,9.364461E-4,<mask>,"String createPadding(int len)
    {
        char[] padding = new char[len];
        Arrays.fill(<mask>, ' ');
        
        return new String(padding);
    }"
2980,HelpFormatter.java,createPadding,String createPadding(int len),980,983,30696,30702,IdentifierMutator-Variable,padding,adding,2,6.8902253E-4,<mask>,"String createPadding(int len)
    {
        char[] padding = new char[len];
        Arrays.fill(<mask>, ' ');
        
        return new String(padding);
    }"
2981,HelpFormatter.java,createPadding,String createPadding(int len),980,983,30696,30702,IdentifierMutator-Variable,padding,margin,4,1.3394016E-5,<mask>,"String createPadding(int len)
    {
        char[] padding = new char[len];
        Arrays.fill(<mask>, ' ');
        
        return new String(padding);
    }"
2982,HelpFormatter.java,createPadding,String createPadding(int len),980,983,30705,30707,IdentifierMutator-Literal,"''",0,0,0.40401432,<mask>,"String createPadding(int len)
    {
        char[] padding = new char[len];
        Arrays.fill(padding,<mask>);
        
        return new String(padding);
    }"
2983,HelpFormatter.java,createPadding,String createPadding(int len),980,983,30705,30707,IdentifierMutator-Literal,"''",padding,2,0.10702731,<mask>,"String createPadding(int len)
    {
        char[] padding = new char[len];
        Arrays.fill(padding,<mask>);
        
        return new String(padding);
    }"
2984,HelpFormatter.java,createPadding,String createPadding(int len),980,983,30705,30707,IdentifierMutator-Literal,"''","""""",3,0.088871196,<mask>,"String createPadding(int len)
    {
        char[] padding = new char[len];
        Arrays.fill(padding,<mask>);
        
        return new String(padding);
    }"
2985,HelpFormatter.java,createPadding,String createPadding(int len),980,983,30705,30707,IdentifierMutator-Literal,"''",pad,4,0.02106472,<mask>,"String createPadding(int len)
    {
        char[] padding = new char[len];
        Arrays.fill(padding,<mask>);
        
        return new String(padding);
    }"
2986,HelpFormatter.java,createPadding,String createPadding(int len),980,985,30746,30752,IdentifierMutator-Variable,padding,pad,1,2.9239943E-4,<mask>,"String createPadding(int len)
    {
        char[] padding = new char[len];
        Arrays.fill(padding, ' ');
        
        return new String(<mask>);
    }"
2987,HelpFormatter.java,createPadding,String createPadding(int len),980,985,30746,30752,IdentifierMutator-Variable,padding,adding,2,5.812171E-5,<mask>,"String createPadding(int len)
    {
        char[] padding = new char[len];
        Arrays.fill(padding, ' ');
        
        return new String(<mask>);
    }"
2988,HelpFormatter.java,createPadding,String createPadding(int len),980,985,30746,30752,IdentifierMutator-Variable,padding,password,3,3.0092817E-5,<mask>,"String createPadding(int len)
    {
        char[] padding = new char[len];
        Arrays.fill(padding, ' ');
        
        return new String(<mask>);
    }"
2989,HelpFormatter.java,createPadding,String createPadding(int len),980,985,30746,30752,IdentifierMutator-Variable,padding,prefix,4,2.3564775E-5,<mask>,"String createPadding(int len)
    {
        char[] padding = new char[len];
        Arrays.fill(padding, ' ');
        
        return new String(<mask>);
    }"
2990,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31046,31049,BinaryOperatorMutator,||,|,2,0.0011713285,(s == null) <mask> (s.length() == 0),"String rtrim(String s)
    {
        if ((s == null)<mask>(s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
2991,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31046,31049,BinaryOperatorMutator,||,or,3,7.910872E-4,(s == null) <mask> (s.length() == 0),"String rtrim(String s)
    {
        if ((s == null)<mask>(s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
2992,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31046,31049,BinaryOperatorMutator,||,&&,4,7.4266596E-4,(s == null) <mask> (s.length() == 0),"String rtrim(String s)
    {
        if ((s == null)<mask>(s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
2993,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31037,31040,BinaryOperatorMutator,==,=,2,0.08492043,s <mask> null,"String rtrim(String s)
    {
        if ((s<mask>null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
2994,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31037,31040,BinaryOperatorMutator,==,===,3,0.002056297,s <mask> null,"String rtrim(String s)
    {
        if ((s<mask>null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
2995,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31037,31040,BinaryOperatorMutator,==,!=,4,0.0018432912,s <mask> null,"String rtrim(String s)
    {
        if ((s<mask>null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
2996,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31036,31036,IdentifierMutator-Variable,s,null,1,3.742572E-4,<mask>,"String rtrim(String s)
    {
        if ((<mask> == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
2997,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31036,31036,IdentifierMutator-Variable,s,string,3,2.6427757E-4,<mask>,"String rtrim(String s)
    {
        if ((<mask> == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
2998,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31036,31036,IdentifierMutator-Variable,s,ss,4,2.3402153E-4,<mask>,"String rtrim(String s)
    {
        if ((<mask> == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
2999,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31041,31044,IdentifierMutator-Literal,null,s,1,0.005296012,<mask>,"String rtrim(String s)
    {
        if ((s ==<mask>) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3000,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31041,31044,IdentifierMutator-Literal,null,this,2,5.541243E-4,<mask>,"String rtrim(String s)
    {
        if ((s ==<mask>) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3001,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31041,31044,IdentifierMutator-Literal,null,"""""",3,4.1905913E-4,<mask>,"String rtrim(String s)
    {
        if ((s ==<mask>) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3002,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31041,31044,IdentifierMutator-Literal,null,NULL,4,4.0666256E-4,<mask>,"String rtrim(String s)
    {
        if ((s ==<mask>) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3003,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31061,31064,BinaryOperatorMutator,==,>,2,0.17253162,s.length() <mask> 0,"String rtrim(String s)
    {
        if ((s == null) || (s.length()<mask>0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3004,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31061,31064,BinaryOperatorMutator,==,=,3,0.019891541,s.length() <mask> 0,"String rtrim(String s)
    {
        if ((s == null) || (s.length()<mask>0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3005,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31061,31064,BinaryOperatorMutator,==,<,4,0.018889952,s.length() <mask> 0,"String rtrim(String s)
    {
        if ((s == null) || (s.length()<mask>0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3006,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31053,31058,MethodCallMutator,length,width,2,6.1119325E-5,s.<mask>(),"String rtrim(String s)
    {
        if ((s == null) || (s.<mask>() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3007,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31053,31058,MethodCallMutator,length,len,3,9.726661E-6,s.<mask>(),"String rtrim(String s)
    {
        if ((s == null) || (s.<mask>() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3008,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31053,31058,MethodCallMutator,length,Length,4,8.485865E-6,s.<mask>(),"String rtrim(String s)
    {
        if ((s == null) || (s.<mask>() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3009,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31051,31051,IdentifierMutator-Variable,s,ss,2,1.2286523E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (<mask>.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3010,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31051,31051,IdentifierMutator-Variable,s,string,3,1.0369681E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (<mask>.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3011,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31051,31051,IdentifierMutator-Variable,s,S,4,4.7885515E-5,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (<mask>.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3012,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31065,31065,IdentifierMutator-Literal,0,1,1,0.0015216483,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() ==<mask>))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3013,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31065,31065,IdentifierMutator-Literal,0,"""""",2,3.4087987E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() ==<mask>))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3014,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31065,31065,IdentifierMutator-Literal,0,null,3,7.090653E-5,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() ==<mask>))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3015,HelpFormatter.java,rtrim,String rtrim(String s),995,997,31065,31065,IdentifierMutator-Literal,0,pos,4,6.391439E-5,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() ==<mask>))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3016,HelpFormatter.java,rtrim,String rtrim(String s),995,999,31098,31098,IdentifierMutator-Variable,s,null,1,0.08701731,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return<mask>;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3017,HelpFormatter.java,rtrim,String rtrim(String s),995,999,31098,31098,IdentifierMutator-Variable,s,"""""",2,0.042917755,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return<mask>;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3018,HelpFormatter.java,rtrim,String rtrim(String s),995,999,31098,31098,IdentifierMutator-Variable,s,"''",3,0.010244967,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return<mask>;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3019,HelpFormatter.java,rtrim,String rtrim(String s),995,999,31098,31098,IdentifierMutator-Variable,s,undefined,4,0.00196159,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return<mask>;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3020,HelpFormatter.java,rtrim,String rtrim(String s),995,1002,31132,31137,MethodCallMutator,length,position,1,0.015556742,s.<mask>(),"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.<mask>();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3021,HelpFormatter.java,rtrim,String rtrim(String s),995,1002,31132,31137,MethodCallMutator,length,pos,2,8.6529483E-4,s.<mask>(),"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.<mask>();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3022,HelpFormatter.java,rtrim,String rtrim(String s),995,1002,31132,31137,MethodCallMutator,length,index,3,2.3901615E-4,s.<mask>(),"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.<mask>();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3023,HelpFormatter.java,rtrim,String rtrim(String s),995,1002,31130,31130,IdentifierMutator-Variable,s,string,2,6.5287045E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos =<mask>.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3024,HelpFormatter.java,rtrim,String rtrim(String s),995,1002,31130,31130,IdentifierMutator-Variable,s,str,3,6.189718E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos =<mask>.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3025,HelpFormatter.java,rtrim,String rtrim(String s),995,1002,31130,31130,IdentifierMutator-Variable,s,c,4,3.8807036E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos =<mask>.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3026,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31167,31170,BinaryOperatorMutator,&&,&,2,0.011761541,(pos > 0) <mask> java.lang.Character.isWhitespace(s.charAt(pos - 1)),"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0)<mask>Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3027,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31167,31170,BinaryOperatorMutator,&&,||,3,0.004382703,(pos > 0) <mask> java.lang.Character.isWhitespace(s.charAt(pos - 1)),"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0)<mask>Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3028,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31167,31170,BinaryOperatorMutator,&&,||,4,0.0028232164,(pos > 0) <mask> java.lang.Character.isWhitespace(s.charAt(pos - 1)),"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0)<mask>Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3029,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31162,31164,BinaryOperatorMutator,>,>=,2,0.02771392,pos <mask> 0,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos<mask>0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3030,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31162,31164,BinaryOperatorMutator,>,!=,3,0.010947315,pos <mask> 0,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos<mask>0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3031,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31162,31164,BinaryOperatorMutator,>,==,4,0.009112693,pos <mask> 0,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos<mask>0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3032,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31159,31161,IdentifierMutator-Variable,pos,position,2,2.9559262E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((<mask> > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3033,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31159,31161,IdentifierMutator-Variable,pos,Pos,3,2.9088333E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((<mask> > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3034,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31159,31161,IdentifierMutator-Variable,pos,len,4,1.4061747E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((<mask> > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3035,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31165,31165,IdentifierMutator-Literal,0,1,1,0.17072006,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos ><mask>) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3036,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31165,31165,IdentifierMutator-Literal,0,2,2,0.00326373,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos ><mask>) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3037,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31165,31165,IdentifierMutator-Literal,0,pos,3,6.7872065E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos ><mask>) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3038,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31165,31165,IdentifierMutator-Literal,0,3,4,4.911399E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos ><mask>) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3039,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31181,31192,MethodCallMutator,isWhitespace,is,0,0.18087922,Character.<mask>(s.charAt(pos - 1)),"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.<mask>(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3040,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31181,31192,MethodCallMutator,isWhitespace,alpha,1,0.17339928,Character.<mask>(s.charAt(pos - 1)),"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.<mask>(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3041,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31181,31192,MethodCallMutator,isWhitespace,print,2,0.16463022,Character.<mask>(s.charAt(pos - 1)),"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.<mask>(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3042,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31181,31192,MethodCallMutator,isWhitespace,digit,3,0.15783489,Character.<mask>(s.charAt(pos - 1)),"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.<mask>(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3043,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31181,31192,MethodCallMutator,isWhitespace,space,4,0.103828005,Character.<mask>(s.charAt(pos - 1)),"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.<mask>(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3044,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31196,31201,MethodCallMutator,charAt,slice,0,0.2856049,s.<mask>(pos - 1),"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.<mask>(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3045,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31196,31201,MethodCallMutator,charAt,get,1,0.27995795,s.<mask>(pos - 1),"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.<mask>(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3046,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31196,31201,MethodCallMutator,charAt,char,2,0.078718394,s.<mask>(pos - 1),"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.<mask>(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3047,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31196,31201,MethodCallMutator,charAt,length,3,0.060937203,s.<mask>(pos - 1),"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.<mask>(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3048,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31196,31201,MethodCallMutator,charAt,width,4,0.0585853,s.<mask>(pos - 1),"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.<mask>(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3049,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31194,31194,IdentifierMutator-Variable,s,string,2,8.9182757E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(<mask>.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3050,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31194,31194,IdentifierMutator-Variable,s,p,3,3.685886E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(<mask>.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3051,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31194,31194,IdentifierMutator-Variable,s,ss,4,3.191606E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(<mask>.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3052,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31206,31208,BinaryOperatorMutator,-,=-,1,0.03200743,pos <mask> 1,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos<mask>1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3053,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31206,31208,BinaryOperatorMutator,-,+,2,0.02598877,pos <mask> 1,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos<mask>1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3054,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31206,31208,BinaryOperatorMutator,-,)-,3,0.012078941,pos <mask> 1,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos<mask>1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3055,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31203,31205,IdentifierMutator-Variable,pos,Pos,2,2.415224E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(<mask> - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3056,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31203,31205,IdentifierMutator-Variable,pos,position,3,1.3190789E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(<mask> - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3057,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31203,31205,IdentifierMutator-Variable,pos,i,4,7.378208E-5,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(<mask> - 1)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3058,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31209,31209,IdentifierMutator-Literal,1,2,1,0.013685008,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos -<mask>)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3059,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31209,31209,IdentifierMutator-Literal,1,3,2,0.00152946,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos -<mask>)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3060,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31209,31209,IdentifierMutator-Literal,1,4,3,9.89427E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos -<mask>)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3061,HelpFormatter.java,rtrim,String rtrim(String s),995,1004,31209,31209,IdentifierMutator-Literal,1,pos,4,9.804324E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos -<mask>)))
        {
            --pos;
        }

        return s.substring(0, pos);
    }"
3062,HelpFormatter.java,rtrim,String rtrim(String s),995,1006,31236,31237,UnaryOperatorMutator,--,++,1,0.03262239,<mask>pos,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {<mask>pos;
        }

        return s.substring(0, pos);
    }"
3063,HelpFormatter.java,rtrim,String rtrim(String s),995,1006,31236,31237,UnaryOperatorMutator,--,++,3,0.017506126,<mask>pos,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {<mask>pos;
        }

        return s.substring(0, pos);
    }"
3064,HelpFormatter.java,rtrim,String rtrim(String s),995,1006,31236,31237,UnaryOperatorMutator,--,return,4,2.4107805E-5,<mask>pos,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {<mask>pos;
        }

        return s.substring(0, pos);
    }"
3065,HelpFormatter.java,rtrim,String rtrim(String s),995,1006,31238,31240,IdentifierMutator-Variable,pos,Pos,2,5.777688E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --<mask>;
        }

        return s.substring(0, pos);
    }"
3066,HelpFormatter.java,rtrim,String rtrim(String s),995,1006,31238,31240,IdentifierMutator-Variable,pos,len,3,3.643143E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --<mask>;
        }

        return s.substring(0, pos);
    }"
3067,HelpFormatter.java,rtrim,String rtrim(String s),995,1006,31238,31240,IdentifierMutator-Variable,pos,len,4,2.2368168E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --<mask>;
        }

        return s.substring(0, pos);
    }"
3068,HelpFormatter.java,rtrim,String rtrim(String s),995,1009,31271,31279,MethodCallMutator,substring,ring,0,0.65067,"s.<mask>(0, pos)","String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.<mask>(0, pos);
    }"
3069,HelpFormatter.java,rtrim,String rtrim(String s),995,1009,31271,31279,MethodCallMutator,substring,slice,1,0.16495408,"s.<mask>(0, pos)","String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.<mask>(0, pos);
    }"
3070,HelpFormatter.java,rtrim,String rtrim(String s),995,1009,31271,31279,MethodCallMutator,substring,string,2,0.080233805,"s.<mask>(0, pos)","String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.<mask>(0, pos);
    }"
3071,HelpFormatter.java,rtrim,String rtrim(String s),995,1009,31271,31279,MethodCallMutator,substring,fill,3,0.018883593,"s.<mask>(0, pos)","String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.<mask>(0, pos);
    }"
3072,HelpFormatter.java,rtrim,String rtrim(String s),995,1009,31271,31279,MethodCallMutator,substring,char,4,0.011354099,"s.<mask>(0, pos)","String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.<mask>(0, pos);
    }"
3073,HelpFormatter.java,rtrim,String rtrim(String s),995,1009,31269,31269,IdentifierMutator-Variable,s,string,1,2.3908612E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return<mask>.substring(0, pos);
    }"
3074,HelpFormatter.java,rtrim,String rtrim(String s),995,1009,31269,31269,IdentifierMutator-Variable,s,str,2,2.0683918E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return<mask>.substring(0, pos);
    }"
3075,HelpFormatter.java,rtrim,String rtrim(String s),995,1009,31269,31269,IdentifierMutator-Variable,s,a,3,1.6692109E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return<mask>.substring(0, pos);
    }"
3076,HelpFormatter.java,rtrim,String rtrim(String s),995,1009,31281,31281,IdentifierMutator-Literal,0,1,1,0.1413836,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(<mask>, pos);
    }"
3077,HelpFormatter.java,rtrim,String rtrim(String s),995,1009,31281,31281,IdentifierMutator-Literal,0,start,2,0.016730346,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(<mask>, pos);
    }"
3078,HelpFormatter.java,rtrim,String rtrim(String s),995,1009,31281,31281,IdentifierMutator-Literal,0,2,3,0.004193934,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(<mask>, pos);
    }"
3079,HelpFormatter.java,rtrim,String rtrim(String s),995,1009,31281,31281,IdentifierMutator-Literal,0,pos,4,0.003136735,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(<mask>, pos);
    }"
3080,HelpFormatter.java,rtrim,String rtrim(String s),995,1009,31284,31286,IdentifierMutator-Variable,pos,index,2,0.0013615976,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0,<mask>);
    }"
3081,HelpFormatter.java,rtrim,String rtrim(String s),995,1009,31284,31286,IdentifierMutator-Variable,pos,position,3,7.118314E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0,<mask>);
    }"
3082,HelpFormatter.java,rtrim,String rtrim(String s),995,1009,31284,31286,IdentifierMutator-Variable,pos,len,4,6.7349995E-4,<mask>,"String rtrim(String s)
    {
        if ((s == null) || (s.length() == 0))
        {
            return s;
        }

        int pos = s.length();

        while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
        {
            --pos;
        }

        return s.substring(0,<mask>);
    }"
3083,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1035,32330,32340,IdentifierMutator-Variable,((org.apache.commons.cli.Option)(o1)),o,0,0.40579197,<mask>,"int compare(Object o1, Object o2)
        {
            Option opt1 =<mask>;
            Option opt2 = (Option) o2;

            return opt1.getKey().compareToIgnoreCase(opt2.getKey());
        }"
3084,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1035,32330,32340,IdentifierMutator-Variable,((org.apache.commons.cli.Option)(o1)),this,1,0.35746765,<mask>,"int compare(Object o1, Object o2)
        {
            Option opt1 =<mask>;
            Option opt2 = (Option) o2;

            return opt1.getKey().compareToIgnoreCase(opt2.getKey());
        }"
3085,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1035,32330,32340,IdentifierMutator-Variable,((org.apache.commons.cli.Option)(o1)),null,2,0.10583465,<mask>,"int compare(Object o1, Object o2)
        {
            Option opt1 =<mask>;
            Option opt2 = (Option) o2;

            return opt1.getKey().compareToIgnoreCase(opt2.getKey());
        }"
3086,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1035,32330,32340,IdentifierMutator-Variable,((org.apache.commons.cli.Option)(o1)),{},3,0.0255655,<mask>,"int compare(Object o1, Object o2)
        {
            Option opt1 =<mask>;
            Option opt2 = (Option) o2;

            return opt1.getKey().compareToIgnoreCase(opt2.getKey());
        }"
3087,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1035,32330,32340,IdentifierMutator-Variable,((org.apache.commons.cli.Option)(o1)),1,4,0.018958881,<mask>,"int compare(Object o1, Object o2)
        {
            Option opt1 =<mask>;
            Option opt2 = (Option) o2;

            return opt1.getKey().compareToIgnoreCase(opt2.getKey());
        }"
3088,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1036,32369,32379,IdentifierMutator-Variable,((org.apache.commons.cli.Option)(o2)),o,0,0.37929353,<mask>,"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 =<mask>;

            return opt1.getKey().compareToIgnoreCase(opt2.getKey());
        }"
3089,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1036,32369,32379,IdentifierMutator-Variable,((org.apache.commons.cli.Option)(o2)),this,1,0.22725004,<mask>,"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 =<mask>;

            return opt1.getKey().compareToIgnoreCase(opt2.getKey());
        }"
3090,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1036,32369,32379,IdentifierMutator-Variable,((org.apache.commons.cli.Option)(o2)),null,2,0.08665145,<mask>,"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 =<mask>;

            return opt1.getKey().compareToIgnoreCase(opt2.getKey());
        }"
3091,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1036,32369,32379,IdentifierMutator-Variable,((org.apache.commons.cli.Option)(o2)),{},3,0.053980425,<mask>,"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 =<mask>;

            return opt1.getKey().compareToIgnoreCase(opt2.getKey());
        }"
3092,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1036,32369,32379,IdentifierMutator-Variable,((org.apache.commons.cli.Option)(o2)),2,4,0.04469752,<mask>,"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 =<mask>;

            return opt1.getKey().compareToIgnoreCase(opt2.getKey());
        }"
3093,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32416,32434,MethodCallMutator,compareToIgnoreCase,cmp,0,0.8115072,opt1.getKey().<mask>(opt2.getKey()),"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return opt1.getKey().<mask>(opt2.getKey());
        }"
3094,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32416,32434,MethodCallMutator,compareToIgnoreCase,Compare,1,0.16773634,opt1.getKey().<mask>(opt2.getKey()),"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return opt1.getKey().<mask>(opt2.getKey());
        }"
3095,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32416,32434,MethodCallMutator,compareToIgnoreCase,compare,2,0.0060809753,opt1.getKey().<mask>(opt2.getKey()),"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return opt1.getKey().<mask>(opt2.getKey());
        }"
3096,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32416,32434,MethodCallMutator,compareToIgnoreCase,are,3,0.0031358649,opt1.getKey().<mask>(opt2.getKey()),"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return opt1.getKey().<mask>(opt2.getKey());
        }"
3097,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32416,32434,MethodCallMutator,compareToIgnoreCase,before,4,0.0019142923,opt1.getKey().<mask>(opt2.getKey()),"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return opt1.getKey().<mask>(opt2.getKey());
        }"
3098,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32407,32412,MethodCallMutator,getKey,key,0,0.99152863,opt1.<mask>(),"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return opt1.<mask>().compareToIgnoreCase(opt2.getKey());
        }"
3099,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32407,32412,MethodCallMutator,getKey,Key,1,0.0032578148,opt1.<mask>(),"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return opt1.<mask>().compareToIgnoreCase(opt2.getKey());
        }"
3100,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32407,32412,MethodCallMutator,getKey,name,2,0.001773921,opt1.<mask>(),"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return opt1.<mask>().compareToIgnoreCase(opt2.getKey());
        }"
3101,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32407,32412,MethodCallMutator,getKey,get,3,0.001359298,opt1.<mask>(),"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return opt1.<mask>().compareToIgnoreCase(opt2.getKey());
        }"
3102,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32407,32412,MethodCallMutator,getKey,value,4,7.098841E-4,opt1.<mask>(),"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return opt1.<mask>().compareToIgnoreCase(opt2.getKey());
        }"
3103,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32402,32405,IdentifierMutator-Variable,opt1,opt,0,0.40399477,<mask>,"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return<mask>.getKey().compareToIgnoreCase(opt2.getKey());
        }"
3104,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32402,32405,IdentifierMutator-Variable,opt1,1,1,0.20326418,<mask>,"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return<mask>.getKey().compareToIgnoreCase(opt2.getKey());
        }"
3105,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32402,32405,IdentifierMutator-Variable,opt1,this,2,0.15281445,<mask>,"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return<mask>.getKey().compareToIgnoreCase(opt2.getKey());
        }"
3106,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32402,32405,IdentifierMutator-Variable,opt1,opt,3,0.060199954,<mask>,"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return<mask>.getKey().compareToIgnoreCase(opt2.getKey());
        }"
3107,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32402,32405,IdentifierMutator-Variable,opt1,o,4,0.037821665,<mask>,"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return<mask>.getKey().compareToIgnoreCase(opt2.getKey());
        }"
3108,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32441,32446,MethodCallMutator,getKey,key,0,0.96999335,opt2.<mask>(),"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return opt1.getKey().compareToIgnoreCase(opt2.<mask>());
        }"
3109,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32441,32446,MethodCallMutator,getKey,get,1,0.017582325,opt2.<mask>(),"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return opt1.getKey().compareToIgnoreCase(opt2.<mask>());
        }"
3110,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32441,32446,MethodCallMutator,getKey,value,2,0.003264753,opt2.<mask>(),"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return opt1.getKey().compareToIgnoreCase(opt2.<mask>());
        }"
3111,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32441,32446,MethodCallMutator,getKey,Key,3,0.0030299777,opt2.<mask>(),"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return opt1.getKey().compareToIgnoreCase(opt2.<mask>());
        }"
3112,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32441,32446,MethodCallMutator,getKey,name,4,0.0030149026,opt2.<mask>(),"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return opt1.getKey().compareToIgnoreCase(opt2.<mask>());
        }"
3113,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32436,32439,IdentifierMutator-Variable,opt2,2,0,0.93534625,<mask>,"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return opt1.getKey().compareToIgnoreCase(<mask>.getKey());
        }"
3114,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32436,32439,IdentifierMutator-Variable,opt2,obj,1,0.024219492,<mask>,"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return opt1.getKey().compareToIgnoreCase(<mask>.getKey());
        }"
3115,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32436,32439,IdentifierMutator-Variable,opt2,opt,2,0.018124795,<mask>,"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return opt1.getKey().compareToIgnoreCase(<mask>.getKey());
        }"
3116,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32436,32439,IdentifierMutator-Variable,opt2,other,3,0.0064034653,<mask>,"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return opt1.getKey().compareToIgnoreCase(<mask>.getKey());
        }"
3117,HelpFormatter.java,compare,"int compare(Object o1, Object o2)",1033,1038,32436,32439,IdentifierMutator-Variable,opt2,option,4,0.0034634622,<mask>,"int compare(Object o1, Object o2)
        {
            Option opt1 = (Option) o1;
            Option opt2 = (Option) o2;

            return opt1.getKey().compareToIgnoreCase(<mask>.getKey());
        }"

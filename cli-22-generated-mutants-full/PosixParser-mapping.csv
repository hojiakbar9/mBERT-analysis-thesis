id,classname,method_name,method_sig,method_def_line,mut_location,mut_start,mut_end,mut_operator,orig_token,pred_token,pred_pos,pred_score,masked_expr,masked_seq
0,PosixParser.java,init,void init(),51,53,1731,1731,AssignmentMutator,eatTheRest=false,Of,0,0.10623085,eatTheRest <mask>= false,"void init()
    {
        eatTheRest<mask>= false;
        tokens.clear();
    }"
1,PosixParser.java,init,void init(),51,53,1731,1731,AssignmentMutator,eatTheRest=false,!,1,0.065019414,eatTheRest <mask>= false,"void init()
    {
        eatTheRest<mask>= false;
        tokens.clear();
    }"
2,PosixParser.java,init,void init(),51,53,1731,1731,AssignmentMutator,eatTheRest=false,(),2,0.0537915,eatTheRest <mask>= false,"void init()
    {
        eatTheRest<mask>= false;
        tokens.clear();
    }"
3,PosixParser.java,init,void init(),51,53,1731,1731,AssignmentMutator,eatTheRest=false,,3,0.044906393,eatTheRest <mask>= false,"void init()
    {
        eatTheRest<mask>= false;
        tokens.clear();
    }"
4,PosixParser.java,init,void init(),51,53,1731,1731,AssignmentMutator,eatTheRest=false,Block,4,0.033940956,eatTheRest <mask>= false,"void init()
    {
        eatTheRest<mask>= false;
        tokens.clear();
    }"
5,PosixParser.java,init,void init(),51,53,1721,1730,IdentifierMutator-Variable,eatTheRest,initialized,0,0.55318844,<mask>,"void init()
    {<mask> = false;
        tokens.clear();
    }"
6,PosixParser.java,init,void init(),51,53,1721,1730,IdentifierMutator-Variable,eatTheRest,running,1,0.07660843,<mask>,"void init()
    {<mask> = false;
        tokens.clear();
    }"
7,PosixParser.java,init,void init(),51,53,1721,1730,IdentifierMutator-Variable,eatTheRest,init,2,0.03881623,<mask>,"void init()
    {<mask> = false;
        tokens.clear();
    }"
8,PosixParser.java,init,void init(),51,53,1721,1730,IdentifierMutator-Variable,eatTheRest,active,3,0.021112248,<mask>,"void init()
    {<mask> = false;
        tokens.clear();
    }"
9,PosixParser.java,init,void init(),51,53,1721,1730,IdentifierMutator-Variable,eatTheRest,started,4,0.021081446,<mask>,"void init()
    {<mask> = false;
        tokens.clear();
    }"
10,PosixParser.java,init,void init(),51,53,1721,1730,FieldReferenceMutator,eatTheRest,initialized,0,0.55318844,<mask>,"void init()
    {<mask> = false;
        tokens.clear();
    }"
11,PosixParser.java,init,void init(),51,53,1721,1730,FieldReferenceMutator,eatTheRest,running,1,0.07660843,<mask>,"void init()
    {<mask> = false;
        tokens.clear();
    }"
12,PosixParser.java,init,void init(),51,53,1721,1730,FieldReferenceMutator,eatTheRest,init,2,0.03881623,<mask>,"void init()
    {<mask> = false;
        tokens.clear();
    }"
13,PosixParser.java,init,void init(),51,53,1721,1730,FieldReferenceMutator,eatTheRest,active,3,0.021112248,<mask>,"void init()
    {<mask> = false;
        tokens.clear();
    }"
14,PosixParser.java,init,void init(),51,53,1721,1730,FieldReferenceMutator,eatTheRest,started,4,0.021081446,<mask>,"void init()
    {<mask> = false;
        tokens.clear();
    }"
15,PosixParser.java,init,void init(),51,53,1734,1738,IdentifierMutator-Literal,false,true,1,0.44738856,<mask>,"void init()
    {
        eatTheRest =<mask>;
        tokens.clear();
    }"
16,PosixParser.java,init,void init(),51,53,1734,1738,IdentifierMutator-Literal,false,null,2,0.01994565,<mask>,"void init()
    {
        eatTheRest =<mask>;
        tokens.clear();
    }"
17,PosixParser.java,init,void init(),51,53,1734,1738,IdentifierMutator-Literal,false,0,3,0.0052655963,<mask>,"void init()
    {
        eatTheRest =<mask>;
        tokens.clear();
    }"
18,PosixParser.java,init,void init(),51,53,1734,1738,IdentifierMutator-Literal,false,init,4,0.0012099085,<mask>,"void init()
    {
        eatTheRest =<mask>;
        tokens.clear();
    }"
19,PosixParser.java,init,void init(),51,54,1756,1760,MethodCallMutator,clear,init,0,0.52339077,tokens.<mask>(),"void init()
    {
        eatTheRest = false;
        tokens.<mask>();
    }"
20,PosixParser.java,init,void init(),51,54,1756,1760,MethodCallMutator,clear,reset,2,0.04420911,tokens.<mask>(),"void init()
    {
        eatTheRest = false;
        tokens.<mask>();
    }"
21,PosixParser.java,init,void init(),51,54,1756,1760,MethodCallMutator,clear,empty,3,0.021401918,tokens.<mask>(),"void init()
    {
        eatTheRest = false;
        tokens.<mask>();
    }"
22,PosixParser.java,init,void init(),51,54,1756,1760,MethodCallMutator,clear,build,4,0.01963156,tokens.<mask>(),"void init()
    {
        eatTheRest = false;
        tokens.<mask>();
    }"
23,PosixParser.java,init,void init(),51,54,1749,1754,IdentifierMutator-Variable,tokens,chunks,1,0.04961761,<mask>,"void init()
    {
        eatTheRest = false;<mask>.clear();
    }"
24,PosixParser.java,init,void init(),51,54,1749,1754,IdentifierMutator-Variable,tokens,buffer,2,0.034898598,<mask>,"void init()
    {
        eatTheRest = false;<mask>.clear();
    }"
25,PosixParser.java,init,void init(),51,54,1749,1754,IdentifierMutator-Variable,tokens,items,3,0.032267004,<mask>,"void init()
    {
        eatTheRest = false;<mask>.clear();
    }"
26,PosixParser.java,init,void init(),51,54,1749,1754,IdentifierMutator-Variable,tokens,patterns,4,0.030039318,<mask>,"void init()
    {
        eatTheRest = false;<mask>.clear();
    }"
27,PosixParser.java,init,void init(),51,54,1749,1754,FieldReferenceMutator,tokens,chunks,1,0.04961761,<mask>,"void init()
    {
        eatTheRest = false;<mask>.clear();
    }"
28,PosixParser.java,init,void init(),51,54,1749,1754,FieldReferenceMutator,tokens,buffer,2,0.034898598,<mask>,"void init()
    {
        eatTheRest = false;<mask>.clear();
    }"
29,PosixParser.java,init,void init(),51,54,1749,1754,FieldReferenceMutator,tokens,items,3,0.032267004,<mask>,"void init()
    {
        eatTheRest = false;<mask>.clear();
    }"
30,PosixParser.java,init,void init(),51,54,1749,1754,FieldReferenceMutator,tokens,patterns,4,0.030039318,<mask>,"void init()
    {
        eatTheRest = false;<mask>.clear();
    }"
31,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,97,4003,4006,MethodCallMutator,init,initialize,0,0.08207118,<mask>(),"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {<mask>();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
"
32,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,97,4003,4006,MethodCallMutator,init,close,2,0.064589486,<mask>(),"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {<mask>();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
"
33,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,97,4003,4006,MethodCallMutator,init,validate,3,0.058004137,<mask>(),"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {<mask>();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
"
34,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,97,4003,4006,MethodCallMutator,init,cleanup,4,0.039766133,<mask>(),"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {<mask>();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
"
35,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,98,4031,4031,AssignmentMutator,this.options=options,|,0,0.3199398,this.options <mask>= options,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options<mask>= options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                  "
36,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,98,4031,4031,AssignmentMutator,this.options=options,&,1,0.09412,this.options <mask>= options,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options<mask>= options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                  "
37,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,98,4031,4031,AssignmentMutator,this.options=options,*,2,0.08444284,this.options <mask>= options,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options<mask>= options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                  "
38,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,98,4031,4031,AssignmentMutator,this.options=options,!,3,0.08301262,this.options <mask>= options,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options<mask>= options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                  "
39,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,98,4031,4031,AssignmentMutator,this.options=options,|,4,0.040372517,this.options <mask>= options,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options<mask>= options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                  "
40,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,98,4019,4030,IdentifierMutator-Variable,this.options,options,0,0.76206493,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();<mask> = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
  "
41,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,98,4019,4030,IdentifierMutator-Variable,this.options,Options,1,0.09405836,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();<mask> = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
  "
42,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,98,4019,4030,IdentifierMutator-Variable,this.options,Options,2,0.043880496,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();<mask> = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
  "
43,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,98,4019,4030,IdentifierMutator-Variable,this.options,options,3,0.023528969,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();<mask> = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
  "
44,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,98,4019,4030,IdentifierMutator-Variable,this.options,defaults,4,0.00739537,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();<mask> = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
  "
45,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,98,4019,4022,IdentifierMutator-ThisAccess,this,super,2,0.0016620279,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();<mask>.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
"
46,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,98,4019,4022,IdentifierMutator-ThisAccess,this,This,3,0.0011379676,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();<mask>.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
"
47,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,98,4019,4022,IdentifierMutator-ThisAccess,this,config,4,0.0010411394,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();<mask>.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
"
48,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,98,4024,4030,FieldReferenceMutator,options,Options,1,0.0023800272,this.<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.<mask> = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
49,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,98,4024,4030,FieldReferenceMutator,options,config,2,0.0014690245,this.<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.<mask> = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
50,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,98,4024,4030,FieldReferenceMutator,options,option,3,0.00135329,this.<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.<mask> = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
51,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,98,4024,4030,FieldReferenceMutator,options,obj,4,3.3594106E-4,this.<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.<mask> = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
52,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,98,4034,4040,IdentifierMutator-Variable,options,null,1,0.0015628242,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options =<mask>;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
53,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,98,4034,4040,IdentifierMutator-Variable,options,defaults,2,1.9950079E-4,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options =<mask>;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
54,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,98,4034,4040,IdentifierMutator-Variable,options,option,4,1.2136057E-4,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options =<mask>;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
55,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,101,4144,4151,MethodCallMutator,iterator,iter,1,0.010639292,Arrays.asList(arguments).<mask>(),"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).<mask>();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
56,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,101,4144,4151,MethodCallMutator,iterator,Iterator,2,0.0046514035,Arrays.asList(arguments).<mask>(),"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).<mask>();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
57,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,101,4144,4151,MethodCallMutator,iterator,values,3,0.002849149,Arrays.asList(arguments).<mask>(),"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).<mask>();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
58,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,101,4144,4151,MethodCallMutator,iterator,reverse,4,9.637348E-4,Arrays.asList(arguments).<mask>(),"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).<mask>();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
59,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,101,4126,4131,MethodCallMutator,asList,from,0,0.23198345,Arrays.<mask>(arguments),"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.<mask>(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if"
60,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,101,4126,4131,MethodCallMutator,asList,as,1,0.18803048,Arrays.<mask>(arguments),"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.<mask>(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if"
61,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,101,4126,4131,MethodCallMutator,asList,copy,2,0.12137173,Arrays.<mask>(arguments),"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.<mask>(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if"
62,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,101,4126,4131,MethodCallMutator,asList,stream,3,0.1102193,Arrays.<mask>(arguments),"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.<mask>(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if"
63,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,101,4126,4131,MethodCallMutator,asList,on,4,0.08899075,Arrays.<mask>(arguments),"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.<mask>(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if"
64,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,101,4133,4141,IdentifierMutator-Variable,arguments,args,0,0.6325156,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(<mask>).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if"
65,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,101,4133,4141,IdentifierMutator-Variable,arguments,options,1,0.16063116,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(<mask>).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if"
66,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,101,4133,4141,IdentifierMutator-Variable,arguments,argument,2,0.036051735,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(<mask>).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if"
67,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,101,4133,4141,IdentifierMutator-Variable,arguments,command,3,0.014339651,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(<mask>).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if"
68,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,101,4133,4141,IdentifierMutator-Variable,arguments,token,4,0.012225601,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(<mask>).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if"
69,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,104,4220,4226,MethodCallMutator,hasNext,next,0,0.9835829,iter.<mask>(),"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.<mask>())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if"
70,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,104,4220,4226,MethodCallMutator,hasNext,Next,1,0.012559849,iter.<mask>(),"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.<mask>())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if"
71,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,104,4220,4226,MethodCallMutator,hasNext,more,2,7.2164874E-4,iter.<mask>(),"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.<mask>())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if"
72,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,104,4220,4226,MethodCallMutator,hasNext,continue,3,3.7591413E-4,iter.<mask>(),"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.<mask>())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if"
73,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,104,4220,4226,MethodCallMutator,hasNext,has,4,3.331749E-4,iter.<mask>(),"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.<mask>())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if"
74,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,104,4215,4218,IdentifierMutator-Variable,iter,iterator,1,0.0051720687,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (<mask>.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
75,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,104,4215,4218,IdentifierMutator-Variable,iter,inner,2,0.0019801084,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (<mask>.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
76,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,104,4215,4218,IdentifierMutator-Variable,iter,loop,3,0.0015794814,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (<mask>.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
77,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,107,4329,4332,MethodCallMutator,next,current,2,6.858662E-5,((String) (iter.<mask>())),"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.<mask>();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
78,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,107,4329,4332,MethodCallMutator,next,value,3,5.1970757E-5,((String) (iter.<mask>())),"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.<mask>();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
79,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,107,4329,4332,MethodCallMutator,next,get,4,3.6286907E-5,((String) (iter.<mask>())),"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.<mask>();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
80,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,107,4324,4327,IdentifierMutator-Variable,iter,iterator,2,0.0042180344,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String)<mask>.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
81,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,107,4324,4327,IdentifierMutator-Variable,iter,it,3,6.621226E-5,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String)<mask>.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
82,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,107,4324,4327,IdentifierMutator-Variable,iter,stream,4,6.415084E-5,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String)<mask>.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
83,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,110,4413,4422,MethodCallMutator,startsWith,has,0,0.57052714,"token.<mask>(""--"")","String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.<mask>(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if ("
84,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,110,4413,4422,MethodCallMutator,startsWith,split,1,0.15996304,"token.<mask>(""--"")","String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.<mask>(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if ("
85,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,110,4413,4422,MethodCallMutator,startsWith,is,2,0.058032542,"token.<mask>(""--"")","String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.<mask>(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if ("
86,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,110,4413,4422,MethodCallMutator,startsWith,includes,3,0.043111403,"token.<mask>(""--"")","String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.<mask>(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if ("
87,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,110,4413,4422,MethodCallMutator,startsWith,contains,4,0.03169542,"token.<mask>(""--"")","String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.<mask>(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if ("
88,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,110,4407,4411,IdentifierMutator-Variable,token,opt,1,5.8765017E-4,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (<mask>.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
89,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,110,4407,4411,IdentifierMutator-Variable,token,option,3,3.2374423E-4,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (<mask>.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
90,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,110,4407,4411,IdentifierMutator-Variable,token,tag,4,2.4546482E-4,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (<mask>.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
91,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,110,4424,4427,IdentifierMutator-Literal,"""--""","='",0,0.7757388,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(<mask>))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
92,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,110,4424,4427,IdentifierMutator-Literal,"""--""",=,1,0.14569779,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(<mask>))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
93,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,110,4424,4427,IdentifierMutator-Literal,"""--""","=""",2,0.02423087,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(<mask>))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
94,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,110,4424,4427,IdentifierMutator-Literal,"""--""","-'",3,0.013450724,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(<mask>))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
95,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,110,4424,4427,IdentifierMutator-Literal,"""--""",==,4,0.004217598,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(<mask>))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
96,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,112,4477,4483,MethodCallMutator,indexOf,find,0,0.5932044,"token.<mask>('=')","String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.<mask>('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if"
97,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,112,4477,4483,MethodCallMutator,indexOf,pos,1,0.20673683,"token.<mask>('=')","String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.<mask>('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if"
98,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,112,4477,4483,MethodCallMutator,indexOf,index,2,0.13813074,"token.<mask>('=')","String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.<mask>('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if"
99,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,112,4477,4483,MethodCallMutator,indexOf,position,3,0.015069606,"token.<mask>('=')","String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.<mask>('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if"
100,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,112,4477,4483,MethodCallMutator,indexOf,search,4,0.0150524555,"token.<mask>('=')","String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.<mask>('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if"
101,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,112,4471,4475,IdentifierMutator-Variable,token,option,2,5.038465E-4,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos =<mask>.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
102,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,112,4471,4475,IdentifierMutator-Variable,token,keyword,3,3.1026697E-4,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos =<mask>.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
103,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,112,4471,4475,IdentifierMutator-Variable,token,word,4,2.60658E-4,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos =<mask>.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
104,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,112,4485,4487,IdentifierMutator-Literal,"'='",--,0,0.90421903,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf(<mask>);
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
105,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,112,4485,4487,IdentifierMutator-Literal,"'='","-'",1,0.019215386,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf(<mask>);
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
106,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,112,4485,4487,IdentifierMutator-Literal,"'='",++,2,0.01114099,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf(<mask>);
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
107,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,112,4485,4487,IdentifierMutator-Literal,"'='",--,3,0.0076411515,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf(<mask>);
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
108,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,112,4485,4487,IdentifierMutator-Literal,"'='",/-,4,0.0072854823,<mask>,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf(<mask>);
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                   "
109,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4520,4562,IdentifierMutator-Conditional,"(pos==(-1))?token:token.substring(0,pos)",token,0,0.9790757,<mask>," stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt =<mask>; // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                   "
110,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4520,4562,IdentifierMutator-Conditional,"(pos==(-1))?token:token.substring(0,pos)","""""",1,0.0028410999,<mask>," stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt =<mask>; // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                   "
111,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4520,4562,IdentifierMutator-Conditional,"(pos==(-1))?token:token.substring(0,pos)",null,2,0.002555148,<mask>," stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt =<mask>; // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                   "
112,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4520,4562,IdentifierMutator-Conditional,"(pos==(-1))?token:token.substring(0,pos)","''",3,0.0024332798,<mask>," stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt =<mask>; // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                   "
113,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4520,4562,IdentifierMutator-Conditional,"(pos==(-1))?token:token.substring(0,pos)",pos,4,5.0173554E-4,<mask>," stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt =<mask>; // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                   "
114,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4523,4526,BinaryOperatorMutator,==,===,2,0.0056108395,pos <mask> (-1),"AtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos<mask>-1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
      "
115,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4523,4526,BinaryOperatorMutator,==,!=,3,0.0046623503,pos <mask> (-1),"AtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos<mask>-1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
      "
116,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4523,4526,BinaryOperatorMutator,==,=,4,0.0030172584,pos <mask> (-1),"AtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos<mask>-1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
      "
117,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4520,4522,IdentifierMutator-Variable,pos,index,2,1.8129076E-5,<mask>," stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt =<mask> == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
     "
118,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4520,4522,IdentifierMutator-Variable,pos,position,3,1.34935635E-5,<mask>," stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt =<mask> == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
     "
119,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4520,4522,IdentifierMutator-Variable,pos,len,4,8.118254E-6,<mask>," stopAtNonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt =<mask> == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
     "
120,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4527,4527,UnaryOperatorMutator,-,+,1,1.3779591E-4,<mask>1,"NonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos ==<mask>1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
       "
121,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4527,4527,UnaryOperatorMutator,-,"""-",3,4.90626E-5,<mask>1,"NonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos ==<mask>1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
       "
122,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4527,4527,UnaryOperatorMutator,-,(-,4,1.4994274E-5,<mask>1,"NonOption)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos ==<mask>1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
       "
123,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4528,4528,IdentifierMutator-Literal,1,2,2,2.735641E-4,<mask>,"Option)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -<mask> ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
        "
124,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4528,4528,IdentifierMutator-Literal,1,2,3,1.9447354E-4,<mask>,"Option)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -<mask> ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
        "
125,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4528,4528,IdentifierMutator-Literal,1,3,4,2.3676837E-5,<mask>,"Option)
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -<mask> ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
        "
126,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4532,4536,IdentifierMutator-Variable,token,"""""",1,0.16926667,<mask>,"
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ?<mask> : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
          "
127,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4532,4536,IdentifierMutator-Variable,token,null,2,0.06419107,<mask>,"
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ?<mask> : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
          "
128,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4532,4536,IdentifierMutator-Variable,token,"''",3,0.053382132,<mask>,"
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ?<mask> : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
          "
129,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4532,4536,IdentifierMutator-Variable,token,undefined,4,0.00229842,<mask>,"
    {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ?<mask> : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
          "
130,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4546,4554,MethodCallMutator,substring,slice,0,0.45575294,"token.<mask>(0, pos)"," {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.<mask>(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
               "
131,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4546,4554,MethodCallMutator,substring,ring,1,0.2806704,"token.<mask>(0, pos)"," {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.<mask>(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
               "
132,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4546,4554,MethodCallMutator,substring,replace,2,0.049906787,"token.<mask>(0, pos)"," {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.<mask>(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
               "
133,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4546,4554,MethodCallMutator,substring,fill,3,0.049862258,"token.<mask>(0, pos)"," {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.<mask>(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
               "
134,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4546,4554,MethodCallMutator,substring,get,4,0.0490953,"token.<mask>(0, pos)"," {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.<mask>(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
               "
135,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4540,4544,IdentifierMutator-Variable,token,option,1,2.9213316E-4,<mask>,"   {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token :<mask>.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
            "
136,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4540,4544,IdentifierMutator-Variable,token,word,2,1.3389495E-4,<mask>,"   {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token :<mask>.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
            "
137,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4540,4544,IdentifierMutator-Variable,token,input,4,1.0272075E-4,<mask>,"   {
        init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token :<mask>.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
            "
138,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4556,4556,IdentifierMutator-Literal,0,1,1,0.052380227,<mask>,"       init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(<mask>, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                 "
139,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4556,4556,IdentifierMutator-Literal,0,2,2,0.006453255,<mask>,"       init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(<mask>, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                 "
140,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4556,4556,IdentifierMutator-Literal,0,6,4,0.0036344347,<mask>,"       init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(<mask>, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                 "
141,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4559,4561,IdentifierMutator-Variable,pos,Pos,2,2.1363115E-4,<mask>,"     init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0,<mask>); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                   "
142,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4559,4561,IdentifierMutator-Variable,pos,position,3,6.4459826E-5,<mask>,"     init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0,<mask>); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                   "
143,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,113,4559,4561,IdentifierMutator-Variable,pos,len,4,3.0145258E-5,<mask>,"     init();
        this.options = options;

        // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0,<mask>); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                   "
144,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,115,4595,4595,UnaryOperatorMutator,!,!!,2,0.009808774,<mask>options.hasOption(opt),"      // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (<mask>options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                    "
145,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,115,4595,4595,UnaryOperatorMutator,!,--,3,0.0088473195,<mask>options.hasOption(opt),"      // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (<mask>options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                    "
146,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,115,4595,4595,UnaryOperatorMutator,!,?,4,0.005060839,<mask>options.hasOption(opt),"      // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (<mask>options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                    "
147,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,115,4604,4612,MethodCallMutator,hasOption,has,0,0.6711812,options.<mask>(opt),"    // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.<mask>(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens"
148,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,115,4604,4612,MethodCallMutator,hasOption,get,1,0.08801581,options.<mask>(opt),"    // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.<mask>(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens"
149,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,115,4604,4612,MethodCallMutator,hasOption,add,2,0.060827147,options.<mask>(opt),"    // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.<mask>(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens"
150,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,115,4604,4612,MethodCallMutator,hasOption,remove,3,0.042246155,options.<mask>(opt),"    // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.<mask>(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens"
151,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,115,4604,4612,MethodCallMutator,hasOption,include,4,0.016188886,options.<mask>(opt),"    // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.<mask>(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens"
152,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,115,4596,4602,IdentifierMutator-Variable,options,this,1,0.002845405,<mask>,"      // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!<mask>.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                     "
153,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,115,4596,4602,IdentifierMutator-Variable,options,Options,2,0.0016637702,<mask>,"      // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!<mask>.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                     "
154,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,115,4596,4602,IdentifierMutator-Variable,options,option,4,7.5632805E-4,<mask>,"      // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!<mask>.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                     "
155,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,115,4614,4616,IdentifierMutator-Variable,opt,op,1,0.0016297827,<mask>," // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(<mask>))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add"
156,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,115,4614,4616,IdentifierMutator-Variable,opt,token,2,9.231319E-4,<mask>," // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(<mask>))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add"
157,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,115,4614,4616,IdentifierMutator-Variable,opt,option,3,6.4916996E-4,<mask>," // an iterator for the command line tokens
        Iterator iter = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(<mask>))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add"
158,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,117,4658,4678,MethodCallMutator,processNonOptionToken,stop,0,0.2431369,"<mask>(token, stopAtNonOption)"," = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {<mask>(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
          "
159,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,117,4658,4678,MethodCallMutator,processNonOptionToken,consume,1,0.08434596,"<mask>(token, stopAtNonOption)"," = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {<mask>(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
          "
160,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,117,4658,4678,MethodCallMutator,processNonOptionToken,skip,2,0.08362137,"<mask>(token, stopAtNonOption)"," = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {<mask>(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
          "
161,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,117,4658,4678,MethodCallMutator,processNonOptionToken,abort,3,0.01871446,"<mask>(token, stopAtNonOption)"," = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {<mask>(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
          "
162,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,117,4658,4678,MethodCallMutator,processNonOptionToken,terminate,4,0.01705927,"<mask>(token, stopAtNonOption)"," = Arrays.asList(arguments).iterator();

        // process each command line token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {<mask>(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
          "
163,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,117,4680,4684,IdentifierMutator-Variable,token,iter,1,0.027606955,<mask>," token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(<mask>, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
            "
164,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,117,4680,4684,IdentifierMutator-Variable,token,opt,2,0.023665735,<mask>," token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(<mask>, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
            "
165,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,117,4680,4684,IdentifierMutator-Variable,token,options,3,0.01628523,<mask>," token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(<mask>, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
            "
166,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,117,4680,4684,IdentifierMutator-Variable,token,option,4,0.010054379,<mask>," token
        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(<mask>, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
            "
167,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,117,4687,4701,IdentifierMutator-Variable,stopAtNonOption,options,0,0.5029795,<mask>,"        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token,<mask>);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
"
168,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,117,4687,4701,IdentifierMutator-Variable,stopAtNonOption,pos,1,0.058221437,<mask>,"        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token,<mask>);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
"
169,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,117,4687,4701,IdentifierMutator-Variable,stopAtNonOption,option,2,0.036073267,<mask>,"        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token,<mask>);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
"
170,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,117,4687,4701,IdentifierMutator-Variable,stopAtNonOption,parser,3,0.03240193,<mask>,"        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token,<mask>);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
"
171,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,117,4687,4701,IdentifierMutator-Variable,stopAtNonOption,opt,4,0.03047894,<mask>,"        while (iter.hasNext())
        {
            // get the next command line token
            String token = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token,<mask>);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
"
172,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4795,4795,AssignmentMutator,currentOption=options.getOption(opt),|,0,0.6774181,currentOption <mask>= options.getOption(opt)," long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption<mask>= options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
          "
173,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4795,4795,AssignmentMutator,currentOption=options.getOption(opt),||,1,0.03641828,currentOption <mask>= options.getOption(opt)," long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption<mask>= options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
          "
174,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4795,4795,AssignmentMutator,currentOption=options.getOption(opt),|,2,0.034399208,currentOption <mask>= options.getOption(opt)," long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption<mask>= options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
          "
175,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4795,4795,AssignmentMutator,currentOption=options.getOption(opt),*,3,0.033071935,currentOption <mask>= options.getOption(opt)," long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption<mask>= options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
          "
176,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4795,4795,AssignmentMutator,currentOption=options.getOption(opt),2,4,0.017905809,currentOption <mask>= options.getOption(opt)," long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption<mask>= options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
          "
177,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4782,4794,IdentifierMutator-Variable,currentOption,opt,0,0.6835124,<mask>," = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {<mask> = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
          "
178,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4782,4794,IdentifierMutator-Variable,currentOption,opt,1,0.17828192,<mask>," = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {<mask> = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
          "
179,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4782,4794,IdentifierMutator-Variable,currentOption,token,2,0.04041434,<mask>," = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {<mask> = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
          "
180,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4782,4794,IdentifierMutator-Variable,currentOption,option,3,0.032410253,<mask>," = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {<mask> = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
          "
181,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4782,4794,IdentifierMutator-Variable,currentOption,token,4,0.0033678727,<mask>," = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {<mask> = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
          "
182,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4782,4794,FieldReferenceMutator,currentOption,opt,0,0.6835124,<mask>," = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {<mask> = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
          "
183,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4782,4794,FieldReferenceMutator,currentOption,opt,1,0.17828192,<mask>," = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {<mask> = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
          "
184,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4782,4794,FieldReferenceMutator,currentOption,token,2,0.04041434,<mask>," = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {<mask> = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
          "
185,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4782,4794,FieldReferenceMutator,currentOption,option,3,0.032410253,<mask>," = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {<mask> = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
          "
186,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4782,4794,FieldReferenceMutator,currentOption,token,4,0.0033678727,<mask>," = (String) iter.next();

            // handle long option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {<mask> = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
          "
187,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4806,4814,MethodCallMutator,getOption,get,0,0.8277928,options.<mask>(opt),"foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.<mask>(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
               "
188,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4806,4814,MethodCallMutator,getOption,option,1,0.05034595,options.<mask>(opt),"foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.<mask>(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
               "
189,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4806,4814,MethodCallMutator,getOption,remove,2,0.022501418,options.<mask>(opt),"foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.<mask>(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
               "
190,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4806,4814,MethodCallMutator,getOption,add,3,0.02161152,options.<mask>(opt),"foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.<mask>(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
               "
191,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4806,4814,MethodCallMutator,getOption,key,4,0.017928954,options.<mask>(opt),"foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.<mask>(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
               "
192,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4798,4804,IdentifierMutator-Variable,options,config,1,0.002844845,<mask>," option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption =<mask>.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
            "
193,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4798,4804,IdentifierMutator-Variable,options,parser,2,0.002366383,<mask>," option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption =<mask>.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
            "
194,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4798,4804,IdentifierMutator-Variable,options,this,3,0.0016271204,<mask>," option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption =<mask>.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
            "
195,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4798,4804,IdentifierMutator-Variable,options,defaults,4,0.0015028885,<mask>," option --foo or --foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption =<mask>.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
            "
196,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4816,4818,IdentifierMutator-Variable,opt,option,1,0.009241514,<mask>,"foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(<mask>);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens."
197,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4816,4818,IdentifierMutator-Variable,opt,token,2,0.0035378989,<mask>,"foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(<mask>);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens."
198,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4816,4818,IdentifierMutator-Variable,opt,op,3,7.1216834E-4,<mask>,"foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(<mask>);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens."
199,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,121,4816,4818,IdentifierMutator-Variable,opt,expr,4,2.3695777E-4,<mask>,"foo=bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(<mask>);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens."
200,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,123,4870,4872,MethodCallMutator,add,remove,1,0.02488945,tokens.<mask>(opt),"          int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.<mask>(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
    "
201,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,123,4870,4872,MethodCallMutator,add,push,2,0.0034073144,tokens.<mask>(opt),"          int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.<mask>(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
    "
202,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,123,4870,4872,MethodCallMutator,add,append,3,3.253675E-4,tokens.<mask>(opt),"          int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.<mask>(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
    "
203,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,123,4870,4872,MethodCallMutator,add,Add,4,2.7636555E-4,tokens.<mask>(opt),"          int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.<mask>(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
    "
204,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,123,4863,4868,IdentifierMutator-Variable,tokens,options,0,0.5285429,<mask>,"bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);<mask>.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
  "
205,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,123,4863,4868,IdentifierMutator-Variable,tokens,keywords,2,0.009313126,<mask>,"bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);<mask>.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
  "
206,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,123,4863,4868,IdentifierMutator-Variable,tokens,list,3,0.008190527,<mask>,"bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);<mask>.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
  "
207,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,123,4863,4868,IdentifierMutator-Variable,tokens,candidates,4,0.0074871904,<mask>,"bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);<mask>.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
  "
208,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,123,4863,4868,FieldReferenceMutator,tokens,options,0,0.5285429,<mask>,"bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);<mask>.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
  "
209,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,123,4863,4868,FieldReferenceMutator,tokens,keywords,2,0.009313126,<mask>,"bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);<mask>.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
  "
210,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,123,4863,4868,FieldReferenceMutator,tokens,list,3,0.008190527,<mask>,"bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);<mask>.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
  "
211,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,123,4863,4868,FieldReferenceMutator,tokens,candidates,4,0.0074871904,<mask>,"bar
            if (token.startsWith(""--""))
            {
                int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);<mask>.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
  "
212,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,123,4874,4876,IdentifierMutator-Variable,opt,token,0,0.9664415,<mask>,"        int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(<mask>);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
      "
213,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,123,4874,4876,IdentifierMutator-Variable,opt,option,2,0.0030346203,<mask>,"        int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(<mask>);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
      "
214,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,123,4874,4876,IdentifierMutator-Variable,opt,current,3,0.0011497344,<mask>,"        int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(<mask>);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
      "
215,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,123,4874,4876,IdentifierMutator-Variable,opt,word,4,0.0010381399,<mask>,"        int pos = token.indexOf('=');
                String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(<mask>);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
      "
216,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,124,4907,4910,BinaryOperatorMutator,!=,>,1,0.26349264,pos <mask> (-1),"         String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos<mask>-1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token"
217,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,124,4907,4910,BinaryOperatorMutator,!=,==,2,0.05664035,pos <mask> (-1),"         String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos<mask>-1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token"
218,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,124,4907,4910,BinaryOperatorMutator,!=,==,3,0.021313952,pos <mask> (-1),"         String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos<mask>-1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token"
219,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,124,4907,4910,BinaryOperatorMutator,!=,>,4,0.01123882,pos <mask> (-1),"         String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos<mask>-1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token"
220,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,124,4904,4906,IdentifierMutator-Variable,pos,index,2,2.0151609E-4,<mask>,"          String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (<mask> != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if ("
221,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,124,4904,4906,IdentifierMutator-Variable,pos,Pos,3,1.9128021E-4,<mask>,"          String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (<mask> != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if ("
222,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,124,4904,4906,IdentifierMutator-Variable,pos,position,4,1.3945572E-4,<mask>,"          String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (<mask> != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if ("
223,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,124,4911,4911,UnaryOperatorMutator,-,"""-",2,0.0013587889,<mask>1,"        String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos !=<mask>1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token."
224,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,124,4911,4911,UnaryOperatorMutator,-,+,3,3.7261186E-4,<mask>1,"        String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos !=<mask>1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token."
225,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,124,4911,4911,UnaryOperatorMutator,-,"""+",4,2.2532369E-4,<mask>1,"        String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos !=<mask>1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token."
226,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,124,4912,4912,IdentifierMutator-Literal,1,2,2,0.0024870127,<mask>,"       String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -<mask>)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length"
227,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,124,4912,4912,IdentifierMutator-Literal,1,3,3,2.4656483E-4,<mask>,"       String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -<mask>)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length"
228,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,124,4912,4912,IdentifierMutator-Literal,1,5,4,4.3566582E-5,<mask>,"       String opt = pos == -1 ? token : token.substring(0, pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -<mask>)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length"
229,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4968,4970,MethodCallMutator,add,remove,1,0.060314402,tokens.<mask>(token.substring(pos + 1)),"Option(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.<mask>(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    process"
230,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4968,4970,MethodCallMutator,add,push,2,0.020793155,tokens.<mask>(token.substring(pos + 1)),"Option(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.<mask>(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    process"
231,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4968,4970,MethodCallMutator,add,delete,3,0.0014336279,tokens.<mask>(token.substring(pos + 1)),"Option(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.<mask>(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    process"
232,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4968,4970,MethodCallMutator,add,append,4,0.001352997,tokens.<mask>(token.substring(pos + 1)),"Option(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.<mask>(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    process"
233,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4961,4966,IdentifierMutator-Variable,tokens,options,1,0.109034926,<mask>," pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {<mask>.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                  "
234,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4961,4966,IdentifierMutator-Variable,tokens,keywords,2,0.039700687,<mask>," pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {<mask>.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                  "
235,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4961,4966,IdentifierMutator-Variable,tokens,tags,3,0.03317237,<mask>," pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {<mask>.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                  "
236,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4961,4966,IdentifierMutator-Variable,tokens,args,4,0.02671924,<mask>," pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {<mask>.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                  "
237,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4961,4966,FieldReferenceMutator,tokens,options,1,0.109034926,<mask>," pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {<mask>.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                  "
238,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4961,4966,FieldReferenceMutator,tokens,keywords,2,0.039700687,<mask>," pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {<mask>.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                  "
239,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4961,4966,FieldReferenceMutator,tokens,tags,3,0.03317237,<mask>," pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {<mask>.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                  "
240,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4961,4966,FieldReferenceMutator,tokens,args,4,0.02671924,<mask>," pos); // --foo

                if (!options.hasOption(opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {<mask>.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                  "
241,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4978,4986,MethodCallMutator,substring,slice,0,0.85848594,token.<mask>(pos + 1),"
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.<mask>(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token,"
242,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4978,4986,MethodCallMutator,substring,get,1,0.021766359,token.<mask>(pos + 1),"
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.<mask>(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token,"
243,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4978,4986,MethodCallMutator,substring,ring,2,0.012117184,token.<mask>(pos + 1),"
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.<mask>(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token,"
244,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4978,4986,MethodCallMutator,substring,group,3,0.011178298,token.<mask>(pos + 1),"
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.<mask>(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token,"
245,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4978,4986,MethodCallMutator,substring,shift,4,0.009156829,token.<mask>(pos + 1),"
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.<mask>(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token,"
246,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4972,4976,IdentifierMutator-Variable,token,opt,1,0.084871575,<mask>,"opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(<mask>.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken"
247,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4972,4976,IdentifierMutator-Variable,token,option,2,0.061711535,<mask>,"opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(<mask>.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken"
248,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4972,4976,IdentifierMutator-Variable,token,string,3,0.034914766,<mask>,"opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(<mask>.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken"
249,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4972,4976,IdentifierMutator-Variable,token,text,4,0.02525254,<mask>,"opt))
                {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(<mask>.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken"
250,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4991,4993,BinaryOperatorMutator,+,)+,1,0.0652061,pos <mask> 1,"             {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos<mask>1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNon"
251,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4991,4993,BinaryOperatorMutator,+,",",2,0.032499287,pos <mask> 1,"             {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos<mask>1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNon"
252,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4991,4993,BinaryOperatorMutator,+,",-",3,0.023730775,pos <mask> 1,"             {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos<mask>1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNon"
253,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4991,4993,BinaryOperatorMutator,+,-,4,0.016163824,pos <mask> 1,"             {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos<mask>1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNon"
254,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4988,4990,IdentifierMutator-Variable,pos,Pos,2,7.07535E-5,<mask>,"              {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(<mask> + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAt"
255,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4988,4990,IdentifierMutator-Variable,pos,len,3,5.2960902E-5,<mask>,"              {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(<mask> + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAt"
256,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4988,4990,IdentifierMutator-Variable,pos,position,4,3.4644247E-5,<mask>,"              {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(<mask> + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAt"
257,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4994,4994,IdentifierMutator-Literal,1,2,1,0.026376003,<mask>,"            {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos +<mask>));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption"
258,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4994,4994,IdentifierMutator-Literal,1,3,2,0.0021099283,<mask>,"            {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos +<mask>));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption"
259,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4994,4994,IdentifierMutator-Literal,1,4,3,0.0017367668,<mask>,"            {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos +<mask>));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption"
260,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,126,4994,4994,IdentifierMutator-Literal,1,7,4,0.0010864119,<mask>,"            {
                    processNonOptionToken(token, stopAtNonOption);
                }
                else
                {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos +<mask>));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption"
261,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,132,5108,5113,MethodCallMutator,equals,test,0,0.672181,"""-"".<mask>(token)","         {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".<mask>(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
               "
262,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,132,5108,5113,MethodCallMutator,equals,is,1,0.17923996,"""-"".<mask>(token)","         {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".<mask>(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
               "
263,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,132,5108,5113,MethodCallMutator,equals,append,2,0.020627826,"""-"".<mask>(token)","         {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".<mask>(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
               "
264,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,132,5108,5113,MethodCallMutator,equals,match,3,0.020452626,"""-"".<mask>(token)","         {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".<mask>(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
               "
265,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,132,5108,5113,MethodCallMutator,equals,join,4,0.0115111545,"""-"".<mask>(token)","         {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".<mask>(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
               "
266,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,132,5104,5106,IdentifierMutator-Literal,"""-""",option,0,0.16040085,<mask>,"           {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (<mask>.equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
            "
267,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,132,5104,5106,IdentifierMutator-Literal,"""-""",token,1,0.1009599,<mask>,"           {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (<mask>.equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
            "
268,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,132,5104,5106,IdentifierMutator-Literal,"""-""",current,2,0.092959404,<mask>,"           {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (<mask>.equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
            "
269,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,132,5104,5106,IdentifierMutator-Literal,"""-""",opt,3,0.067891836,<mask>,"           {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (<mask>.equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
            "
270,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,132,5104,5106,IdentifierMutator-Literal,"""-""",default,4,0.030860702,<mask>,"           {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (<mask>.equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
            "
271,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,132,5115,5119,IdentifierMutator-Variable,token,word,1,0.005034355,<mask>,"      {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(<mask>))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                 "
272,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,132,5115,5119,IdentifierMutator-Variable,token,option,2,0.002812283,<mask>,"      {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(<mask>))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                 "
273,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,132,5115,5119,IdentifierMutator-Variable,token,opt,3,0.002423817,<mask>,"      {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(<mask>))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                 "
274,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,132,5115,5119,IdentifierMutator-Variable,token,key,4,0.0015839246,<mask>,"      {
                    currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(<mask>))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                 "
275,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,134,5160,5162,MethodCallMutator,add,remove,1,0.05009448,tokens.<mask>(token),"(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.<mask>(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
   "
276,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,134,5160,5162,MethodCallMutator,add,push,2,0.018838428,tokens.<mask>(token),"(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.<mask>(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
   "
277,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,134,5160,5162,MethodCallMutator,add,append,3,6.1876536E-4,tokens.<mask>(token),"(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.<mask>(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
   "
278,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,134,5160,5162,MethodCallMutator,add,delete,4,5.8975024E-4,tokens.<mask>(token),"(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.<mask>(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
   "
279,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,134,5153,5158,IdentifierMutator-Variable,tokens,candidates,1,0.03748312,<mask>,"            currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {<mask>.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
 "
280,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,134,5153,5158,IdentifierMutator-Variable,tokens,options,2,0.033804808,<mask>,"            currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {<mask>.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
 "
281,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,134,5153,5158,IdentifierMutator-Variable,tokens,keywords,3,0.015312506,<mask>,"            currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {<mask>.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
 "
282,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,134,5153,5158,IdentifierMutator-Variable,tokens,result,4,0.010217308,<mask>,"            currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {<mask>.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
 "
283,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,134,5153,5158,FieldReferenceMutator,tokens,candidates,1,0.03748312,<mask>,"            currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {<mask>.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
 "
284,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,134,5153,5158,FieldReferenceMutator,tokens,options,2,0.033804808,<mask>,"            currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {<mask>.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
 "
285,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,134,5153,5158,FieldReferenceMutator,tokens,keywords,3,0.015312506,<mask>,"            currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {<mask>.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
 "
286,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,134,5153,5158,FieldReferenceMutator,tokens,result,4,0.010217308,<mask>,"            currentOption = options.getOption(opt);
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {<mask>.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
 "
287,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,134,5164,5168,IdentifierMutator-Variable,token,opt,0,0.77739036,<mask>,");
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(<mask>);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
     "
288,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,134,5164,5168,IdentifierMutator-Variable,token,option,2,0.0076539423,<mask>,");
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(<mask>);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
     "
289,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,134,5164,5168,IdentifierMutator-Variable,token,op,3,0.0012371333,<mask>,");
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(<mask>);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
     "
290,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,134,5164,5168,IdentifierMutator-Variable,token,word,4,8.9267874E-4,<mask>,");
                    
                    tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(<mask>);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
     "
291,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,136,5213,5222,MethodCallMutator,startsWith,is,0,0.2633638,"token.<mask>(""-"")","           tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.<mask>(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
"
292,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,136,5213,5222,MethodCallMutator,startsWith,has,1,0.19237518,"token.<mask>(""-"")","           tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.<mask>(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
"
293,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,136,5213,5222,MethodCallMutator,startsWith,split,2,0.089877695,"token.<mask>(""-"")","           tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.<mask>(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
"
294,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,136,5213,5222,MethodCallMutator,startsWith,match,3,0.08763808,"token.<mask>(""-"")","           tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.<mask>(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
"
295,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,136,5213,5222,MethodCallMutator,startsWith,length,4,0.05487149,"token.<mask>(""-"")","           tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.<mask>(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
"
296,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,136,5207,5211,IdentifierMutator-Variable,token,key,1,5.8948284E-4,<mask>,"             tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (<mask>.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
         "
297,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,136,5207,5211,IdentifierMutator-Variable,token,word,2,4.8896315E-4,<mask>,"             tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (<mask>.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
         "
298,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,136,5207,5211,IdentifierMutator-Variable,token,string,3,3.9271652E-4,<mask>,"             tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (<mask>.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
         "
299,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,136,5224,5226,IdentifierMutator-Literal,"""-""",/-,0,0.24627309,<mask>,"       tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(<mask>))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
  "
300,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,136,5224,5226,IdentifierMutator-Literal,"""-""",-,1,0.09933777,<mask>,"       tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(<mask>))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
  "
301,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,136,5224,5226,IdentifierMutator-Literal,"""-""",option,2,0.061014734,<mask>,"       tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(<mask>))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
  "
302,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,136,5224,5226,IdentifierMutator-Literal,"""-""","-'",3,0.056426875,<mask>,"       tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(<mask>))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
  "
303,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,136,5224,5226,IdentifierMutator-Literal,"""-""",-$,4,0.05450221,<mask>,"       tokens.add(opt);
                    if (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(<mask>))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
  "
304,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5283,5286,BinaryOperatorMutator,||,&&,0,0.692702,(token.length() == 2) <mask> options.hasOption(token),"
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2<mask>options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

"
305,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5283,5286,BinaryOperatorMutator,||,&&,1,0.17394567,(token.length() == 2) <mask> options.hasOption(token),"
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2<mask>options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

"
306,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5283,5286,BinaryOperatorMutator,||,&,2,0.049848814,(token.length() == 2) <mask> options.hasOption(token),"
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2<mask>options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

"
307,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5283,5286,BinaryOperatorMutator,||,.,4,0.014124154,(token.length() == 2) <mask> options.hasOption(token),"
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2<mask>options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

"
308,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5278,5281,BinaryOperatorMutator,==,>,0,0.5853495,token.length() <mask> 2,"1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length()<mask>2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
           "
309,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5278,5281,BinaryOperatorMutator,==,<,2,0.11668001,token.length() <mask> 2,"1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length()<mask>2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
           "
310,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5278,5281,BinaryOperatorMutator,==,<,3,0.016023753,token.length() <mask> 2,"1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length()<mask>2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
           "
311,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5278,5281,BinaryOperatorMutator,==,=,4,0.012214865,token.length() <mask> 2,"1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length()<mask>2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
           "
312,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5270,5275,MethodCallMutator,length,size,1,0.08595657,token.<mask>()," != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.<mask>() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
         "
313,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5270,5275,MethodCallMutator,length,width,2,0.010450713,token.<mask>()," != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.<mask>() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
         "
314,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5270,5275,MethodCallMutator,length,split,3,0.0049971594,token.<mask>()," != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.<mask>() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
         "
315,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5270,5275,MethodCallMutator,length,level,4,0.004376844,token.<mask>()," != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.<mask>() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
         "
316,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5264,5268,IdentifierMutator-Variable,token,options,1,0.010911245,<mask>," (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (<mask>.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
       "
317,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5264,5268,IdentifierMutator-Variable,token,option,2,0.0032475744,<mask>," (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (<mask>.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
       "
318,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5264,5268,IdentifierMutator-Variable,token,argument,3,0.0020268452,<mask>," (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (<mask>.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
       "
319,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5264,5268,IdentifierMutator-Variable,token,args,4,0.0012012166,<mask>," (pos != -1)
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (<mask>.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
       "
320,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5282,5282,IdentifierMutator-Literal,2,0,0,0.8087142,<mask>,")
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() ==<mask> || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }"
321,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5282,5282,IdentifierMutator-Literal,2,1,1,0.1486227,<mask>,")
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() ==<mask> || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }"
322,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5282,5282,IdentifierMutator-Literal,2,3,3,0.007446964,<mask>,")
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() ==<mask> || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }"
323,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5282,5282,IdentifierMutator-Literal,2,4,4,0.0031824445,<mask>,")
                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() ==<mask> || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }"
324,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5295,5303,MethodCallMutator,hasOption,has,0,0.3834137,options.<mask>(token),"                  {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.<mask>(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

    "
325,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5295,5303,MethodCallMutator,hasOption,includes,1,0.1856109,options.<mask>(token),"                  {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.<mask>(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

    "
326,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5295,5303,MethodCallMutator,hasOption,add,2,0.12807646,options.<mask>(token),"                  {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.<mask>(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

    "
327,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5295,5303,MethodCallMutator,hasOption,remove,3,0.050422505,options.<mask>(token),"                  {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.<mask>(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

    "
328,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5295,5303,MethodCallMutator,hasOption,get,4,0.043895237,options.<mask>(token),"                  {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.<mask>(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

    "
329,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5287,5293,IdentifierMutator-Variable,options,parser,1,0.11738203,<mask>,"                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 ||<mask>.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

 "
330,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5287,5293,IdentifierMutator-Variable,options,config,2,0.049441617,<mask>,"                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 ||<mask>.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

 "
331,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5287,5293,IdentifierMutator-Variable,options,option,3,0.03794662,<mask>,"                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 ||<mask>.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

 "
332,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5287,5293,IdentifierMutator-Variable,options,this,4,0.022705685,<mask>,"                    {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 ||<mask>.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

 "
333,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5305,5309,IdentifierMutator-Variable,token,key,1,0.0052067465,<mask>,"               {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(<mask>))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

      "
334,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5305,5309,IdentifierMutator-Variable,token,option,2,0.002506601,<mask>,"               {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(<mask>))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

      "
335,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5305,5309,IdentifierMutator-Variable,token,word,3,0.0016876948,<mask>,"               {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(<mask>))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

      "
336,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,138,5305,5309,IdentifierMutator-Variable,token,1,4,0.0011729909,<mask>,"               {
                        tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(<mask>))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

      "
337,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,140,5351,5368,MethodCallMutator,processOptionToken,process,0,0.15100598,"<mask>(token, stopAtNonOption)","                     tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {<mask>(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[t"
338,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,140,5351,5368,MethodCallMutator,processOptionToken,parse,1,0.053675193,"<mask>(token, stopAtNonOption)","                     tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {<mask>(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[t"
339,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,140,5351,5368,MethodCallMutator,processOptionToken,burst,2,0.045231815,"<mask>(token, stopAtNonOption)","                     tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {<mask>(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[t"
340,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,140,5351,5368,MethodCallMutator,processOptionToken,explode,3,0.029442815,"<mask>(token, stopAtNonOption)","                     tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {<mask>(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[t"
341,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,140,5351,5368,MethodCallMutator,processOptionToken,split,4,0.015200039,"<mask>(token, stopAtNonOption)","                     tokens.add(token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {<mask>(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[t"
342,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,140,5370,5374,IdentifierMutator-Variable,token,option,2,4.6486166E-5,<mask>,"token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(<mask>, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens"
343,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,140,5370,5374,IdentifierMutator-Variable,token,Token,3,4.385125E-5,<mask>,"token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(<mask>, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens"
344,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,140,5370,5374,IdentifierMutator-Variable,token,word,4,3.9769686E-5,<mask>,"token.substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(<mask>, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens"
345,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,140,5377,5391,IdentifierMutator-Variable,stopAtNonOption,options,0,0.37271127,<mask>,"substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token,<mask>);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
"
346,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,140,5377,5391,IdentifierMutator-Variable,stopAtNonOption,true,1,0.079062246,<mask>,"substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token,<mask>);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
"
347,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,140,5377,5391,IdentifierMutator-Variable,stopAtNonOption,false,2,0.049494766,<mask>,"substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token,<mask>);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
"
348,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,140,5377,5391,IdentifierMutator-Variable,stopAtNonOption,token,3,0.044407714,<mask>,"substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token,<mask>);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
"
349,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,140,5377,5391,IdentifierMutator-Variable,stopAtNonOption,option,4,0.043131296,<mask>,"substring(pos + 1));
                    }
                }
            }

            // single hyphen
            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token,<mask>);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
"
350,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,145,5509,5518,MethodCallMutator,burstToken,process,0,0.17096677,"<mask>(token, stopAtNonOption)","            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {<mask>(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
351,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,145,5509,5518,MethodCallMutator,burstToken,skip,1,0.039760806,"<mask>(token, stopAtNonOption)","            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {<mask>(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
352,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,145,5509,5518,MethodCallMutator,burstToken,parse,2,0.036875278,"<mask>(token, stopAtNonOption)","            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {<mask>(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
353,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,145,5509,5518,MethodCallMutator,burstToken,push,3,0.03669251,"<mask>(token, stopAtNonOption)","            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {<mask>(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
354,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,145,5509,5518,MethodCallMutator,burstToken,explode,4,0.0247525,"<mask>(token, stopAtNonOption)","            else if (""-"".equals(token))
            {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {<mask>(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
355,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,145,5520,5524,IdentifierMutator-Variable,token,iter,1,4.692199E-4,<mask>,"           {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(<mask>, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
356,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,145,5520,5524,IdentifierMutator-Variable,token,key,2,1.1750294E-4,<mask>,"           {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(<mask>, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
357,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,145,5520,5524,IdentifierMutator-Variable,token,word,3,1.144571E-4,<mask>,"           {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(<mask>, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
358,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,145,5527,5541,IdentifierMutator-Variable,stopAtNonOption,options,0,0.24827123,<mask>,"         {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token,<mask>);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
359,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,145,5527,5541,IdentifierMutator-Variable,stopAtNonOption,true,1,0.078999855,<mask>,"         {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token,<mask>);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
360,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,145,5527,5541,IdentifierMutator-Variable,stopAtNonOption,false,2,0.06064389,<mask>,"         {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token,<mask>);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
361,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,145,5527,5541,IdentifierMutator-Variable,stopAtNonOption,loop,3,0.044751234,<mask>,"         {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token,<mask>);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
362,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,145,5527,5541,IdentifierMutator-Variable,stopAtNonOption,tokens,4,0.017726341,<mask>,"         {
                tokens.add(token);
            }
            else if (token.startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token,<mask>);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
363,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,150,5624,5644,MethodCallMutator,processNonOptionToken,process,0,0.51126826,"<mask>(token, stopAtNonOption)","startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {<mask>(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
364,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,150,5624,5644,MethodCallMutator,processNonOptionToken,parse,1,0.032641206,"<mask>(token, stopAtNonOption)","startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {<mask>(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
365,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,150,5624,5644,MethodCallMutator,processNonOptionToken,skip,2,0.025742296,"<mask>(token, stopAtNonOption)","startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {<mask>(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
366,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,150,5624,5644,MethodCallMutator,processNonOptionToken,push,3,0.015077855,"<mask>(token, stopAtNonOption)","startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {<mask>(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
367,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,150,5624,5644,MethodCallMutator,processNonOptionToken,step,4,0.014155056,"<mask>(token, stopAtNonOption)","startsWith(""-""))
            {
                if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {<mask>(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
368,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,150,5646,5650,IdentifierMutator-Variable,token,iter,2,6.4048574E-5,<mask>,"               if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(<mask>, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
369,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,150,5646,5650,IdentifierMutator-Variable,token,Token,3,3.291641E-5,<mask>,"               if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(<mask>, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
370,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,150,5646,5650,IdentifierMutator-Variable,token,key,4,2.6019909E-5,<mask>,"               if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(<mask>, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
371,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,150,5653,5667,IdentifierMutator-Variable,stopAtNonOption,options,0,0.24404973,<mask>,"             if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token,<mask>);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
372,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,150,5653,5667,IdentifierMutator-Variable,stopAtNonOption,iter,1,0.08346349,<mask>,"             if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token,<mask>);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
373,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,150,5653,5667,IdentifierMutator-Variable,stopAtNonOption,loop,2,0.076301195,<mask>,"             if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token,<mask>);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
374,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,150,5653,5667,IdentifierMutator-Variable,stopAtNonOption,true,3,0.061425842,<mask>,"             if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token,<mask>);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
375,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,150,5653,5667,IdentifierMutator-Variable,stopAtNonOption,false,4,0.05243789,<mask>,"             if (token.length() == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token,<mask>);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
376,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,153,5698,5703,MethodCallMutator,gobble,while,0,0.33762395,<mask>(iter)," == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }<mask>(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
377,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,153,5698,5703,MethodCallMutator,gobble,next,1,0.049998783,<mask>(iter)," == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }<mask>(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
378,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,153,5698,5703,MethodCallMutator,gobble,close,2,0.04210926,<mask>(iter)," == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }<mask>(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
379,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,153,5698,5703,MethodCallMutator,gobble,step,3,0.02862923,<mask>(iter)," == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }<mask>(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
380,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,153,5698,5703,MethodCallMutator,gobble,while,4,0.022311015,<mask>(iter)," == 2 || options.hasOption(token))
                {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }<mask>(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
381,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,153,5705,5708,IdentifierMutator-Variable,iter,token,0,0.9484848,<mask>,"            {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(<mask>);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
382,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,153,5705,5708,IdentifierMutator-Variable,iter,output,1,0.0028225568,<mask>,"            {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(<mask>);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
383,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,153,5705,5708,IdentifierMutator-Variable,iter,buffer,2,0.0014564473,<mask>,"            {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(<mask>);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
384,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,153,5705,5708,IdentifierMutator-Variable,iter,word,3,0.0012208094,<mask>,"            {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(<mask>);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
385,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,153,5705,5708,IdentifierMutator-Variable,iter,words,4,0.0011212643,<mask>,"            {
                    processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(<mask>);
        }

        return (String[]) tokens.toArray(new String[tokens.size()]);
   "
386,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5756,5762,MethodCallMutator,toArray,to,0,0.25732577,((String[]) (tokens.<mask>(new String[tokens.size()]))),"       processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.<mask>(new String[tokens.size()]);
   "
387,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5756,5762,MethodCallMutator,toArray,map,1,0.16949159,((String[]) (tokens.<mask>(new String[tokens.size()]))),"       processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.<mask>(new String[tokens.size()]);
   "
388,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5756,5762,MethodCallMutator,toArray,slice,2,0.11637316,((String[]) (tokens.<mask>(new String[tokens.size()]))),"       processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.<mask>(new String[tokens.size()]);
   "
389,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5756,5762,MethodCallMutator,toArray,Array,3,0.1015939,((String[]) (tokens.<mask>(new String[tokens.size()]))),"       processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.<mask>(new String[tokens.size()]);
   "
390,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5756,5762,MethodCallMutator,toArray,values,4,0.04212458,((String[]) (tokens.<mask>(new String[tokens.size()]))),"       processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.<mask>(new String[tokens.size()]);
   "
391,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5749,5754,IdentifierMutator-Variable,tokens,token,1,0.0053270385,<mask>,"         processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[])<mask>.toArray(new String[tokens.size()]);
   "
392,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5749,5754,IdentifierMutator-Variable,tokens,result,2,0.003944105,<mask>,"         processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[])<mask>.toArray(new String[tokens.size()]);
   "
393,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5749,5754,IdentifierMutator-Variable,tokens,Tokens,3,0.0024399126,<mask>,"         processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[])<mask>.toArray(new String[tokens.size()]);
   "
394,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5749,5754,IdentifierMutator-Variable,tokens,token,4,0.0020934462,<mask>,"         processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[])<mask>.toArray(new String[tokens.size()]);
   "
395,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5749,5754,FieldReferenceMutator,tokens,token,1,0.0053270385,<mask>,"         processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[])<mask>.toArray(new String[tokens.size()]);
   "
396,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5749,5754,FieldReferenceMutator,tokens,result,2,0.003944105,<mask>,"         processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[])<mask>.toArray(new String[tokens.size()]);
   "
397,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5749,5754,FieldReferenceMutator,tokens,Tokens,3,0.0024399126,<mask>,"         processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[])<mask>.toArray(new String[tokens.size()]);
   "
398,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5749,5754,FieldReferenceMutator,tokens,token,4,0.0020934462,<mask>,"         processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[])<mask>.toArray(new String[tokens.size()]);
   "
399,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5782,5785,MethodCallMutator,size,length,1,0.001993257,tokens.<mask>(),"token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.<mask>()]);
   "
400,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5782,5785,MethodCallMutator,size,shape,2,7.464242E-4,tokens.<mask>(),"token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.<mask>()]);
   "
401,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5782,5785,MethodCallMutator,size,count,3,3.701628E-4,tokens.<mask>(),"token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[tokens.<mask>()]);
   "
402,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5775,5780,IdentifierMutator-Variable,tokens,Tokens,1,0.22277744,<mask>," processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[<mask>.size()]);
   "
403,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5775,5780,IdentifierMutator-Variable,tokens,token,2,0.06122496,<mask>," processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[<mask>.size()]);
   "
404,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5775,5780,IdentifierMutator-Variable,tokens,words,3,0.0046997294,<mask>," processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[<mask>.size()]);
   "
405,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5775,5780,IdentifierMutator-Variable,tokens,tags,4,0.0016444054,<mask>," processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[<mask>.size()]);
   "
406,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5775,5780,FieldReferenceMutator,tokens,Tokens,1,0.22277744,<mask>," processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[<mask>.size()]);
   "
407,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5775,5780,FieldReferenceMutator,tokens,token,2,0.06122496,<mask>," processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[<mask>.size()]);
   "
408,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5775,5780,FieldReferenceMutator,tokens,words,3,0.0046997294,<mask>," processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[<mask>.size()]);
   "
409,PosixParser.java,flatten,"String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",95,156,5775,5780,FieldReferenceMutator,tokens,tags,4,0.0016444054,<mask>," processOptionToken(token, stopAtNonOption);
                }
                // requires bursting
                else
                {
                    burstToken(token, stopAtNonOption);
                }
            }
            else
            {
                processNonOptionToken(token, stopAtNonOption);
            }

            gobble(iter);
        }

        return (String[]) tokens.toArray(new String[<mask>.size()]);
   "
410,PosixParser.java,gobble,void gobble(Iterator iter),164,166,5999,6008,IdentifierMutator-Variable,eatTheRest,loop,0,0.11381347,<mask>,"void gobble(Iterator iter)
    {
        if (<mask>)
        {
            while (iter.hasNext())
            {
                tokens.add(iter.next());
            }
        }
    }"
411,PosixParser.java,gobble,void gobble(Iterator iter),164,166,5999,6008,IdentifierMutator-Variable,eatTheRest,debug,1,0.10975878,<mask>,"void gobble(Iterator iter)
    {
        if (<mask>)
        {
            while (iter.hasNext())
            {
                tokens.add(iter.next());
            }
        }
    }"
412,PosixParser.java,gobble,void gobble(Iterator iter),164,166,5999,6008,IdentifierMutator-Variable,eatTheRest,testing,2,0.074712195,<mask>,"void gobble(Iterator iter)
    {
        if (<mask>)
        {
            while (iter.hasNext())
            {
                tokens.add(iter.next());
            }
        }
    }"
413,PosixParser.java,gobble,void gobble(Iterator iter),164,166,5999,6008,IdentifierMutator-Variable,eatTheRest,true,3,0.038706247,<mask>,"void gobble(Iterator iter)
    {
        if (<mask>)
        {
            while (iter.hasNext())
            {
                tokens.add(iter.next());
            }
        }
    }"
414,PosixParser.java,gobble,void gobble(Iterator iter),164,166,5999,6008,IdentifierMutator-Variable,eatTheRest,enabled,4,0.02720355,<mask>,"void gobble(Iterator iter)
    {
        if (<mask>)
        {
            while (iter.hasNext())
            {
                tokens.add(iter.next());
            }
        }
    }"
415,PosixParser.java,gobble,void gobble(Iterator iter),164,166,5999,6008,FieldReferenceMutator,eatTheRest,loop,0,0.11381347,<mask>,"void gobble(Iterator iter)
    {
        if (<mask>)
        {
            while (iter.hasNext())
            {
                tokens.add(iter.next());
            }
        }
    }"
416,PosixParser.java,gobble,void gobble(Iterator iter),164,166,5999,6008,FieldReferenceMutator,eatTheRest,debug,1,0.10975878,<mask>,"void gobble(Iterator iter)
    {
        if (<mask>)
        {
            while (iter.hasNext())
            {
                tokens.add(iter.next());
            }
        }
    }"
417,PosixParser.java,gobble,void gobble(Iterator iter),164,166,5999,6008,FieldReferenceMutator,eatTheRest,testing,2,0.074712195,<mask>,"void gobble(Iterator iter)
    {
        if (<mask>)
        {
            while (iter.hasNext())
            {
                tokens.add(iter.next());
            }
        }
    }"
418,PosixParser.java,gobble,void gobble(Iterator iter),164,166,5999,6008,FieldReferenceMutator,eatTheRest,true,3,0.038706247,<mask>,"void gobble(Iterator iter)
    {
        if (<mask>)
        {
            while (iter.hasNext())
            {
                tokens.add(iter.next());
            }
        }
    }"
419,PosixParser.java,gobble,void gobble(Iterator iter),164,166,5999,6008,FieldReferenceMutator,eatTheRest,enabled,4,0.02720355,<mask>,"void gobble(Iterator iter)
    {
        if (<mask>)
        {
            while (iter.hasNext())
            {
                tokens.add(iter.next());
            }
        }
    }"
420,PosixParser.java,gobble,void gobble(Iterator iter),164,168,6045,6051,MethodCallMutator,hasNext,next,0,0.8450618,iter.<mask>(),"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.<mask>())
            {
                tokens.add(iter.next());
            }
        }
    }"
421,PosixParser.java,gobble,void gobble(Iterator iter),164,168,6045,6051,MethodCallMutator,hasNext,more,1,0.041244272,iter.<mask>(),"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.<mask>())
            {
                tokens.add(iter.next());
            }
        }
    }"
422,PosixParser.java,gobble,void gobble(Iterator iter),164,168,6045,6051,MethodCallMutator,hasNext,valid,2,0.03709304,iter.<mask>(),"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.<mask>())
            {
                tokens.add(iter.next());
            }
        }
    }"
423,PosixParser.java,gobble,void gobble(Iterator iter),164,168,6045,6051,MethodCallMutator,hasNext,has,3,0.01056569,iter.<mask>(),"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.<mask>())
            {
                tokens.add(iter.next());
            }
        }
    }"
424,PosixParser.java,gobble,void gobble(Iterator iter),164,168,6045,6051,MethodCallMutator,hasNext,back,4,0.006465641,iter.<mask>(),"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.<mask>())
            {
                tokens.add(iter.next());
            }
        }
    }"
425,PosixParser.java,gobble,void gobble(Iterator iter),164,168,6040,6043,IdentifierMutator-Variable,iter,iterator,1,6.9588906E-4,<mask>,"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (<mask>.hasNext())
            {
                tokens.add(iter.next());
            }
        }
    }"
426,PosixParser.java,gobble,void gobble(Iterator iter),164,168,6040,6043,IdentifierMutator-Variable,iter,inner,2,2.487135E-4,<mask>,"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (<mask>.hasNext())
            {
                tokens.add(iter.next());
            }
        }
    }"
427,PosixParser.java,gobble,void gobble(Iterator iter),164,168,6040,6043,IdentifierMutator-Variable,iter,loop,3,1.0339779E-4,<mask>,"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (<mask>.hasNext())
            {
                tokens.add(iter.next());
            }
        }
    }"
428,PosixParser.java,gobble,void gobble(Iterator iter),164,168,6040,6043,IdentifierMutator-Variable,iter,Iter,4,2.9665183E-5,<mask>,"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (<mask>.hasNext())
            {
                tokens.add(iter.next());
            }
        }
    }"
429,PosixParser.java,gobble,void gobble(Iterator iter),164,170,6093,6095,MethodCallMutator,add,append,1,0.081954844,tokens.<mask>(iter.next()),"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.hasNext())
            {
                tokens.<mask>(iter.next());
            }
        }
    }"
430,PosixParser.java,gobble,void gobble(Iterator iter),164,170,6093,6095,MethodCallMutator,add,push,2,0.022419868,tokens.<mask>(iter.next()),"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.hasNext())
            {
                tokens.<mask>(iter.next());
            }
        }
    }"
431,PosixParser.java,gobble,void gobble(Iterator iter),164,170,6093,6095,MethodCallMutator,add,remove,3,0.015521706,tokens.<mask>(iter.next()),"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.hasNext())
            {
                tokens.<mask>(iter.next());
            }
        }
    }"
432,PosixParser.java,gobble,void gobble(Iterator iter),164,170,6093,6095,MethodCallMutator,add,put,4,0.009270148,tokens.<mask>(iter.next()),"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.hasNext())
            {
                tokens.<mask>(iter.next());
            }
        }
    }"
433,PosixParser.java,gobble,void gobble(Iterator iter),164,170,6086,6091,IdentifierMutator-Variable,tokens,result,0,0.10270911,<mask>,"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.hasNext())
            {<mask>.add(iter.next());
            }
        }
    }"
434,PosixParser.java,gobble,void gobble(Iterator iter),164,170,6086,6091,IdentifierMutator-Variable,tokens,rest,1,0.09351753,<mask>,"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.hasNext())
            {<mask>.add(iter.next());
            }
        }
    }"
435,PosixParser.java,gobble,void gobble(Iterator iter),164,170,6086,6091,IdentifierMutator-Variable,tokens,items,2,0.06357339,<mask>,"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.hasNext())
            {<mask>.add(iter.next());
            }
        }
    }"
436,PosixParser.java,gobble,void gobble(Iterator iter),164,170,6086,6091,IdentifierMutator-Variable,tokens,results,3,0.037062302,<mask>,"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.hasNext())
            {<mask>.add(iter.next());
            }
        }
    }"
437,PosixParser.java,gobble,void gobble(Iterator iter),164,170,6086,6091,IdentifierMutator-Variable,tokens,chunks,4,0.027727796,<mask>,"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.hasNext())
            {<mask>.add(iter.next());
            }
        }
    }"
438,PosixParser.java,gobble,void gobble(Iterator iter),164,170,6086,6091,FieldReferenceMutator,tokens,result,0,0.10270911,<mask>,"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.hasNext())
            {<mask>.add(iter.next());
            }
        }
    }"
439,PosixParser.java,gobble,void gobble(Iterator iter),164,170,6086,6091,FieldReferenceMutator,tokens,rest,1,0.09351753,<mask>,"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.hasNext())
            {<mask>.add(iter.next());
            }
        }
    }"
440,PosixParser.java,gobble,void gobble(Iterator iter),164,170,6086,6091,FieldReferenceMutator,tokens,items,2,0.06357339,<mask>,"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.hasNext())
            {<mask>.add(iter.next());
            }
        }
    }"
441,PosixParser.java,gobble,void gobble(Iterator iter),164,170,6086,6091,FieldReferenceMutator,tokens,results,3,0.037062302,<mask>,"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.hasNext())
            {<mask>.add(iter.next());
            }
        }
    }"
442,PosixParser.java,gobble,void gobble(Iterator iter),164,170,6086,6091,FieldReferenceMutator,tokens,chunks,4,0.027727796,<mask>,"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.hasNext())
            {<mask>.add(iter.next());
            }
        }
    }"
443,PosixParser.java,gobble,void gobble(Iterator iter),164,170,6102,6105,MethodCallMutator,next,token,1,5.049461E-4,iter.<mask>(),"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.hasNext())
            {
                tokens.add(iter.<mask>());
            }
        }
    }"
444,PosixParser.java,gobble,void gobble(Iterator iter),164,170,6102,6105,MethodCallMutator,next,current,2,3.2843E-4,iter.<mask>(),"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.hasNext())
            {
                tokens.add(iter.<mask>());
            }
        }
    }"
445,PosixParser.java,gobble,void gobble(Iterator iter),164,170,6102,6105,MethodCallMutator,next,key,4,1.611189E-4,iter.<mask>(),"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.hasNext())
            {
                tokens.add(iter.<mask>());
            }
        }
    }"
446,PosixParser.java,gobble,void gobble(Iterator iter),164,170,6097,6100,IdentifierMutator-Variable,iter,iterator,1,0.0015983431,<mask>,"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.hasNext())
            {
                tokens.add(<mask>.next());
            }
        }
    }"
447,PosixParser.java,gobble,void gobble(Iterator iter),164,170,6097,6100,IdentifierMutator-Variable,iter,inner,2,3.164383E-4,<mask>,"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.hasNext())
            {
                tokens.add(<mask>.next());
            }
        }
    }"
448,PosixParser.java,gobble,void gobble(Iterator iter),164,170,6097,6100,IdentifierMutator-Variable,iter,loop,3,1.7207339E-4,<mask>,"void gobble(Iterator iter)
    {
        if (eatTheRest)
        {
            while (iter.hasNext())
            {
                tokens.add(<mask>.next());
            }
        }
    }"
449,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6520,6523,BinaryOperatorMutator,&&,||,2,0.017389366,stopAtNonOption <mask> ((currentOption == null) || (!currentOption.hasArg())),"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption<mask>(currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
450,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6520,6523,BinaryOperatorMutator,&&,|,3,0.0029823727,stopAtNonOption <mask> ((currentOption == null) || (!currentOption.hasArg())),"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption<mask>(currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
451,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6520,6523,BinaryOperatorMutator,&&,&,4,0.0029166162,stopAtNonOption <mask> ((currentOption == null) || (!currentOption.hasArg())),"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption<mask>(currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
452,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6505,6519,IdentifierMutator-Variable,stopAtNonOption,true,0,0.22436872,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (<mask> && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
453,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6505,6519,IdentifierMutator-Variable,stopAtNonOption,optional,1,0.08232838,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (<mask> && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
454,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6505,6519,IdentifierMutator-Variable,stopAtNonOption,current,2,0.06849003,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (<mask> && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
455,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6505,6519,IdentifierMutator-Variable,stopAtNonOption,value,3,0.045847908,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (<mask> && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
456,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6505,6519,IdentifierMutator-Variable,stopAtNonOption,complete,4,0.033628244,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (<mask> && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
457,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6546,6549,BinaryOperatorMutator,||,|,2,0.0760885,(currentOption == null) <mask> (!currentOption.hasArg()),"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null<mask>!currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
458,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6546,6549,BinaryOperatorMutator,||,&&,3,0.028955225,(currentOption == null) <mask> (!currentOption.hasArg()),"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null<mask>!currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
459,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6546,6549,BinaryOperatorMutator,||,?,4,0.009630397,(currentOption == null) <mask> (!currentOption.hasArg()),"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null<mask>!currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
460,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6538,6541,BinaryOperatorMutator,==,=,2,0.006231782,currentOption <mask> null,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption<mask>null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
461,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6538,6541,BinaryOperatorMutator,==,===,3,0.0020071052,currentOption <mask> null,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption<mask>null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
462,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6538,6541,BinaryOperatorMutator,==,!=,4,0.0016970001,currentOption <mask> null,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption<mask>null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
463,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6525,6537,IdentifierMutator-Variable,currentOption,value,0,0.9035042,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (<mask> == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
464,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6525,6537,IdentifierMutator-Variable,currentOption,option,1,0.026610807,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (<mask> == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
465,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6525,6537,IdentifierMutator-Variable,currentOption,token,2,0.023325212,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (<mask> == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
466,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6525,6537,IdentifierMutator-Variable,currentOption,argument,3,0.006895906,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (<mask> == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
467,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6525,6537,IdentifierMutator-Variable,currentOption,current,4,0.0054220925,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (<mask> == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
468,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6525,6537,FieldReferenceMutator,currentOption,value,0,0.9035042,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (<mask> == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
469,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6525,6537,FieldReferenceMutator,currentOption,option,1,0.026610807,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (<mask> == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
470,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6525,6537,FieldReferenceMutator,currentOption,token,2,0.023325212,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (<mask> == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
471,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6525,6537,FieldReferenceMutator,currentOption,argument,3,0.006895906,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (<mask> == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
472,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6525,6537,FieldReferenceMutator,currentOption,current,4,0.0054220925,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (<mask> == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
473,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6542,6545,IdentifierMutator-Literal,null,NULL,1,8.525061E-4,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption ==<mask> || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
474,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6542,6545,IdentifierMutator-Literal,null,nil,2,8.2696544E-4,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption ==<mask> || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
475,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6542,6545,IdentifierMutator-Literal,null,"""""",4,2.4146367E-4,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption ==<mask> || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
476,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6550,6550,UnaryOperatorMutator,!,(!,1,0.041751236,<mask>currentOption.hasArg(),"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null ||<mask>currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
477,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6550,6550,UnaryOperatorMutator,!,(,2,0.0034997005,<mask>currentOption.hasArg(),"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null ||<mask>currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
478,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6550,6550,UnaryOperatorMutator,!,(,3,2.0883013E-4,<mask>currentOption.hasArg(),"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null ||<mask>currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
479,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6565,6570,MethodCallMutator,hasArg,empty,0,0.20092544,currentOption.<mask>(),"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.<mask>()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
480,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6565,6570,MethodCallMutator,hasArg,value,1,0.13012421,currentOption.<mask>(),"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.<mask>()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
481,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6565,6570,MethodCallMutator,hasArg,length,2,0.113660775,currentOption.<mask>(),"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.<mask>()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
482,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6565,6570,MethodCallMutator,hasArg,get,3,0.06880843,currentOption.<mask>(),"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.<mask>()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
483,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6565,6570,MethodCallMutator,hasArg,is,4,0.03723779,currentOption.<mask>(),"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.<mask>()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
484,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6551,6563,IdentifierMutator-Variable,currentOption,option,0,0.12344472,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !<mask>.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
485,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6551,6563,IdentifierMutator-Variable,currentOption,argument,1,0.11836337,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !<mask>.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
486,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6551,6563,IdentifierMutator-Variable,currentOption,argument,2,0.09973718,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !<mask>.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
487,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6551,6563,IdentifierMutator-Variable,currentOption,token,3,0.099299274,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !<mask>.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
488,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6551,6563,IdentifierMutator-Variable,currentOption,option,4,0.09743048,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !<mask>.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
489,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6551,6563,FieldReferenceMutator,currentOption,option,0,0.12344472,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !<mask>.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
490,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6551,6563,FieldReferenceMutator,currentOption,argument,1,0.11836337,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !<mask>.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
491,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6551,6563,FieldReferenceMutator,currentOption,argument,2,0.09973718,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !<mask>.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
492,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6551,6563,FieldReferenceMutator,currentOption,token,3,0.099299274,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !<mask>.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
493,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,184,6551,6563,FieldReferenceMutator,currentOption,option,4,0.09743048,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !<mask>.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
494,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,186,6608,6608,AssignmentMutator,eatTheRest=true,!,0,0.063722074,eatTheRest <mask>= true,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest<mask>= true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
495,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,186,6608,6608,AssignmentMutator,eatTheRest=true,2,1,0.05541515,eatTheRest <mask>= true,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest<mask>= true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
496,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,186,6608,6608,AssignmentMutator,eatTheRest=true,(),2,0.03813774,eatTheRest <mask>= true,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest<mask>= true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
497,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,186,6608,6608,AssignmentMutator,eatTheRest=true,|,3,0.035662714,eatTheRest <mask>= true,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest<mask>= true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
498,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,186,6608,6608,AssignmentMutator,eatTheRest=true,Of,4,0.035378978,eatTheRest <mask>= true,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest<mask>= true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
499,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,186,6598,6607,IdentifierMutator-Variable,eatTheRest,stop,0,0.38940233,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {<mask> = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
500,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,186,6598,6607,IdentifierMutator-Variable,eatTheRest,done,1,0.06778825,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {<mask> = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
501,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,186,6598,6607,IdentifierMutator-Variable,eatTheRest,stopped,2,0.028759988,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {<mask> = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
502,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,186,6598,6607,IdentifierMutator-Variable,eatTheRest,terminated,3,0.025633702,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {<mask> = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
503,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,186,6598,6607,IdentifierMutator-Variable,eatTheRest,terminating,4,0.019549787,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {<mask> = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
504,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,186,6598,6607,FieldReferenceMutator,eatTheRest,stop,0,0.38940233,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {<mask> = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
505,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,186,6598,6607,FieldReferenceMutator,eatTheRest,done,1,0.06778825,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {<mask> = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
506,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,186,6598,6607,FieldReferenceMutator,eatTheRest,stopped,2,0.028759988,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {<mask> = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
507,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,186,6598,6607,FieldReferenceMutator,eatTheRest,terminated,3,0.025633702,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {<mask> = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
508,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,186,6598,6607,FieldReferenceMutator,eatTheRest,terminating,4,0.019549787,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {<mask> = true;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
509,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,186,6611,6614,IdentifierMutator-Literal,true,false,1,0.41128522,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest =<mask>;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
510,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,186,6611,6614,IdentifierMutator-Literal,true,null,3,9.4682234E-4,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest =<mask>;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
511,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,186,6611,6614,IdentifierMutator-Literal,true,TRUE,4,6.4892875E-4,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest =<mask>;
            tokens.add(""--"");
        }

        tokens.add(value);
    }"
512,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,187,6636,6638,MethodCallMutator,add,remove,1,0.16013406,"tokens.<mask>(""--"")","void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.<mask>(""--"");
        }

        tokens.add(value);
    }"
513,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,187,6636,6638,MethodCallMutator,add,push,2,0.01426934,"tokens.<mask>(""--"")","void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.<mask>(""--"");
        }

        tokens.add(value);
    }"
514,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,187,6636,6638,MethodCallMutator,add,append,3,0.0031029475,"tokens.<mask>(""--"")","void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.<mask>(""--"");
        }

        tokens.add(value);
    }"
515,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,187,6636,6638,MethodCallMutator,add,delete,4,0.0019202401,"tokens.<mask>(""--"")","void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.<mask>(""--"");
        }

        tokens.add(value);
    }"
516,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,187,6629,6634,IdentifierMutator-Variable,tokens,options,1,0.037000384,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;<mask>.add(""--"");
        }

        tokens.add(value);
    }"
517,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,187,6629,6634,IdentifierMutator-Variable,tokens,token,2,0.017730018,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;<mask>.add(""--"");
        }

        tokens.add(value);
    }"
518,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,187,6629,6634,IdentifierMutator-Variable,tokens,comments,3,0.009102354,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;<mask>.add(""--"");
        }

        tokens.add(value);
    }"
519,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,187,6629,6634,IdentifierMutator-Variable,tokens,output,4,0.0060693757,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;<mask>.add(""--"");
        }

        tokens.add(value);
    }"
520,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,187,6629,6634,FieldReferenceMutator,tokens,options,1,0.037000384,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;<mask>.add(""--"");
        }

        tokens.add(value);
    }"
521,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,187,6629,6634,FieldReferenceMutator,tokens,token,2,0.017730018,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;<mask>.add(""--"");
        }

        tokens.add(value);
    }"
522,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,187,6629,6634,FieldReferenceMutator,tokens,comments,3,0.009102354,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;<mask>.add(""--"");
        }

        tokens.add(value);
    }"
523,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,187,6629,6634,FieldReferenceMutator,tokens,output,4,0.0060693757,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;<mask>.add(""--"");
        }

        tokens.add(value);
    }"
524,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,187,6640,6643,IdentifierMutator-Literal,"""--""",value,0,0.84788007,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(<mask>);
        }

        tokens.add(value);
    }"
525,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,187,6640,6643,IdentifierMutator-Literal,"""--""",token,1,0.10965035,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(<mask>);
        }

        tokens.add(value);
    }"
526,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,187,6640,6643,IdentifierMutator-Literal,"""--""",null,2,0.0032079702,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(<mask>);
        }

        tokens.add(value);
    }"
527,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,187,6640,6643,IdentifierMutator-Literal,"""--""",VALUE,3,0.0020956583,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(<mask>);
        }

        tokens.add(value);
    }"
528,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,187,6640,6643,IdentifierMutator-Literal,"""--""",current,4,0.0020461853,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(<mask>);
        }

        tokens.add(value);
    }"
529,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,190,6673,6675,MethodCallMutator,add,remove,1,0.017564502,tokens.<mask>(value),"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.<mask>(value);
    }"
530,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,190,6673,6675,MethodCallMutator,add,push,2,0.010226112,tokens.<mask>(value),"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.<mask>(value);
    }"
531,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,190,6673,6675,MethodCallMutator,add,append,3,0.0041327234,tokens.<mask>(value),"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.<mask>(value);
    }"
532,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,190,6666,6671,IdentifierMutator-Variable,tokens,options,1,0.017033605,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }<mask>.add(value);
    }"
533,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,190,6666,6671,IdentifierMutator-Variable,tokens,values,2,0.011497531,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }<mask>.add(value);
    }"
534,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,190,6666,6671,IdentifierMutator-Variable,tokens,args,3,0.007985988,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }<mask>.add(value);
    }"
535,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,190,6666,6671,IdentifierMutator-Variable,tokens,rest,4,0.0068426635,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }<mask>.add(value);
    }"
536,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,190,6666,6671,FieldReferenceMutator,tokens,options,1,0.017033605,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }<mask>.add(value);
    }"
537,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,190,6666,6671,FieldReferenceMutator,tokens,values,2,0.011497531,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }<mask>.add(value);
    }"
538,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,190,6666,6671,FieldReferenceMutator,tokens,args,3,0.007985988,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }<mask>.add(value);
    }"
539,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,190,6666,6671,FieldReferenceMutator,tokens,rest,4,0.0068426635,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }<mask>.add(value);
    }"
540,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,190,6677,6681,IdentifierMutator-Variable,value,token,1,0.013484898,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(<mask>);
    }"
541,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,190,6677,6681,IdentifierMutator-Variable,value,VALUE,2,0.0017305104,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(<mask>);
    }"
542,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,190,6677,6681,IdentifierMutator-Variable,value,current,3,0.0015984226,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(<mask>);
    }"
543,PosixParser.java,processNonOptionToken,"void processNonOptionToken(String value, boolean stopAtNonOption)",182,190,6677,6681,IdentifierMutator-Variable,value,Value,4,0.001461,<mask>,"void processNonOptionToken(String value, boolean stopAtNonOption)
    {
        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
        {
            eatTheRest = true;
            tokens.add(""--"");
        }

        tokens.add(<mask>);
    }"
544,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7265,7268,BinaryOperatorMutator,&&,||,1,0.055030193,stopAtNonOption <mask> (!options.hasOption(token)),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption<mask>!options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
545,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7265,7268,BinaryOperatorMutator,&&,|,3,0.013024851,stopAtNonOption <mask> (!options.hasOption(token)),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption<mask>!options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
546,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7265,7268,BinaryOperatorMutator,&&,&,4,0.0059419572,stopAtNonOption <mask> (!options.hasOption(token)),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption<mask>!options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
547,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7250,7264,IdentifierMutator-Variable,stopAtNonOption,options,0,0.2269052,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (<mask> && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
548,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7250,7264,IdentifierMutator-Variable,stopAtNonOption,token,1,0.21974963,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (<mask> && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
549,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7250,7264,IdentifierMutator-Variable,stopAtNonOption,optional,2,0.07193116,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (<mask> && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
550,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7250,7264,IdentifierMutator-Variable,stopAtNonOption,current,3,0.04564302,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (<mask> && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
551,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7250,7264,IdentifierMutator-Variable,stopAtNonOption,true,4,0.029506806,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (<mask> && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
552,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7269,7269,UnaryOperatorMutator,!,(!,1,0.014759631,<mask>options.hasOption(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption &&<mask>options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
553,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7269,7269,UnaryOperatorMutator,!,(,2,0.008292394,<mask>options.hasOption(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption &&<mask>options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
554,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7269,7269,UnaryOperatorMutator,!,//,3,3.2111362E-4,<mask>options.hasOption(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption &&<mask>options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
555,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7278,7286,MethodCallMutator,hasOption,has,0,0.8829386,options.<mask>(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.<mask>(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
556,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7278,7286,MethodCallMutator,hasOption,get,1,0.02966608,options.<mask>(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.<mask>(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
557,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7278,7286,MethodCallMutator,hasOption,option,2,0.02701591,options.<mask>(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.<mask>(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
558,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7278,7286,MethodCallMutator,hasOption,key,3,0.007160989,options.<mask>(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.<mask>(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
559,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7278,7286,MethodCallMutator,hasOption,is,4,0.0069210506,options.<mask>(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.<mask>(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
560,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7270,7276,IdentifierMutator-Variable,options,Options,2,0.003971988,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !<mask>.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
561,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7270,7276,IdentifierMutator-Variable,options,this,3,8.697635E-4,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !<mask>.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
562,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7270,7276,IdentifierMutator-Variable,options,option,4,6.055094E-4,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !<mask>.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
563,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7270,7276,FieldReferenceMutator,options,Options,2,0.003971988,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !<mask>.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
564,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7270,7276,FieldReferenceMutator,options,this,3,8.697635E-4,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !<mask>.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
565,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7270,7276,FieldReferenceMutator,options,option,4,6.055094E-4,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !<mask>.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
566,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7288,7292,IdentifierMutator-Variable,token,Token,2,3.8250248E-5,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(<mask>))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
567,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7288,7292,IdentifierMutator-Variable,token,callback,3,2.0274027E-5,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(<mask>))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
568,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,207,7288,7292,IdentifierMutator-Variable,token,key,4,1.366839E-5,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(<mask>))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
569,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,209,7328,7328,AssignmentMutator,eatTheRest=true,Token,0,0.17257562,eatTheRest <mask>= true,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest<mask>= true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
570,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,209,7328,7328,AssignmentMutator,eatTheRest=true,Option,1,0.09287817,eatTheRest <mask>= true,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest<mask>= true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
571,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,209,7328,7328,AssignmentMutator,eatTheRest=true,Of,2,0.077391684,eatTheRest <mask>= true,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest<mask>= true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
572,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,209,7328,7328,AssignmentMutator,eatTheRest=true,Line,3,0.049886785,eatTheRest <mask>= true,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest<mask>= true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
573,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,209,7328,7328,AssignmentMutator,eatTheRest=true,Tag,4,0.033131264,eatTheRest <mask>= true,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest<mask>= true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
574,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,209,7318,7327,IdentifierMutator-Variable,eatTheRest,stop,0,0.8216448,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {<mask> = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
575,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,209,7318,7327,IdentifierMutator-Variable,eatTheRest,stopped,1,0.046508033,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {<mask> = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
576,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,209,7318,7327,IdentifierMutator-Variable,eatTheRest,done,2,0.011489675,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {<mask> = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
577,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,209,7318,7327,IdentifierMutator-Variable,eatTheRest,stopping,3,0.010572216,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {<mask> = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
578,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,209,7318,7327,IdentifierMutator-Variable,eatTheRest,stop,4,0.010226558,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {<mask> = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
579,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,209,7318,7327,FieldReferenceMutator,eatTheRest,stop,0,0.8216448,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {<mask> = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
580,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,209,7318,7327,FieldReferenceMutator,eatTheRest,stopped,1,0.046508033,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {<mask> = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
581,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,209,7318,7327,FieldReferenceMutator,eatTheRest,done,2,0.011489675,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {<mask> = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
582,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,209,7318,7327,FieldReferenceMutator,eatTheRest,stopping,3,0.010572216,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {<mask> = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
583,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,209,7318,7327,FieldReferenceMutator,eatTheRest,stop,4,0.010226558,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {<mask> = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
584,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,209,7331,7334,IdentifierMutator-Literal,true,false,1,0.28897327,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest =<mask>;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
585,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,209,7331,7334,IdentifierMutator-Literal,true,TRUE,3,9.1847463E-4,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest =<mask>;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
586,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,209,7331,7334,IdentifierMutator-Literal,true,null,4,4.2382744E-4,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest =<mask>;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
587,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,212,7368,7376,MethodCallMutator,hasOption,has,0,0.94696605,options.<mask>(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.<mask>(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
588,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,212,7368,7376,MethodCallMutator,hasOption,get,1,0.022528727,options.<mask>(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.<mask>(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
589,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,212,7368,7376,MethodCallMutator,hasOption,key,2,0.008048017,options.<mask>(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.<mask>(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
590,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,212,7368,7376,MethodCallMutator,hasOption,remove,3,0.0025034472,options.<mask>(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.<mask>(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
591,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,212,7368,7376,MethodCallMutator,hasOption,option,4,0.002154183,options.<mask>(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.<mask>(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
592,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,212,7360,7366,IdentifierMutator-Variable,options,Options,1,8.328143E-5,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (<mask>.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
593,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,212,7360,7366,IdentifierMutator-Variable,options,option,2,5.184236E-5,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (<mask>.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
594,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,212,7360,7366,IdentifierMutator-Variable,options,this,4,2.6185731E-5,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (<mask>.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
595,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,212,7360,7366,FieldReferenceMutator,options,Options,1,8.328143E-5,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (<mask>.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
596,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,212,7360,7366,FieldReferenceMutator,options,option,2,5.184236E-5,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (<mask>.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
597,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,212,7360,7366,FieldReferenceMutator,options,this,4,2.6185731E-5,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (<mask>.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
598,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,212,7378,7382,IdentifierMutator-Variable,token,Token,2,1.0261361E-5,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(<mask>))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
599,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,212,7378,7382,IdentifierMutator-Variable,token,oken,3,6.9921434E-6,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(<mask>))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
600,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,212,7378,7382,IdentifierMutator-Variable,token,key,4,6.244841E-6,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(<mask>))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(token);
    }"
601,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7421,7421,AssignmentMutator,currentOption=options.getOption(token),|,0,0.88485056,currentOption <mask>= options.getOption(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption<mask>= options.getOption(token);
        }

        tokens.add(token);
    }"
602,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7421,7421,AssignmentMutator,currentOption=options.getOption(token),*,1,0.019103315,currentOption <mask>= options.getOption(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption<mask>= options.getOption(token);
        }

        tokens.add(token);
    }"
603,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7421,7421,AssignmentMutator,currentOption=options.getOption(token),<<,2,0.013915781,currentOption <mask>= options.getOption(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption<mask>= options.getOption(token);
        }

        tokens.add(token);
    }"
604,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7421,7421,AssignmentMutator,currentOption=options.getOption(token),||,3,0.010903285,currentOption <mask>= options.getOption(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption<mask>= options.getOption(token);
        }

        tokens.add(token);
    }"
605,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7421,7421,AssignmentMutator,currentOption=options.getOption(token),+,4,0.008853891,currentOption <mask>= options.getOption(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption<mask>= options.getOption(token);
        }

        tokens.add(token);
    }"
606,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7408,7420,IdentifierMutator-Variable,currentOption,token,0,0.9735029,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {<mask> = options.getOption(token);
        }

        tokens.add(token);
    }"
607,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7408,7420,IdentifierMutator-Variable,currentOption,option,1,0.009240183,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {<mask> = options.getOption(token);
        }

        tokens.add(token);
    }"
608,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7408,7420,IdentifierMutator-Variable,currentOption,token,2,0.0058479477,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {<mask> = options.getOption(token);
        }

        tokens.add(token);
    }"
609,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7408,7420,IdentifierMutator-Variable,currentOption,options,3,0.0027558783,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {<mask> = options.getOption(token);
        }

        tokens.add(token);
    }"
610,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7408,7420,IdentifierMutator-Variable,currentOption,value,4,4.9195485E-4,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {<mask> = options.getOption(token);
        }

        tokens.add(token);
    }"
611,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7408,7420,FieldReferenceMutator,currentOption,token,0,0.9735029,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {<mask> = options.getOption(token);
        }

        tokens.add(token);
    }"
612,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7408,7420,FieldReferenceMutator,currentOption,option,1,0.009240183,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {<mask> = options.getOption(token);
        }

        tokens.add(token);
    }"
613,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7408,7420,FieldReferenceMutator,currentOption,token,2,0.0058479477,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {<mask> = options.getOption(token);
        }

        tokens.add(token);
    }"
614,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7408,7420,FieldReferenceMutator,currentOption,options,3,0.0027558783,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {<mask> = options.getOption(token);
        }

        tokens.add(token);
    }"
615,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7408,7420,FieldReferenceMutator,currentOption,value,4,4.9195485E-4,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {<mask> = options.getOption(token);
        }

        tokens.add(token);
    }"
616,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7432,7440,MethodCallMutator,getOption,get,0,0.803225,options.<mask>(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.<mask>(token);
        }

        tokens.add(token);
    }"
617,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7432,7440,MethodCallMutator,getOption,option,1,0.1620585,options.<mask>(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.<mask>(token);
        }

        tokens.add(token);
    }"
618,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7432,7440,MethodCallMutator,getOption,remove,2,0.0071122777,options.<mask>(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.<mask>(token);
        }

        tokens.add(token);
    }"
619,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7432,7440,MethodCallMutator,getOption,key,3,0.0036584272,options.<mask>(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.<mask>(token);
        }

        tokens.add(token);
    }"
620,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7432,7440,MethodCallMutator,getOption,value,4,0.0018956262,options.<mask>(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.<mask>(token);
        }

        tokens.add(token);
    }"
621,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7424,7430,IdentifierMutator-Variable,options,defaults,2,9.4646275E-5,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption =<mask>.getOption(token);
        }

        tokens.add(token);
    }"
622,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7424,7430,IdentifierMutator-Variable,options,this,3,8.876521E-5,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption =<mask>.getOption(token);
        }

        tokens.add(token);
    }"
623,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7424,7430,IdentifierMutator-Variable,options,config,4,6.34031E-5,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption =<mask>.getOption(token);
        }

        tokens.add(token);
    }"
624,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7424,7430,FieldReferenceMutator,options,defaults,2,9.4646275E-5,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption =<mask>.getOption(token);
        }

        tokens.add(token);
    }"
625,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7424,7430,FieldReferenceMutator,options,this,3,8.876521E-5,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption =<mask>.getOption(token);
        }

        tokens.add(token);
    }"
626,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7424,7430,FieldReferenceMutator,options,config,4,6.34031E-5,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption =<mask>.getOption(token);
        }

        tokens.add(token);
    }"
627,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7442,7446,IdentifierMutator-Variable,token,key,2,2.8368144E-5,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(<mask>);
        }

        tokens.add(token);
    }"
628,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7442,7446,IdentifierMutator-Variable,token,Token,3,2.1155207E-5,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(<mask>);
        }

        tokens.add(token);
    }"
629,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,214,7442,7446,IdentifierMutator-Variable,token,oken,4,1.9521942E-5,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(<mask>);
        }

        tokens.add(token);
    }"
630,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,217,7476,7478,MethodCallMutator,add,push,1,0.13635267,tokens.<mask>(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.<mask>(token);
    }"
631,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,217,7476,7478,MethodCallMutator,add,append,2,0.06046045,tokens.<mask>(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.<mask>(token);
    }"
632,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,217,7476,7478,MethodCallMutator,add,remove,3,0.027846346,tokens.<mask>(token),"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.<mask>(token);
    }"
633,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,217,7469,7474,IdentifierMutator-Variable,tokens,options,1,0.039400678,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }<mask>.add(token);
    }"
634,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,217,7469,7474,IdentifierMutator-Variable,tokens,remaining,2,0.033951063,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }<mask>.add(token);
    }"
635,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,217,7469,7474,IdentifierMutator-Variable,tokens,list,3,0.013643027,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }<mask>.add(token);
    }"
636,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,217,7469,7474,IdentifierMutator-Variable,tokens,token,4,0.013469879,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }<mask>.add(token);
    }"
637,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,217,7469,7474,FieldReferenceMutator,tokens,options,1,0.039400678,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }<mask>.add(token);
    }"
638,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,217,7469,7474,FieldReferenceMutator,tokens,remaining,2,0.033951063,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }<mask>.add(token);
    }"
639,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,217,7469,7474,FieldReferenceMutator,tokens,list,3,0.013643027,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }<mask>.add(token);
    }"
640,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,217,7469,7474,FieldReferenceMutator,tokens,token,4,0.013469879,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }<mask>.add(token);
    }"
641,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,217,7480,7484,IdentifierMutator-Variable,token,current,1,5.9290504E-4,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(<mask>);
    }"
642,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,217,7480,7484,IdentifierMutator-Variable,token,this,3,4.987174E-4,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(<mask>);
    }"
643,PosixParser.java,processOptionToken,"void processOptionToken(String token, boolean stopAtNonOption)",205,217,7480,7484,IdentifierMutator-Variable,token,Token,4,4.7710416E-4,<mask>,"void processOptionToken(String token, boolean stopAtNonOption)
    {
        if (stopAtNonOption && !options.hasOption(token))
        {
            eatTheRest = true;
        }

        if (options.hasOption(token))
        {
            currentOption = options.getOption(token);
        }

        tokens.add(<mask>);
    }"
644,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,248,8886,8886,IdentifierMutator-Literal,1,0,0,0.9405035,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i =<mask>; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
645,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,248,8886,8886,IdentifierMutator-Literal,1,0,2,0.002642376,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i =<mask>; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
646,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,248,8886,8886,IdentifierMutator-Literal,1,2,3,0.0024366237,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i =<mask>; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
647,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,248,8890,8892,BinaryOperatorMutator,<,<=,2,0.030505095,i <mask> token.length(),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i<mask>token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
648,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,248,8890,8892,BinaryOperatorMutator,<,>,3,0.0018000006,i <mask> token.length(),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i<mask>token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
649,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,248,8890,8892,BinaryOperatorMutator,<,==,4,0.0012322733,i <mask> token.length(),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i<mask>token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
650,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,248,8889,8889,IdentifierMutator-Variable,i,I,2,1.7671892E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1;<mask> < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
651,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,248,8889,8889,IdentifierMutator-Variable,i,I,3,1.4657502E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1;<mask> < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
652,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,248,8889,8889,IdentifierMutator-Variable,i,0,4,9.139869E-5,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1;<mask> < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
653,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,248,8899,8904,MethodCallMutator,length,width,2,1.4556522E-5,token.<mask>(),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.<mask>(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
654,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,248,8899,8904,MethodCallMutator,length,size,3,4.053325E-6,token.<mask>(),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.<mask>(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
655,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,248,8899,8904,MethodCallMutator,length,len,4,2.5414556E-6,token.<mask>(),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.<mask>(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
656,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,248,8893,8897,IdentifierMutator-Variable,token,tokens,2,9.099058E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i <<mask>.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
657,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,248,8893,8897,IdentifierMutator-Variable,token,input,3,2.8230235E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i <<mask>.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
658,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,248,8893,8897,IdentifierMutator-Variable,token,option,4,2.5609668E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i <<mask>.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
659,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,248,8910,8911,UnaryOperatorMutator,++,++),2,0.008319395,i<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i<mask>)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
660,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,248,8910,8911,UnaryOperatorMutator,++,--,3,9.5631665E-4,i<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i<mask>)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
661,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,248,8910,8911,UnaryOperatorMutator,++,++;,4,5.896558E-4,i<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i<mask>)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
662,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,248,8909,8909,IdentifierMutator-Variable,i,I,2,7.6069344E-5,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length();<mask>++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
663,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,248,8909,8909,IdentifierMutator-Variable,i,,3,7.1419185E-5,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length();<mask>++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
664,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,248,8909,8909,IdentifierMutator-Variable,i,I,4,5.5092547E-5,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length();<mask>++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
665,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,250,8955,8961,MethodCallMutator,valueOf,name,0,0.29572383,String.<mask>(token.charAt(i)),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.<mask>(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
666,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,250,8955,8961,MethodCallMutator,valueOf,value,1,0.089023195,String.<mask>(token.charAt(i)),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.<mask>(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
667,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,250,8955,8961,MethodCallMutator,valueOf,trim,2,0.058333635,String.<mask>(token.charAt(i)),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.<mask>(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
668,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,250,8955,8961,MethodCallMutator,valueOf,escape,3,0.039246578,String.<mask>(token.charAt(i)),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.<mask>(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
669,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,250,8955,8961,MethodCallMutator,valueOf,capital,4,0.029006584,String.<mask>(token.charAt(i)),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.<mask>(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
670,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,250,8969,8974,MethodCallMutator,charAt,string,0,0.3300961,token.<mask>(i),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.<mask>(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
671,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,250,8969,8974,MethodCallMutator,charAt,slice,1,0.23074901,token.<mask>(i),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.<mask>(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
672,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,250,8969,8974,MethodCallMutator,charAt,get,2,0.07542666,token.<mask>(i),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.<mask>(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
673,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,250,8969,8974,MethodCallMutator,charAt,length,3,0.044674076,token.<mask>(i),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.<mask>(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
674,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,250,8969,8974,MethodCallMutator,charAt,group,4,0.03149479,token.<mask>(i),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.<mask>(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
675,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,250,8963,8967,IdentifierMutator-Variable,token,word,2,1.4755035E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(<mask>.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
676,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,250,8963,8967,IdentifierMutator-Variable,token,tag,3,6.400667E-5,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(<mask>.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
677,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,250,8963,8967,IdentifierMutator-Variable,token,Token,4,4.666992E-5,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(<mask>.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
678,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,250,8976,8976,IdentifierMutator-Variable,i,0,1,5.1593187E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(<mask>));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
679,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,250,8976,8976,IdentifierMutator-Variable,i,1,3,6.2918916E-5,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(<mask>));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
680,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,250,8976,8976,IdentifierMutator-Variable,i,I,4,4.8678987E-5,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(<mask>));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
681,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,252,9006,9014,MethodCallMutator,hasOption,has,0,0.7603596,options.<mask>(ch),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.<mask>(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
682,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,252,9006,9014,MethodCallMutator,hasOption,get,1,0.047255833,options.<mask>(ch),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.<mask>(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
683,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,252,9006,9014,MethodCallMutator,hasOption,include,2,0.014179953,options.<mask>(ch),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.<mask>(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
684,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,252,9006,9014,MethodCallMutator,hasOption,parse,3,0.012955644,options.<mask>(ch),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.<mask>(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
685,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,252,9006,9014,MethodCallMutator,hasOption,option,4,0.010774215,options.<mask>(ch),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.<mask>(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
686,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,252,8998,9004,IdentifierMutator-Variable,options,Options,1,0.0018661532,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (<mask>.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
687,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,252,8998,9004,IdentifierMutator-Variable,options,this,2,5.136519E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (<mask>.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
688,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,252,8998,9004,IdentifierMutator-Variable,options,option,3,4.6573058E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (<mask>.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
689,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,252,8998,9004,IdentifierMutator-Variable,options,config,4,1.8963752E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (<mask>.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
690,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,252,8998,9004,FieldReferenceMutator,options,Options,1,0.0018661532,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (<mask>.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
691,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,252,8998,9004,FieldReferenceMutator,options,this,2,5.136519E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (<mask>.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
692,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,252,8998,9004,FieldReferenceMutator,options,option,3,4.6573058E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (<mask>.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
693,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,252,8998,9004,FieldReferenceMutator,options,config,4,1.8963752E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (<mask>.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
694,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,252,9016,9017,IdentifierMutator-Variable,ch,Ch,1,1.0645186E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(<mask>))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
695,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,252,9016,9017,IdentifierMutator-Variable,ch,char,2,9.535514E-5,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(<mask>))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
696,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,252,9016,9017,IdentifierMutator-Variable,ch,chan,3,8.930662E-5,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(<mask>))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
697,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,252,9016,9017,IdentifierMutator-Variable,ch,sch,4,5.007431E-5,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(<mask>))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
698,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9058,9060,MethodCallMutator,add,remove,1,0.03967358,"tokens.<mask>(""-"" + ch)","void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.<mask>(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
699,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9058,9060,MethodCallMutator,add,push,2,0.025548534,"tokens.<mask>(""-"" + ch)","void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.<mask>(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
700,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9058,9060,MethodCallMutator,add,append,3,0.0037774546,"tokens.<mask>(""-"" + ch)","void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.<mask>(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
701,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9058,9060,MethodCallMutator,add,delete,4,8.1594463E-4,"tokens.<mask>(""-"" + ch)","void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.<mask>(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
702,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9051,9056,IdentifierMutator-Variable,tokens,options,1,0.1044524,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {<mask>.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
703,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9051,9056,IdentifierMutator-Variable,tokens,options,2,0.011752062,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {<mask>.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
704,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9051,9056,IdentifierMutator-Variable,tokens,args,3,0.007822082,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {<mask>.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
705,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9051,9056,IdentifierMutator-Variable,tokens,Tokens,4,0.0065569202,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {<mask>.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
706,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9051,9056,FieldReferenceMutator,tokens,options,1,0.1044524,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {<mask>.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
707,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9051,9056,FieldReferenceMutator,tokens,options,2,0.011752062,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {<mask>.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
708,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9051,9056,FieldReferenceMutator,tokens,args,3,0.007822082,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {<mask>.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
709,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9051,9056,FieldReferenceMutator,tokens,Tokens,4,0.0065569202,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {<mask>.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
710,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9065,9067,BinaryOperatorMutator,+,"""+",2,0.0023244417,"""-"" <mask> ch","void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-""<mask>ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
711,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9065,9067,BinaryOperatorMutator,+,",",3,3.1710186E-4,"""-"" <mask> ch","void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-""<mask>ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
712,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9065,9067,BinaryOperatorMutator,+,""",",4,2.3749833E-4,"""-"" <mask> ch","void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-""<mask>ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
713,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9062,9064,IdentifierMutator-Literal,"""-""",token,0,0.3516877,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(<mask> + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
714,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9062,9064,IdentifierMutator-Literal,"""-""",prefix,1,0.19666693,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(<mask> + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
715,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9062,9064,IdentifierMutator-Literal,"""-""",option,2,0.017233519,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(<mask> + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
716,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9062,9064,IdentifierMutator-Literal,"""-""",i,3,0.016056437,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(<mask> + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
717,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9062,9064,IdentifierMutator-Literal,"""-""",string,4,0.015148902,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(<mask> + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
718,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9068,9069,IdentifierMutator-Variable,ch,chunk,2,0.004193287,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" +<mask>);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
719,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9068,9069,IdentifierMutator-Variable,ch,token,3,0.0025996666,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" +<mask>);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
720,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,254,9068,9069,IdentifierMutator-Variable,ch,char,4,0.0021063425,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" +<mask>);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
721,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9102,9102,AssignmentMutator,currentOption=options.getOption(ch),|,0,0.8591892,currentOption <mask>= options.getOption(ch),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption<mask>= options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
722,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9102,9102,AssignmentMutator,currentOption=options.getOption(ch),&,1,0.0287525,currentOption <mask>= options.getOption(ch),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption<mask>= options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
723,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9102,9102,AssignmentMutator,currentOption=options.getOption(ch),||,2,0.027661556,currentOption <mask>= options.getOption(ch),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption<mask>= options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
724,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9102,9102,AssignmentMutator,currentOption=options.getOption(ch),^,3,0.026684439,currentOption <mask>= options.getOption(ch),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption<mask>= options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
725,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9102,9102,AssignmentMutator,currentOption=options.getOption(ch),*,4,0.016417919,currentOption <mask>= options.getOption(ch),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption<mask>= options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
726,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9089,9101,IdentifierMutator-Variable,currentOption,option,0,0.32083023,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);<mask> = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
727,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9089,9101,IdentifierMutator-Variable,currentOption,ch,1,0.23221579,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);<mask> = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
728,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9089,9101,IdentifierMutator-Variable,currentOption,options,2,0.16067456,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);<mask> = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
729,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9089,9101,IdentifierMutator-Variable,currentOption,opt,3,0.06442173,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);<mask> = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
730,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9089,9101,IdentifierMutator-Variable,currentOption,token,4,0.021788757,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);<mask> = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
731,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9089,9101,FieldReferenceMutator,currentOption,option,0,0.32083023,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);<mask> = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
732,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9089,9101,FieldReferenceMutator,currentOption,ch,1,0.23221579,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);<mask> = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
733,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9089,9101,FieldReferenceMutator,currentOption,options,2,0.16067456,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);<mask> = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
734,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9089,9101,FieldReferenceMutator,currentOption,opt,3,0.06442173,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);<mask> = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
735,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9089,9101,FieldReferenceMutator,currentOption,token,4,0.021788757,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);<mask> = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
736,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9113,9121,MethodCallMutator,getOption,get,0,0.54569715,options.<mask>(ch),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.<mask>(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
737,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9113,9121,MethodCallMutator,getOption,option,1,0.4169729,options.<mask>(ch),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.<mask>(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
738,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9113,9121,MethodCallMutator,getOption,section,2,0.0050848704,options.<mask>(ch),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.<mask>(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
739,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9113,9121,MethodCallMutator,getOption,parse,3,0.0038231811,options.<mask>(ch),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.<mask>(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
740,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9113,9121,MethodCallMutator,getOption,opt,4,0.0025983811,options.<mask>(ch),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.<mask>(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
741,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9105,9111,IdentifierMutator-Variable,options,option,1,4.325293E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption =<mask>.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
742,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9105,9111,IdentifierMutator-Variable,options,config,2,4.0909092E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption =<mask>.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
743,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9105,9111,IdentifierMutator-Variable,options,this,3,3.5769885E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption =<mask>.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
744,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9105,9111,FieldReferenceMutator,options,option,1,4.325293E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption =<mask>.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
745,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9105,9111,FieldReferenceMutator,options,config,2,4.0909092E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption =<mask>.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
746,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9105,9111,FieldReferenceMutator,options,this,3,3.5769885E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption =<mask>.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
747,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9123,9124,IdentifierMutator-Variable,ch,Ch,1,2.1359652E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(<mask>);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
748,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9123,9124,IdentifierMutator-Variable,ch,char,2,1.8563817E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(<mask>);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
749,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9123,9124,IdentifierMutator-Variable,ch,chan,3,8.6540625E-5,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(<mask>);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
750,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,255,9123,9124,IdentifierMutator-Variable,ch,sch,4,7.2902876E-5,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(<mask>);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
751,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9171,9174,BinaryOperatorMutator,&&,||,1,0.08217949,currentOption.hasArg() <mask> (token.length() != (i + 1)),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg()<mask>(token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
752,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9171,9174,BinaryOperatorMutator,&&,&,3,0.070896134,currentOption.hasArg() <mask> (token.length() != (i + 1)),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg()<mask>(token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
753,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9171,9174,BinaryOperatorMutator,&&,|,4,0.014671588,currentOption.hasArg() <mask> (token.length() != (i + 1)),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg()<mask>(token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
754,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9163,9168,MethodCallMutator,hasArg,value,0,0.08460046,currentOption.<mask>(),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.<mask>() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
755,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9163,9168,MethodCallMutator,hasArg,empty,1,0.06865243,currentOption.<mask>(),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.<mask>() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
756,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9163,9168,MethodCallMutator,hasArg,selected,2,0.06843814,currentOption.<mask>(),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.<mask>() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
757,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9163,9168,MethodCallMutator,hasArg,optional,3,0.066449784,currentOption.<mask>(),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.<mask>() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
758,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9163,9168,MethodCallMutator,hasArg,get,4,0.056077912,currentOption.<mask>(),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.<mask>() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
759,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9149,9161,IdentifierMutator-Variable,currentOption,options,0,0.68507206,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (<mask>.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
760,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9149,9161,IdentifierMutator-Variable,currentOption,option,1,0.15893373,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (<mask>.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
761,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9149,9161,IdentifierMutator-Variable,currentOption,this,2,0.024934003,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (<mask>.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
762,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9149,9161,IdentifierMutator-Variable,currentOption,command,3,0.018297303,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (<mask>.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
763,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9149,9161,IdentifierMutator-Variable,currentOption,Options,4,0.010432611,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (<mask>.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
764,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9149,9161,FieldReferenceMutator,currentOption,options,0,0.68507206,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (<mask>.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
765,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9149,9161,FieldReferenceMutator,currentOption,option,1,0.15893373,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (<mask>.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
766,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9149,9161,FieldReferenceMutator,currentOption,this,2,0.024934003,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (<mask>.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
767,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9149,9161,FieldReferenceMutator,currentOption,command,3,0.018297303,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (<mask>.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
768,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9149,9161,FieldReferenceMutator,currentOption,Options,4,0.010432611,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (<mask>.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
769,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9190,9193,BinaryOperatorMutator,!=,==,0,0.2611046,token.length() <mask> (i + 1),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length()<mask>(i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
770,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9190,9193,BinaryOperatorMutator,!=,<,1,0.25361052,token.length() <mask> (i + 1),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length()<mask>(i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
771,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9190,9193,BinaryOperatorMutator,!=,>,2,0.19822235,token.length() <mask> (i + 1),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length()<mask>(i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
772,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9190,9193,BinaryOperatorMutator,!=,<,3,0.0982864,token.length() <mask> (i + 1),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length()<mask>(i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
773,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9190,9193,BinaryOperatorMutator,!=,>,4,0.04802749,token.length() <mask> (i + 1),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length()<mask>(i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
774,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9182,9187,MethodCallMutator,length,position,1,0.011126664,token.<mask>(),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.<mask>() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
775,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9182,9187,MethodCallMutator,length,index,2,0.0044612484,token.<mask>(),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.<mask>() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
776,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9182,9187,MethodCallMutator,length,pos,3,0.0011418035,token.<mask>(),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.<mask>() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
777,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9182,9187,MethodCallMutator,length,size,4,6.483292E-4,token.<mask>(),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.<mask>() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
778,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9176,9180,IdentifierMutator-Variable,token,word,1,8.695222E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (<mask>.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
779,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9176,9180,IdentifierMutator-Variable,token,channel,2,6.578187E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (<mask>.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
780,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9176,9180,IdentifierMutator-Variable,token,option,3,5.201492E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (<mask>.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
781,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9176,9180,IdentifierMutator-Variable,token,Token,4,5.0543604E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (<mask>.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
782,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9196,9198,BinaryOperatorMutator,+,-,1,0.18794051,i <mask> 1,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i<mask>1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
783,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9196,9198,BinaryOperatorMutator,+,)+,3,0.012087569,i <mask> 1,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i<mask>1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
784,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9196,9198,BinaryOperatorMutator,+,-,4,0.0048210686,i <mask> 1,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i<mask>1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
785,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9195,9195,IdentifierMutator-Variable,i,ch,1,0.006660117,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (<mask> + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
786,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9195,9195,IdentifierMutator-Variable,i,c,2,0.0013460807,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (<mask> + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
787,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9195,9195,IdentifierMutator-Variable,i,j,3,6.419045E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (<mask> + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
788,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9195,9195,IdentifierMutator-Variable,i,ci,4,3.9119643E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (<mask> + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
789,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9199,9199,IdentifierMutator-Literal,1,2,1,0.027986687,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i +<mask>)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
790,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9199,9199,IdentifierMutator-Literal,1,3,2,0.0011966629,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i +<mask>)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
791,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,257,9199,9199,IdentifierMutator-Literal,1,4,4,3.050354E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i +<mask>)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
792,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9249,9251,MethodCallMutator,add,remove,1,0.027409805,tokens.<mask>(token.substring(i + 1)),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.<mask>(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
793,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9249,9251,MethodCallMutator,add,push,2,0.0024603743,tokens.<mask>(token.substring(i + 1)),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.<mask>(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
794,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9249,9251,MethodCallMutator,add,delete,3,6.7092857E-4,tokens.<mask>(token.substring(i + 1)),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.<mask>(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
795,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9249,9251,MethodCallMutator,add,append,4,3.4750663E-4,tokens.<mask>(token.substring(i + 1)),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.<mask>(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
796,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9242,9247,IdentifierMutator-Variable,tokens,args,1,0.019901695,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {<mask>.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
797,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9242,9247,IdentifierMutator-Variable,tokens,token,2,0.018697927,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {<mask>.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
798,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9242,9247,IdentifierMutator-Variable,tokens,remaining,3,0.0044773496,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {<mask>.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
799,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9242,9247,IdentifierMutator-Variable,tokens,output,4,0.003548982,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {<mask>.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
800,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9242,9247,FieldReferenceMutator,tokens,args,1,0.019901695,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {<mask>.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
801,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9242,9247,FieldReferenceMutator,tokens,token,2,0.018697927,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {<mask>.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
802,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9242,9247,FieldReferenceMutator,tokens,remaining,3,0.0044773496,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {<mask>.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
803,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9242,9247,FieldReferenceMutator,tokens,output,4,0.003548982,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {<mask>.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
804,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9259,9267,MethodCallMutator,substring,slice,0,0.4831351,token.<mask>(i + 1),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.<mask>(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
805,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9259,9267,MethodCallMutator,substring,ring,1,0.22049108,token.<mask>(i + 1),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.<mask>(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
806,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9259,9267,MethodCallMutator,substring,length,2,0.033599317,token.<mask>(i + 1),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.<mask>(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
807,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9259,9267,MethodCallMutator,substring,abs,3,0.03303453,token.<mask>(i + 1),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.<mask>(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
808,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9259,9267,MethodCallMutator,substring,get,4,0.032802027,token.<mask>(i + 1),"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.<mask>(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
809,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9253,9257,IdentifierMutator-Variable,token,word,2,3.7702077E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(<mask>.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
810,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9253,9257,IdentifierMutator-Variable,token,channel,3,7.07715E-5,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(<mask>.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
811,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9253,9257,IdentifierMutator-Variable,token,string,4,6.88426E-5,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(<mask>.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
812,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9270,9272,BinaryOperatorMutator,+,)+,1,0.03390606,i <mask> 1,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i<mask>1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
813,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9270,9272,BinaryOperatorMutator,+,",",2,0.008896037,i <mask> 1,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i<mask>1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
814,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9270,9272,BinaryOperatorMutator,+,-,4,0.0021835591,i <mask> 1,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i<mask>1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
815,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9269,9269,IdentifierMutator-Variable,i,j,1,3.5302446E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(<mask> + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
816,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9269,9269,IdentifierMutator-Variable,i,c,2,2.0714758E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(<mask> + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
817,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9269,9269,IdentifierMutator-Variable,i,I,4,1.01457175E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(<mask> + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
818,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9273,9273,IdentifierMutator-Literal,1,2,1,0.026359176,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i +<mask>));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
819,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9273,9273,IdentifierMutator-Literal,1,3,2,0.0010705962,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i +<mask>));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
820,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,259,9273,9273,IdentifierMutator-Literal,1,i,3,4.1590747E-4,<mask>,"void burstToken(String token, boolean stopAtNonOption)
    {
        for (int i = 1; i < token.length(); i++)
        {
            String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i +<mask>));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
821,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,264,9359,9373,IdentifierMutator-Variable,stopAtNonOption,true,0,0.25924444,<mask>,"    String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (<mask>)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
822,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,264,9359,9373,IdentifierMutator-Variable,stopAtNonOption,optional,1,0.15750054,<mask>,"    String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (<mask>)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
823,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,264,9359,9373,IdentifierMutator-Variable,stopAtNonOption,token,2,0.04066655,<mask>,"    String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (<mask>)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
824,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,264,9359,9373,IdentifierMutator-Variable,stopAtNonOption,option,3,0.018656647,<mask>,"    String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (<mask>)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
825,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,264,9359,9373,IdentifierMutator-Variable,stopAtNonOption,continue,4,0.017781205,<mask>,"    String ch = String.valueOf(token.charAt(i));

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (<mask>)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
826,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9406,9426,MethodCallMutator,processNonOptionToken,stop,0,0.2562815,"<mask>(token.substring(i), true)","

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {<mask>(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
827,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9406,9426,MethodCallMutator,processNonOptionToken,print,1,0.10631192,"<mask>(token.substring(i), true)","

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {<mask>(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
828,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9406,9426,MethodCallMutator,processNonOptionToken,eval,2,0.040976655,"<mask>(token.substring(i), true)","

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {<mask>(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
829,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9406,9426,MethodCallMutator,processNonOptionToken,end,3,0.033912353,"<mask>(token.substring(i), true)","

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {<mask>(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
830,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9406,9426,MethodCallMutator,processNonOptionToken,consume,4,0.031108238,"<mask>(token.substring(i), true)","

            if (options.hasOption(ch))
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {<mask>(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
831,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9434,9442,MethodCallMutator,substring,slice,0,0.8153124,token.<mask>(i),"           {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.<mask>(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
832,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9434,9442,MethodCallMutator,substring,ring,1,0.029517155,token.<mask>(i),"           {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.<mask>(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
833,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9434,9442,MethodCallMutator,substring,length,2,0.020543741,token.<mask>(i),"           {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.<mask>(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
834,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9434,9442,MethodCallMutator,substring,group,3,0.01803023,token.<mask>(i),"           {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.<mask>(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
835,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9434,9442,MethodCallMutator,substring,get,4,0.015297826,token.<mask>(i),"           {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.<mask>(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
836,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9428,9432,IdentifierMutator-Variable,token,word,1,5.605617E-4,<mask>,"
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(<mask>.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
837,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9428,9432,IdentifierMutator-Variable,token,key,2,2.6983296E-4,<mask>,"
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(<mask>.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
838,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9428,9432,IdentifierMutator-Variable,token,option,3,2.1392293E-4,<mask>,"
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(<mask>.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
839,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9428,9432,IdentifierMutator-Variable,token,string,4,2.125077E-4,<mask>,"
            {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(<mask>.substring(i), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
840,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9444,9444,IdentifierMutator-Variable,i,1,1,0.0142320115,<mask>,"        {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(<mask>), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
841,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9444,9444,IdentifierMutator-Variable,i,2,2,0.0049843793,<mask>,"        {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(<mask>), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
842,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9444,9444,IdentifierMutator-Variable,i,0,3,0.0040959194,<mask>,"        {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(<mask>), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
843,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9444,9444,IdentifierMutator-Variable,i,3,4,0.001469773,<mask>,"        {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(<mask>), true);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
844,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9448,9451,IdentifierMutator-Literal,true,ch,0,0.34147072,<mask>,"      {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i),<mask>);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
845,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9448,9451,IdentifierMutator-Literal,true,token,1,0.11070222,<mask>,"      {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i),<mask>);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
846,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9448,9451,IdentifierMutator-Literal,true,i,2,0.038877442,<mask>,"      {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i),<mask>);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
847,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,266,9448,9451,IdentifierMutator-Literal,true,options,4,0.027209248,<mask>,"      {
                tokens.add(""-"" + ch);
                currentOption = options.getOption(ch);

                if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i),<mask>);
                break;
            }
            else
            {
                tokens.add(token);
                break;
            }
        }
    }"
848,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,271,9546,9548,MethodCallMutator,add,remove,1,0.115393616,tokens.<mask>(token),"hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.<mask>(token);
                break;
            }
        }
    }"
849,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,271,9546,9548,MethodCallMutator,add,push,2,0.02789076,tokens.<mask>(token),"hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.<mask>(token);
                break;
            }
        }
    }"
850,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,271,9546,9548,MethodCallMutator,add,delete,3,0.0016043918,tokens.<mask>(token),"hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.<mask>(token);
                break;
            }
        }
    }"
851,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,271,9546,9548,MethodCallMutator,add,append,4,0.0011615421,tokens.<mask>(token),"hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.<mask>(token);
                break;
            }
        }
    }"
852,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,271,9539,9544,IdentifierMutator-Variable,tokens,candidates,1,0.0052845767,<mask>,"              if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {<mask>.add(token);
                break;
            }
        }
    }"
853,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,271,9539,9544,IdentifierMutator-Variable,tokens,Tokens,2,0.0031098553,<mask>,"              if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {<mask>.add(token);
                break;
            }
        }
    }"
854,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,271,9539,9544,IdentifierMutator-Variable,tokens,result,3,0.0024308667,<mask>,"              if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {<mask>.add(token);
                break;
            }
        }
    }"
855,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,271,9539,9544,IdentifierMutator-Variable,tokens,options,4,0.0022799103,<mask>,"              if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {<mask>.add(token);
                break;
            }
        }
    }"
856,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,271,9539,9544,FieldReferenceMutator,tokens,candidates,1,0.0052845767,<mask>,"              if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {<mask>.add(token);
                break;
            }
        }
    }"
857,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,271,9539,9544,FieldReferenceMutator,tokens,Tokens,2,0.0031098553,<mask>,"              if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {<mask>.add(token);
                break;
            }
        }
    }"
858,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,271,9539,9544,FieldReferenceMutator,tokens,result,3,0.0024308667,<mask>,"              if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {<mask>.add(token);
                break;
            }
        }
    }"
859,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,271,9539,9544,FieldReferenceMutator,tokens,options,4,0.0022799103,<mask>,"              if (currentOption.hasArg() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {<mask>.add(token);
                break;
            }
        }
    }"
860,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,271,9550,9554,IdentifierMutator-Variable,token,this,1,0.0018955709,<mask>,"() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(<mask>);
                break;
            }
        }
    }"
861,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,271,9550,9554,IdentifierMutator-Variable,token,i,2,0.0012995458,<mask>,"() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(<mask>);
                break;
            }
        }
    }"
862,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,271,9550,9554,IdentifierMutator-Variable,token,word,3,0.0010189256,<mask>,"() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(<mask>);
                break;
            }
        }
    }"
863,PosixParser.java,burstToken,"void burstToken(String token, boolean stopAtNonOption)",246,271,9550,9554,IdentifierMutator-Variable,token,null,4,6.149841E-4,<mask>,"() && (token.length() != (i + 1)))
                {
                    tokens.add(token.substring(i + 1));

                    break;
                }
            }
            else if (stopAtNonOption)
            {
                processNonOptionToken(token.substring(i), true);
                break;
            }
            else
            {
                tokens.add(<mask>);
                break;
            }
        }
    }"
